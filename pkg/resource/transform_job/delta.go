// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package transform_job

import (
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}
	customSetDefaults(a, b)

	if ackcompare.HasNilDifference(a.ko.Spec.BatchStrategy, b.ko.Spec.BatchStrategy) {
		delta.Add("Spec.BatchStrategy", a.ko.Spec.BatchStrategy, b.ko.Spec.BatchStrategy)
	} else if a.ko.Spec.BatchStrategy != nil && b.ko.Spec.BatchStrategy != nil {
		if *a.ko.Spec.BatchStrategy != *b.ko.Spec.BatchStrategy {
			delta.Add("Spec.BatchStrategy", a.ko.Spec.BatchStrategy, b.ko.Spec.BatchStrategy)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.DataProcessing, b.ko.Spec.DataProcessing) {
		delta.Add("Spec.DataProcessing", a.ko.Spec.DataProcessing, b.ko.Spec.DataProcessing)
	} else if a.ko.Spec.DataProcessing != nil && b.ko.Spec.DataProcessing != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.DataProcessing.InputFilter, b.ko.Spec.DataProcessing.InputFilter) {
			delta.Add("Spec.DataProcessing.InputFilter", a.ko.Spec.DataProcessing.InputFilter, b.ko.Spec.DataProcessing.InputFilter)
		} else if a.ko.Spec.DataProcessing.InputFilter != nil && b.ko.Spec.DataProcessing.InputFilter != nil {
			if *a.ko.Spec.DataProcessing.InputFilter != *b.ko.Spec.DataProcessing.InputFilter {
				delta.Add("Spec.DataProcessing.InputFilter", a.ko.Spec.DataProcessing.InputFilter, b.ko.Spec.DataProcessing.InputFilter)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DataProcessing.JoinSource, b.ko.Spec.DataProcessing.JoinSource) {
			delta.Add("Spec.DataProcessing.JoinSource", a.ko.Spec.DataProcessing.JoinSource, b.ko.Spec.DataProcessing.JoinSource)
		} else if a.ko.Spec.DataProcessing.JoinSource != nil && b.ko.Spec.DataProcessing.JoinSource != nil {
			if *a.ko.Spec.DataProcessing.JoinSource != *b.ko.Spec.DataProcessing.JoinSource {
				delta.Add("Spec.DataProcessing.JoinSource", a.ko.Spec.DataProcessing.JoinSource, b.ko.Spec.DataProcessing.JoinSource)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DataProcessing.OutputFilter, b.ko.Spec.DataProcessing.OutputFilter) {
			delta.Add("Spec.DataProcessing.OutputFilter", a.ko.Spec.DataProcessing.OutputFilter, b.ko.Spec.DataProcessing.OutputFilter)
		} else if a.ko.Spec.DataProcessing.OutputFilter != nil && b.ko.Spec.DataProcessing.OutputFilter != nil {
			if *a.ko.Spec.DataProcessing.OutputFilter != *b.ko.Spec.DataProcessing.OutputFilter {
				delta.Add("Spec.DataProcessing.OutputFilter", a.ko.Spec.DataProcessing.OutputFilter, b.ko.Spec.DataProcessing.OutputFilter)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Environment, b.ko.Spec.Environment) {
		delta.Add("Spec.Environment", a.ko.Spec.Environment, b.ko.Spec.Environment)
	} else if a.ko.Spec.Environment != nil && b.ko.Spec.Environment != nil {
		if !ackcompare.MapStringStringPEqual(a.ko.Spec.Environment, b.ko.Spec.Environment) {
			delta.Add("Spec.Environment", a.ko.Spec.Environment, b.ko.Spec.Environment)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.ExperimentConfig, b.ko.Spec.ExperimentConfig) {
		delta.Add("Spec.ExperimentConfig", a.ko.Spec.ExperimentConfig, b.ko.Spec.ExperimentConfig)
	} else if a.ko.Spec.ExperimentConfig != nil && b.ko.Spec.ExperimentConfig != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.ExperimentConfig.ExperimentName, b.ko.Spec.ExperimentConfig.ExperimentName) {
			delta.Add("Spec.ExperimentConfig.ExperimentName", a.ko.Spec.ExperimentConfig.ExperimentName, b.ko.Spec.ExperimentConfig.ExperimentName)
		} else if a.ko.Spec.ExperimentConfig.ExperimentName != nil && b.ko.Spec.ExperimentConfig.ExperimentName != nil {
			if *a.ko.Spec.ExperimentConfig.ExperimentName != *b.ko.Spec.ExperimentConfig.ExperimentName {
				delta.Add("Spec.ExperimentConfig.ExperimentName", a.ko.Spec.ExperimentConfig.ExperimentName, b.ko.Spec.ExperimentConfig.ExperimentName)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.ExperimentConfig.TrialComponentDisplayName, b.ko.Spec.ExperimentConfig.TrialComponentDisplayName) {
			delta.Add("Spec.ExperimentConfig.TrialComponentDisplayName", a.ko.Spec.ExperimentConfig.TrialComponentDisplayName, b.ko.Spec.ExperimentConfig.TrialComponentDisplayName)
		} else if a.ko.Spec.ExperimentConfig.TrialComponentDisplayName != nil && b.ko.Spec.ExperimentConfig.TrialComponentDisplayName != nil {
			if *a.ko.Spec.ExperimentConfig.TrialComponentDisplayName != *b.ko.Spec.ExperimentConfig.TrialComponentDisplayName {
				delta.Add("Spec.ExperimentConfig.TrialComponentDisplayName", a.ko.Spec.ExperimentConfig.TrialComponentDisplayName, b.ko.Spec.ExperimentConfig.TrialComponentDisplayName)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.ExperimentConfig.TrialName, b.ko.Spec.ExperimentConfig.TrialName) {
			delta.Add("Spec.ExperimentConfig.TrialName", a.ko.Spec.ExperimentConfig.TrialName, b.ko.Spec.ExperimentConfig.TrialName)
		} else if a.ko.Spec.ExperimentConfig.TrialName != nil && b.ko.Spec.ExperimentConfig.TrialName != nil {
			if *a.ko.Spec.ExperimentConfig.TrialName != *b.ko.Spec.ExperimentConfig.TrialName {
				delta.Add("Spec.ExperimentConfig.TrialName", a.ko.Spec.ExperimentConfig.TrialName, b.ko.Spec.ExperimentConfig.TrialName)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.MaxConcurrentTransforms, b.ko.Spec.MaxConcurrentTransforms) {
		delta.Add("Spec.MaxConcurrentTransforms", a.ko.Spec.MaxConcurrentTransforms, b.ko.Spec.MaxConcurrentTransforms)
	} else if a.ko.Spec.MaxConcurrentTransforms != nil && b.ko.Spec.MaxConcurrentTransforms != nil {
		if *a.ko.Spec.MaxConcurrentTransforms != *b.ko.Spec.MaxConcurrentTransforms {
			delta.Add("Spec.MaxConcurrentTransforms", a.ko.Spec.MaxConcurrentTransforms, b.ko.Spec.MaxConcurrentTransforms)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.MaxPayloadInMB, b.ko.Spec.MaxPayloadInMB) {
		delta.Add("Spec.MaxPayloadInMB", a.ko.Spec.MaxPayloadInMB, b.ko.Spec.MaxPayloadInMB)
	} else if a.ko.Spec.MaxPayloadInMB != nil && b.ko.Spec.MaxPayloadInMB != nil {
		if *a.ko.Spec.MaxPayloadInMB != *b.ko.Spec.MaxPayloadInMB {
			delta.Add("Spec.MaxPayloadInMB", a.ko.Spec.MaxPayloadInMB, b.ko.Spec.MaxPayloadInMB)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.ModelClientConfig, b.ko.Spec.ModelClientConfig) {
		delta.Add("Spec.ModelClientConfig", a.ko.Spec.ModelClientConfig, b.ko.Spec.ModelClientConfig)
	} else if a.ko.Spec.ModelClientConfig != nil && b.ko.Spec.ModelClientConfig != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.ModelClientConfig.InvocationsMaxRetries, b.ko.Spec.ModelClientConfig.InvocationsMaxRetries) {
			delta.Add("Spec.ModelClientConfig.InvocationsMaxRetries", a.ko.Spec.ModelClientConfig.InvocationsMaxRetries, b.ko.Spec.ModelClientConfig.InvocationsMaxRetries)
		} else if a.ko.Spec.ModelClientConfig.InvocationsMaxRetries != nil && b.ko.Spec.ModelClientConfig.InvocationsMaxRetries != nil {
			if *a.ko.Spec.ModelClientConfig.InvocationsMaxRetries != *b.ko.Spec.ModelClientConfig.InvocationsMaxRetries {
				delta.Add("Spec.ModelClientConfig.InvocationsMaxRetries", a.ko.Spec.ModelClientConfig.InvocationsMaxRetries, b.ko.Spec.ModelClientConfig.InvocationsMaxRetries)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.ModelClientConfig.InvocationsTimeoutInSeconds, b.ko.Spec.ModelClientConfig.InvocationsTimeoutInSeconds) {
			delta.Add("Spec.ModelClientConfig.InvocationsTimeoutInSeconds", a.ko.Spec.ModelClientConfig.InvocationsTimeoutInSeconds, b.ko.Spec.ModelClientConfig.InvocationsTimeoutInSeconds)
		} else if a.ko.Spec.ModelClientConfig.InvocationsTimeoutInSeconds != nil && b.ko.Spec.ModelClientConfig.InvocationsTimeoutInSeconds != nil {
			if *a.ko.Spec.ModelClientConfig.InvocationsTimeoutInSeconds != *b.ko.Spec.ModelClientConfig.InvocationsTimeoutInSeconds {
				delta.Add("Spec.ModelClientConfig.InvocationsTimeoutInSeconds", a.ko.Spec.ModelClientConfig.InvocationsTimeoutInSeconds, b.ko.Spec.ModelClientConfig.InvocationsTimeoutInSeconds)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.ModelName, b.ko.Spec.ModelName) {
		delta.Add("Spec.ModelName", a.ko.Spec.ModelName, b.ko.Spec.ModelName)
	} else if a.ko.Spec.ModelName != nil && b.ko.Spec.ModelName != nil {
		if *a.ko.Spec.ModelName != *b.ko.Spec.ModelName {
			delta.Add("Spec.ModelName", a.ko.Spec.ModelName, b.ko.Spec.ModelName)
		}
	}

	if ackcompare.HasNilDifference(a.ko.Spec.TransformInput, b.ko.Spec.TransformInput) {
		delta.Add("Spec.TransformInput", a.ko.Spec.TransformInput, b.ko.Spec.TransformInput)
	} else if a.ko.Spec.TransformInput != nil && b.ko.Spec.TransformInput != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.TransformInput.CompressionType, b.ko.Spec.TransformInput.CompressionType) {
			delta.Add("Spec.TransformInput.CompressionType", a.ko.Spec.TransformInput.CompressionType, b.ko.Spec.TransformInput.CompressionType)
		} else if a.ko.Spec.TransformInput.CompressionType != nil && b.ko.Spec.TransformInput.CompressionType != nil {
			if *a.ko.Spec.TransformInput.CompressionType != *b.ko.Spec.TransformInput.CompressionType {
				delta.Add("Spec.TransformInput.CompressionType", a.ko.Spec.TransformInput.CompressionType, b.ko.Spec.TransformInput.CompressionType)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.TransformInput.ContentType, b.ko.Spec.TransformInput.ContentType) {
			delta.Add("Spec.TransformInput.ContentType", a.ko.Spec.TransformInput.ContentType, b.ko.Spec.TransformInput.ContentType)
		} else if a.ko.Spec.TransformInput.ContentType != nil && b.ko.Spec.TransformInput.ContentType != nil {
			if *a.ko.Spec.TransformInput.ContentType != *b.ko.Spec.TransformInput.ContentType {
				delta.Add("Spec.TransformInput.ContentType", a.ko.Spec.TransformInput.ContentType, b.ko.Spec.TransformInput.ContentType)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.TransformInput.DataSource, b.ko.Spec.TransformInput.DataSource) {
			delta.Add("Spec.TransformInput.DataSource", a.ko.Spec.TransformInput.DataSource, b.ko.Spec.TransformInput.DataSource)
		} else if a.ko.Spec.TransformInput.DataSource != nil && b.ko.Spec.TransformInput.DataSource != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.TransformInput.DataSource.S3DataSource, b.ko.Spec.TransformInput.DataSource.S3DataSource) {
				delta.Add("Spec.TransformInput.DataSource.S3DataSource", a.ko.Spec.TransformInput.DataSource.S3DataSource, b.ko.Spec.TransformInput.DataSource.S3DataSource)
			} else if a.ko.Spec.TransformInput.DataSource.S3DataSource != nil && b.ko.Spec.TransformInput.DataSource.S3DataSource != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.TransformInput.DataSource.S3DataSource.S3DataType, b.ko.Spec.TransformInput.DataSource.S3DataSource.S3DataType) {
					delta.Add("Spec.TransformInput.DataSource.S3DataSource.S3DataType", a.ko.Spec.TransformInput.DataSource.S3DataSource.S3DataType, b.ko.Spec.TransformInput.DataSource.S3DataSource.S3DataType)
				} else if a.ko.Spec.TransformInput.DataSource.S3DataSource.S3DataType != nil && b.ko.Spec.TransformInput.DataSource.S3DataSource.S3DataType != nil {
					if *a.ko.Spec.TransformInput.DataSource.S3DataSource.S3DataType != *b.ko.Spec.TransformInput.DataSource.S3DataSource.S3DataType {
						delta.Add("Spec.TransformInput.DataSource.S3DataSource.S3DataType", a.ko.Spec.TransformInput.DataSource.S3DataSource.S3DataType, b.ko.Spec.TransformInput.DataSource.S3DataSource.S3DataType)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.TransformInput.DataSource.S3DataSource.S3URI, b.ko.Spec.TransformInput.DataSource.S3DataSource.S3URI) {
					delta.Add("Spec.TransformInput.DataSource.S3DataSource.S3URI", a.ko.Spec.TransformInput.DataSource.S3DataSource.S3URI, b.ko.Spec.TransformInput.DataSource.S3DataSource.S3URI)
				} else if a.ko.Spec.TransformInput.DataSource.S3DataSource.S3URI != nil && b.ko.Spec.TransformInput.DataSource.S3DataSource.S3URI != nil {
					if *a.ko.Spec.TransformInput.DataSource.S3DataSource.S3URI != *b.ko.Spec.TransformInput.DataSource.S3DataSource.S3URI {
						delta.Add("Spec.TransformInput.DataSource.S3DataSource.S3URI", a.ko.Spec.TransformInput.DataSource.S3DataSource.S3URI, b.ko.Spec.TransformInput.DataSource.S3DataSource.S3URI)
					}
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.TransformInput.SplitType, b.ko.Spec.TransformInput.SplitType) {
			delta.Add("Spec.TransformInput.SplitType", a.ko.Spec.TransformInput.SplitType, b.ko.Spec.TransformInput.SplitType)
		} else if a.ko.Spec.TransformInput.SplitType != nil && b.ko.Spec.TransformInput.SplitType != nil {
			if *a.ko.Spec.TransformInput.SplitType != *b.ko.Spec.TransformInput.SplitType {
				delta.Add("Spec.TransformInput.SplitType", a.ko.Spec.TransformInput.SplitType, b.ko.Spec.TransformInput.SplitType)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.TransformJobName, b.ko.Spec.TransformJobName) {
		delta.Add("Spec.TransformJobName", a.ko.Spec.TransformJobName, b.ko.Spec.TransformJobName)
	} else if a.ko.Spec.TransformJobName != nil && b.ko.Spec.TransformJobName != nil {
		if *a.ko.Spec.TransformJobName != *b.ko.Spec.TransformJobName {
			delta.Add("Spec.TransformJobName", a.ko.Spec.TransformJobName, b.ko.Spec.TransformJobName)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.TransformOutput, b.ko.Spec.TransformOutput) {
		delta.Add("Spec.TransformOutput", a.ko.Spec.TransformOutput, b.ko.Spec.TransformOutput)
	} else if a.ko.Spec.TransformOutput != nil && b.ko.Spec.TransformOutput != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.TransformOutput.Accept, b.ko.Spec.TransformOutput.Accept) {
			delta.Add("Spec.TransformOutput.Accept", a.ko.Spec.TransformOutput.Accept, b.ko.Spec.TransformOutput.Accept)
		} else if a.ko.Spec.TransformOutput.Accept != nil && b.ko.Spec.TransformOutput.Accept != nil {
			if *a.ko.Spec.TransformOutput.Accept != *b.ko.Spec.TransformOutput.Accept {
				delta.Add("Spec.TransformOutput.Accept", a.ko.Spec.TransformOutput.Accept, b.ko.Spec.TransformOutput.Accept)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.TransformOutput.AssembleWith, b.ko.Spec.TransformOutput.AssembleWith) {
			delta.Add("Spec.TransformOutput.AssembleWith", a.ko.Spec.TransformOutput.AssembleWith, b.ko.Spec.TransformOutput.AssembleWith)
		} else if a.ko.Spec.TransformOutput.AssembleWith != nil && b.ko.Spec.TransformOutput.AssembleWith != nil {
			if *a.ko.Spec.TransformOutput.AssembleWith != *b.ko.Spec.TransformOutput.AssembleWith {
				delta.Add("Spec.TransformOutput.AssembleWith", a.ko.Spec.TransformOutput.AssembleWith, b.ko.Spec.TransformOutput.AssembleWith)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.TransformOutput.KMSKeyID, b.ko.Spec.TransformOutput.KMSKeyID) {
			delta.Add("Spec.TransformOutput.KMSKeyID", a.ko.Spec.TransformOutput.KMSKeyID, b.ko.Spec.TransformOutput.KMSKeyID)
		} else if a.ko.Spec.TransformOutput.KMSKeyID != nil && b.ko.Spec.TransformOutput.KMSKeyID != nil {
			if *a.ko.Spec.TransformOutput.KMSKeyID != *b.ko.Spec.TransformOutput.KMSKeyID {
				delta.Add("Spec.TransformOutput.KMSKeyID", a.ko.Spec.TransformOutput.KMSKeyID, b.ko.Spec.TransformOutput.KMSKeyID)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.TransformOutput.S3OutputPath, b.ko.Spec.TransformOutput.S3OutputPath) {
			delta.Add("Spec.TransformOutput.S3OutputPath", a.ko.Spec.TransformOutput.S3OutputPath, b.ko.Spec.TransformOutput.S3OutputPath)
		} else if a.ko.Spec.TransformOutput.S3OutputPath != nil && b.ko.Spec.TransformOutput.S3OutputPath != nil {
			if *a.ko.Spec.TransformOutput.S3OutputPath != *b.ko.Spec.TransformOutput.S3OutputPath {
				delta.Add("Spec.TransformOutput.S3OutputPath", a.ko.Spec.TransformOutput.S3OutputPath, b.ko.Spec.TransformOutput.S3OutputPath)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.TransformResources, b.ko.Spec.TransformResources) {
		delta.Add("Spec.TransformResources", a.ko.Spec.TransformResources, b.ko.Spec.TransformResources)
	} else if a.ko.Spec.TransformResources != nil && b.ko.Spec.TransformResources != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.TransformResources.InstanceCount, b.ko.Spec.TransformResources.InstanceCount) {
			delta.Add("Spec.TransformResources.InstanceCount", a.ko.Spec.TransformResources.InstanceCount, b.ko.Spec.TransformResources.InstanceCount)
		} else if a.ko.Spec.TransformResources.InstanceCount != nil && b.ko.Spec.TransformResources.InstanceCount != nil {
			if *a.ko.Spec.TransformResources.InstanceCount != *b.ko.Spec.TransformResources.InstanceCount {
				delta.Add("Spec.TransformResources.InstanceCount", a.ko.Spec.TransformResources.InstanceCount, b.ko.Spec.TransformResources.InstanceCount)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.TransformResources.InstanceType, b.ko.Spec.TransformResources.InstanceType) {
			delta.Add("Spec.TransformResources.InstanceType", a.ko.Spec.TransformResources.InstanceType, b.ko.Spec.TransformResources.InstanceType)
		} else if a.ko.Spec.TransformResources.InstanceType != nil && b.ko.Spec.TransformResources.InstanceType != nil {
			if *a.ko.Spec.TransformResources.InstanceType != *b.ko.Spec.TransformResources.InstanceType {
				delta.Add("Spec.TransformResources.InstanceType", a.ko.Spec.TransformResources.InstanceType, b.ko.Spec.TransformResources.InstanceType)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.TransformResources.VolumeKMSKeyID, b.ko.Spec.TransformResources.VolumeKMSKeyID) {
			delta.Add("Spec.TransformResources.VolumeKMSKeyID", a.ko.Spec.TransformResources.VolumeKMSKeyID, b.ko.Spec.TransformResources.VolumeKMSKeyID)
		} else if a.ko.Spec.TransformResources.VolumeKMSKeyID != nil && b.ko.Spec.TransformResources.VolumeKMSKeyID != nil {
			if *a.ko.Spec.TransformResources.VolumeKMSKeyID != *b.ko.Spec.TransformResources.VolumeKMSKeyID {
				delta.Add("Spec.TransformResources.VolumeKMSKeyID", a.ko.Spec.TransformResources.VolumeKMSKeyID, b.ko.Spec.TransformResources.VolumeKMSKeyID)
			}
		}
	}

	return delta
}
