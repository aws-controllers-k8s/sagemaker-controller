// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package domain

import (
	"context"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/sagemaker"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/sagemaker-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.SageMaker{}
	_ = &svcapitypes.Domain{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer exit(err)
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.DescribeDomainOutput
	resp, err = rm.sdkapi.DescribeDomainWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "DescribeDomain", err)
	if err != nil {
		if awsErr, ok := ackerr.AWSError(err); ok && awsErr.Code() == "ResourceNotFound" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.AppNetworkAccessType != nil {
		ko.Spec.AppNetworkAccessType = resp.AppNetworkAccessType
	} else {
		ko.Spec.AppNetworkAccessType = nil
	}
	if resp.AuthMode != nil {
		ko.Spec.AuthMode = resp.AuthMode
	} else {
		ko.Spec.AuthMode = nil
	}
	if resp.DefaultUserSettings != nil {
		f3 := &svcapitypes.UserSettings{}
		if resp.DefaultUserSettings.ExecutionRole != nil {
			f3.ExecutionRole = resp.DefaultUserSettings.ExecutionRole
		}
		if resp.DefaultUserSettings.JupyterServerAppSettings != nil {
			f3f1 := &svcapitypes.JupyterServerAppSettings{}
			if resp.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec != nil {
				f3f1f0 := &svcapitypes.ResourceSpec{}
				if resp.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.InstanceType != nil {
					f3f1f0.InstanceType = resp.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.InstanceType
				}
				if resp.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageArn != nil {
					f3f1f0.SageMakerImageARN = resp.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageArn
				}
				if resp.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionArn != nil {
					f3f1f0.SageMakerImageVersionARN = resp.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionArn
				}
				f3f1.DefaultResourceSpec = f3f1f0
			}
			f3.JupyterServerAppSettings = f3f1
		}
		if resp.DefaultUserSettings.KernelGatewayAppSettings != nil {
			f3f2 := &svcapitypes.KernelGatewayAppSettings{}
			if resp.DefaultUserSettings.KernelGatewayAppSettings.CustomImages != nil {
				f3f2f0 := []*svcapitypes.CustomImage{}
				for _, f3f2f0iter := range resp.DefaultUserSettings.KernelGatewayAppSettings.CustomImages {
					f3f2f0elem := &svcapitypes.CustomImage{}
					if f3f2f0iter.AppImageConfigName != nil {
						f3f2f0elem.AppImageConfigName = f3f2f0iter.AppImageConfigName
					}
					if f3f2f0iter.ImageName != nil {
						f3f2f0elem.ImageName = f3f2f0iter.ImageName
					}
					if f3f2f0iter.ImageVersionNumber != nil {
						f3f2f0elem.ImageVersionNumber = f3f2f0iter.ImageVersionNumber
					}
					f3f2f0 = append(f3f2f0, f3f2f0elem)
				}
				f3f2.CustomImages = f3f2f0
			}
			if resp.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec != nil {
				f3f2f1 := &svcapitypes.ResourceSpec{}
				if resp.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.InstanceType != nil {
					f3f2f1.InstanceType = resp.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.InstanceType
				}
				if resp.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageArn != nil {
					f3f2f1.SageMakerImageARN = resp.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageArn
				}
				if resp.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionArn != nil {
					f3f2f1.SageMakerImageVersionARN = resp.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionArn
				}
				f3f2.DefaultResourceSpec = f3f2f1
			}
			f3.KernelGatewayAppSettings = f3f2
		}
		if resp.DefaultUserSettings.SecurityGroups != nil {
			f3f3 := []*string{}
			for _, f3f3iter := range resp.DefaultUserSettings.SecurityGroups {
				var f3f3elem string
				f3f3elem = *f3f3iter
				f3f3 = append(f3f3, &f3f3elem)
			}
			f3.SecurityGroups = f3f3
		}
		if resp.DefaultUserSettings.SharingSettings != nil {
			f3f4 := &svcapitypes.SharingSettings{}
			if resp.DefaultUserSettings.SharingSettings.NotebookOutputOption != nil {
				f3f4.NotebookOutputOption = resp.DefaultUserSettings.SharingSettings.NotebookOutputOption
			}
			if resp.DefaultUserSettings.SharingSettings.S3KmsKeyId != nil {
				f3f4.S3KMSKeyID = resp.DefaultUserSettings.SharingSettings.S3KmsKeyId
			}
			if resp.DefaultUserSettings.SharingSettings.S3OutputPath != nil {
				f3f4.S3OutputPath = resp.DefaultUserSettings.SharingSettings.S3OutputPath
			}
			f3.SharingSettings = f3f4
		}
		if resp.DefaultUserSettings.TensorBoardAppSettings != nil {
			f3f5 := &svcapitypes.TensorBoardAppSettings{}
			if resp.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec != nil {
				f3f5f0 := &svcapitypes.ResourceSpec{}
				if resp.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.InstanceType != nil {
					f3f5f0.InstanceType = resp.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.InstanceType
				}
				if resp.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageArn != nil {
					f3f5f0.SageMakerImageARN = resp.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageArn
				}
				if resp.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageVersionArn != nil {
					f3f5f0.SageMakerImageVersionARN = resp.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageVersionArn
				}
				f3f5.DefaultResourceSpec = f3f5f0
			}
			f3.TensorBoardAppSettings = f3f5
		}
		ko.Spec.DefaultUserSettings = f3
	} else {
		ko.Spec.DefaultUserSettings = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.DomainArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.DomainArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.DomainId != nil {
		ko.Status.DomainID = resp.DomainId
	} else {
		ko.Status.DomainID = nil
	}
	if resp.DomainName != nil {
		ko.Spec.DomainName = resp.DomainName
	} else {
		ko.Spec.DomainName = nil
	}
	if resp.HomeEfsFileSystemKmsKeyId != nil {
		ko.Spec.HomeEFSFileSystemKMSKeyID = resp.HomeEfsFileSystemKmsKeyId
	} else {
		ko.Spec.HomeEFSFileSystemKMSKeyID = nil
	}
	if resp.KmsKeyId != nil {
		ko.Spec.KMSKeyID = resp.KmsKeyId
	} else {
		ko.Spec.KMSKeyID = nil
	}
	if resp.Status != nil {
		ko.Status.Status = resp.Status
	} else {
		ko.Status.Status = nil
	}
	if resp.SubnetIds != nil {
		f14 := []*string{}
		for _, f14iter := range resp.SubnetIds {
			var f14elem string
			f14elem = *f14iter
			f14 = append(f14, &f14elem)
		}
		ko.Spec.SubnetIDs = f14
	} else {
		ko.Spec.SubnetIDs = nil
	}
	if resp.Url != nil {
		ko.Status.URL = resp.Url
	} else {
		ko.Status.URL = nil
	}
	if resp.VpcId != nil {
		ko.Spec.VPCID = resp.VpcId
	} else {
		ko.Spec.VPCID = nil
	}

	rm.setStatusDefaults(ko)
	rm.customDescribeDomainSetOutput(ko)
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Status.DomainID == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.DescribeDomainInput, error) {
	res := &svcsdk.DescribeDomainInput{}

	if r.ko.Status.DomainID != nil {
		res.SetDomainId(*r.ko.Status.DomainID)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer exit(err)
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateDomainOutput
	_ = resp
	resp, err = rm.sdkapi.CreateDomainWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateDomain", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.DomainArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.DomainArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.Url != nil {
		ko.Status.URL = resp.Url
	} else {
		ko.Status.URL = nil
	}

	rm.setStatusDefaults(ko)
	// Manually set the DomainID as Create only return the ARN
	if resp.DomainArn != nil && ko.Status.DomainID == nil {
		ko.Status.DomainID = &strings.Split(*resp.DomainArn, "/")[1]
	}

	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateDomainInput, error) {
	res := &svcsdk.CreateDomainInput{}

	if r.ko.Spec.AppNetworkAccessType != nil {
		res.SetAppNetworkAccessType(*r.ko.Spec.AppNetworkAccessType)
	}
	if r.ko.Spec.AuthMode != nil {
		res.SetAuthMode(*r.ko.Spec.AuthMode)
	}
	if r.ko.Spec.DefaultUserSettings != nil {
		f2 := &svcsdk.UserSettings{}
		if r.ko.Spec.DefaultUserSettings.ExecutionRole != nil {
			f2.SetExecutionRole(*r.ko.Spec.DefaultUserSettings.ExecutionRole)
		}
		if r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings != nil {
			f2f1 := &svcsdk.JupyterServerAppSettings{}
			if r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec != nil {
				f2f1f0 := &svcsdk.ResourceSpec{}
				if r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.InstanceType != nil {
					f2f1f0.SetInstanceType(*r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f2f1f0.SetSageMakerImageArn(*r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageARN)
				}
				if r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f2f1f0.SetSageMakerImageVersionArn(*r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionARN)
				}
				f2f1.SetDefaultResourceSpec(f2f1f0)
			}
			f2.SetJupyterServerAppSettings(f2f1)
		}
		if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings != nil {
			f2f2 := &svcsdk.KernelGatewayAppSettings{}
			if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.CustomImages != nil {
				f2f2f0 := []*svcsdk.CustomImage{}
				for _, f2f2f0iter := range r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.CustomImages {
					f2f2f0elem := &svcsdk.CustomImage{}
					if f2f2f0iter.AppImageConfigName != nil {
						f2f2f0elem.SetAppImageConfigName(*f2f2f0iter.AppImageConfigName)
					}
					if f2f2f0iter.ImageName != nil {
						f2f2f0elem.SetImageName(*f2f2f0iter.ImageName)
					}
					if f2f2f0iter.ImageVersionNumber != nil {
						f2f2f0elem.SetImageVersionNumber(*f2f2f0iter.ImageVersionNumber)
					}
					f2f2f0 = append(f2f2f0, f2f2f0elem)
				}
				f2f2.SetCustomImages(f2f2f0)
			}
			if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec != nil {
				f2f2f1 := &svcsdk.ResourceSpec{}
				if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.InstanceType != nil {
					f2f2f1.SetInstanceType(*r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f2f2f1.SetSageMakerImageArn(*r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageARN)
				}
				if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f2f2f1.SetSageMakerImageVersionArn(*r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionARN)
				}
				f2f2.SetDefaultResourceSpec(f2f2f1)
			}
			f2.SetKernelGatewayAppSettings(f2f2)
		}
		if r.ko.Spec.DefaultUserSettings.SecurityGroups != nil {
			f2f3 := []*string{}
			for _, f2f3iter := range r.ko.Spec.DefaultUserSettings.SecurityGroups {
				var f2f3elem string
				f2f3elem = *f2f3iter
				f2f3 = append(f2f3, &f2f3elem)
			}
			f2.SetSecurityGroups(f2f3)
		}
		if r.ko.Spec.DefaultUserSettings.SharingSettings != nil {
			f2f4 := &svcsdk.SharingSettings{}
			if r.ko.Spec.DefaultUserSettings.SharingSettings.NotebookOutputOption != nil {
				f2f4.SetNotebookOutputOption(*r.ko.Spec.DefaultUserSettings.SharingSettings.NotebookOutputOption)
			}
			if r.ko.Spec.DefaultUserSettings.SharingSettings.S3KMSKeyID != nil {
				f2f4.SetS3KmsKeyId(*r.ko.Spec.DefaultUserSettings.SharingSettings.S3KMSKeyID)
			}
			if r.ko.Spec.DefaultUserSettings.SharingSettings.S3OutputPath != nil {
				f2f4.SetS3OutputPath(*r.ko.Spec.DefaultUserSettings.SharingSettings.S3OutputPath)
			}
			f2.SetSharingSettings(f2f4)
		}
		if r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings != nil {
			f2f5 := &svcsdk.TensorBoardAppSettings{}
			if r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec != nil {
				f2f5f0 := &svcsdk.ResourceSpec{}
				if r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.InstanceType != nil {
					f2f5f0.SetInstanceType(*r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f2f5f0.SetSageMakerImageArn(*r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageARN)
				}
				if r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f2f5f0.SetSageMakerImageVersionArn(*r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageVersionARN)
				}
				f2f5.SetDefaultResourceSpec(f2f5f0)
			}
			f2.SetTensorBoardAppSettings(f2f5)
		}
		res.SetDefaultUserSettings(f2)
	}
	if r.ko.Spec.DomainName != nil {
		res.SetDomainName(*r.ko.Spec.DomainName)
	}
	if r.ko.Spec.HomeEFSFileSystemKMSKeyID != nil {
		res.SetHomeEfsFileSystemKmsKeyId(*r.ko.Spec.HomeEFSFileSystemKMSKeyID)
	}
	if r.ko.Spec.KMSKeyID != nil {
		res.SetKmsKeyId(*r.ko.Spec.KMSKeyID)
	}
	if r.ko.Spec.SubnetIDs != nil {
		f6 := []*string{}
		for _, f6iter := range r.ko.Spec.SubnetIDs {
			var f6elem string
			f6elem = *f6iter
			f6 = append(f6, &f6elem)
		}
		res.SetSubnetIds(f6)
	}
	if r.ko.Spec.Tags != nil {
		f7 := []*svcsdk.Tag{}
		for _, f7iter := range r.ko.Spec.Tags {
			f7elem := &svcsdk.Tag{}
			if f7iter.Key != nil {
				f7elem.SetKey(*f7iter.Key)
			}
			if f7iter.Value != nil {
				f7elem.SetValue(*f7iter.Value)
			}
			f7 = append(f7, f7elem)
		}
		res.SetTags(f7)
	}
	if r.ko.Spec.VPCID != nil {
		res.SetVpcId(*r.ko.Spec.VPCID)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer exit(err)
	if err = rm.requeueUntilCanModify(ctx, latest); err != nil {
		return nil, err
	}
	input, err := rm.newUpdateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.UpdateDomainOutput
	_ = resp
	resp, err = rm.sdkapi.UpdateDomainWithContext(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdateDomain", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.DomainArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.DomainArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.UpdateDomainInput, error) {
	res := &svcsdk.UpdateDomainInput{}

	if r.ko.Spec.DefaultUserSettings != nil {
		f0 := &svcsdk.UserSettings{}
		if r.ko.Spec.DefaultUserSettings.ExecutionRole != nil {
			f0.SetExecutionRole(*r.ko.Spec.DefaultUserSettings.ExecutionRole)
		}
		if r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings != nil {
			f0f1 := &svcsdk.JupyterServerAppSettings{}
			if r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec != nil {
				f0f1f0 := &svcsdk.ResourceSpec{}
				if r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.InstanceType != nil {
					f0f1f0.SetInstanceType(*r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f0f1f0.SetSageMakerImageArn(*r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageARN)
				}
				if r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f0f1f0.SetSageMakerImageVersionArn(*r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionARN)
				}
				f0f1.SetDefaultResourceSpec(f0f1f0)
			}
			f0.SetJupyterServerAppSettings(f0f1)
		}
		if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings != nil {
			f0f2 := &svcsdk.KernelGatewayAppSettings{}
			if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.CustomImages != nil {
				f0f2f0 := []*svcsdk.CustomImage{}
				for _, f0f2f0iter := range r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.CustomImages {
					f0f2f0elem := &svcsdk.CustomImage{}
					if f0f2f0iter.AppImageConfigName != nil {
						f0f2f0elem.SetAppImageConfigName(*f0f2f0iter.AppImageConfigName)
					}
					if f0f2f0iter.ImageName != nil {
						f0f2f0elem.SetImageName(*f0f2f0iter.ImageName)
					}
					if f0f2f0iter.ImageVersionNumber != nil {
						f0f2f0elem.SetImageVersionNumber(*f0f2f0iter.ImageVersionNumber)
					}
					f0f2f0 = append(f0f2f0, f0f2f0elem)
				}
				f0f2.SetCustomImages(f0f2f0)
			}
			if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec != nil {
				f0f2f1 := &svcsdk.ResourceSpec{}
				if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.InstanceType != nil {
					f0f2f1.SetInstanceType(*r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f0f2f1.SetSageMakerImageArn(*r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageARN)
				}
				if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f0f2f1.SetSageMakerImageVersionArn(*r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionARN)
				}
				f0f2.SetDefaultResourceSpec(f0f2f1)
			}
			f0.SetKernelGatewayAppSettings(f0f2)
		}
		if r.ko.Spec.DefaultUserSettings.SecurityGroups != nil {
			f0f3 := []*string{}
			for _, f0f3iter := range r.ko.Spec.DefaultUserSettings.SecurityGroups {
				var f0f3elem string
				f0f3elem = *f0f3iter
				f0f3 = append(f0f3, &f0f3elem)
			}
			f0.SetSecurityGroups(f0f3)
		}
		if r.ko.Spec.DefaultUserSettings.SharingSettings != nil {
			f0f4 := &svcsdk.SharingSettings{}
			if r.ko.Spec.DefaultUserSettings.SharingSettings.NotebookOutputOption != nil {
				f0f4.SetNotebookOutputOption(*r.ko.Spec.DefaultUserSettings.SharingSettings.NotebookOutputOption)
			}
			if r.ko.Spec.DefaultUserSettings.SharingSettings.S3KMSKeyID != nil {
				f0f4.SetS3KmsKeyId(*r.ko.Spec.DefaultUserSettings.SharingSettings.S3KMSKeyID)
			}
			if r.ko.Spec.DefaultUserSettings.SharingSettings.S3OutputPath != nil {
				f0f4.SetS3OutputPath(*r.ko.Spec.DefaultUserSettings.SharingSettings.S3OutputPath)
			}
			f0.SetSharingSettings(f0f4)
		}
		if r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings != nil {
			f0f5 := &svcsdk.TensorBoardAppSettings{}
			if r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec != nil {
				f0f5f0 := &svcsdk.ResourceSpec{}
				if r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.InstanceType != nil {
					f0f5f0.SetInstanceType(*r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f0f5f0.SetSageMakerImageArn(*r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageARN)
				}
				if r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f0f5f0.SetSageMakerImageVersionArn(*r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageVersionARN)
				}
				f0f5.SetDefaultResourceSpec(f0f5f0)
			}
			f0.SetTensorBoardAppSettings(f0f5)
		}
		res.SetDefaultUserSettings(f0)
	}
	if r.ko.Status.DomainID != nil {
		res.SetDomainId(*r.ko.Status.DomainID)
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer exit(err)
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteDomainOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteDomainWithContext(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteDomain", err)

	if err == nil {
		if observed, err := rm.sdkFind(ctx, r); err != ackerr.NotFound {
			if err != nil {
				return nil, err
			}
			r.SetStatus(observed)
			return r, requeueWaitWhileDeleting
		}
	}

	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteDomainInput, error) {
	res := &svcsdk.DeleteDomainInput{}

	if r.ko.Status.DomainID != nil {
		res.SetDomainId(*r.ko.Status.DomainID)
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.Domain,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}

	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}
	awsErr, ok := ackerr.AWSError(err)
	if !ok {
		return false
	}
	switch awsErr.Code() {
	case "ResourceNotFound",
		"InvalidParameterCombination",
		"InvalidParameterValue",
		"MissingParameter":
		return true
	default:
		return false
	}
}
