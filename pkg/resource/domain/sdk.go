// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package domain

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/sagemaker"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/sagemaker-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.SageMaker{}
	_ = &svcapitypes.Domain{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.DescribeDomainOutput
	resp, err = rm.sdkapi.DescribeDomainWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "DescribeDomain", err)
	if err != nil {
		if awsErr, ok := ackerr.AWSError(err); ok && awsErr.Code() == "ResourceNotFound" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.AppNetworkAccessType != nil {
		ko.Spec.AppNetworkAccessType = resp.AppNetworkAccessType
	} else {
		ko.Spec.AppNetworkAccessType = nil
	}
	if resp.AppSecurityGroupManagement != nil {
		ko.Spec.AppSecurityGroupManagement = resp.AppSecurityGroupManagement
	} else {
		ko.Spec.AppSecurityGroupManagement = nil
	}
	if resp.AuthMode != nil {
		ko.Spec.AuthMode = resp.AuthMode
	} else {
		ko.Spec.AuthMode = nil
	}
	if resp.DefaultUserSettings != nil {
		f4 := &svcapitypes.UserSettings{}
		if resp.DefaultUserSettings.ExecutionRole != nil {
			f4.ExecutionRole = resp.DefaultUserSettings.ExecutionRole
		}
		if resp.DefaultUserSettings.JupyterServerAppSettings != nil {
			f4f1 := &svcapitypes.JupyterServerAppSettings{}
			if resp.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec != nil {
				f4f1f0 := &svcapitypes.ResourceSpec{}
				if resp.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.InstanceType != nil {
					f4f1f0.InstanceType = resp.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.InstanceType
				}
				if resp.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.LifecycleConfigArn != nil {
					f4f1f0.LifecycleConfigARN = resp.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.LifecycleConfigArn
				}
				if resp.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageArn != nil {
					f4f1f0.SageMakerImageARN = resp.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageArn
				}
				if resp.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionArn != nil {
					f4f1f0.SageMakerImageVersionARN = resp.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionArn
				}
				f4f1.DefaultResourceSpec = f4f1f0
			}
			if resp.DefaultUserSettings.JupyterServerAppSettings.LifecycleConfigArns != nil {
				f4f1f1 := []*string{}
				for _, f4f1f1iter := range resp.DefaultUserSettings.JupyterServerAppSettings.LifecycleConfigArns {
					var f4f1f1elem string
					f4f1f1elem = *f4f1f1iter
					f4f1f1 = append(f4f1f1, &f4f1f1elem)
				}
				f4f1.LifecycleConfigARNs = f4f1f1
			}
			f4.JupyterServerAppSettings = f4f1
		}
		if resp.DefaultUserSettings.KernelGatewayAppSettings != nil {
			f4f2 := &svcapitypes.KernelGatewayAppSettings{}
			if resp.DefaultUserSettings.KernelGatewayAppSettings.CustomImages != nil {
				f4f2f0 := []*svcapitypes.CustomImage{}
				for _, f4f2f0iter := range resp.DefaultUserSettings.KernelGatewayAppSettings.CustomImages {
					f4f2f0elem := &svcapitypes.CustomImage{}
					if f4f2f0iter.AppImageConfigName != nil {
						f4f2f0elem.AppImageConfigName = f4f2f0iter.AppImageConfigName
					}
					if f4f2f0iter.ImageName != nil {
						f4f2f0elem.ImageName = f4f2f0iter.ImageName
					}
					if f4f2f0iter.ImageVersionNumber != nil {
						f4f2f0elem.ImageVersionNumber = f4f2f0iter.ImageVersionNumber
					}
					f4f2f0 = append(f4f2f0, f4f2f0elem)
				}
				f4f2.CustomImages = f4f2f0
			}
			if resp.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec != nil {
				f4f2f1 := &svcapitypes.ResourceSpec{}
				if resp.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.InstanceType != nil {
					f4f2f1.InstanceType = resp.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.InstanceType
				}
				if resp.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.LifecycleConfigArn != nil {
					f4f2f1.LifecycleConfigARN = resp.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.LifecycleConfigArn
				}
				if resp.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageArn != nil {
					f4f2f1.SageMakerImageARN = resp.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageArn
				}
				if resp.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionArn != nil {
					f4f2f1.SageMakerImageVersionARN = resp.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionArn
				}
				f4f2.DefaultResourceSpec = f4f2f1
			}
			if resp.DefaultUserSettings.KernelGatewayAppSettings.LifecycleConfigArns != nil {
				f4f2f2 := []*string{}
				for _, f4f2f2iter := range resp.DefaultUserSettings.KernelGatewayAppSettings.LifecycleConfigArns {
					var f4f2f2elem string
					f4f2f2elem = *f4f2f2iter
					f4f2f2 = append(f4f2f2, &f4f2f2elem)
				}
				f4f2.LifecycleConfigARNs = f4f2f2
			}
			f4.KernelGatewayAppSettings = f4f2
		}
		if resp.DefaultUserSettings.RStudioServerProAppSettings != nil {
			f4f3 := &svcapitypes.RStudioServerProAppSettings{}
			if resp.DefaultUserSettings.RStudioServerProAppSettings.AccessStatus != nil {
				f4f3.AccessStatus = resp.DefaultUserSettings.RStudioServerProAppSettings.AccessStatus
			}
			if resp.DefaultUserSettings.RStudioServerProAppSettings.UserGroup != nil {
				f4f3.UserGroup = resp.DefaultUserSettings.RStudioServerProAppSettings.UserGroup
			}
			f4.RStudioServerProAppSettings = f4f3
		}
		if resp.DefaultUserSettings.SecurityGroups != nil {
			f4f4 := []*string{}
			for _, f4f4iter := range resp.DefaultUserSettings.SecurityGroups {
				var f4f4elem string
				f4f4elem = *f4f4iter
				f4f4 = append(f4f4, &f4f4elem)
			}
			f4.SecurityGroups = f4f4
		}
		if resp.DefaultUserSettings.SharingSettings != nil {
			f4f5 := &svcapitypes.SharingSettings{}
			if resp.DefaultUserSettings.SharingSettings.NotebookOutputOption != nil {
				f4f5.NotebookOutputOption = resp.DefaultUserSettings.SharingSettings.NotebookOutputOption
			}
			if resp.DefaultUserSettings.SharingSettings.S3KmsKeyId != nil {
				f4f5.S3KMSKeyID = resp.DefaultUserSettings.SharingSettings.S3KmsKeyId
			}
			if resp.DefaultUserSettings.SharingSettings.S3OutputPath != nil {
				f4f5.S3OutputPath = resp.DefaultUserSettings.SharingSettings.S3OutputPath
			}
			f4.SharingSettings = f4f5
		}
		if resp.DefaultUserSettings.TensorBoardAppSettings != nil {
			f4f6 := &svcapitypes.TensorBoardAppSettings{}
			if resp.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec != nil {
				f4f6f0 := &svcapitypes.ResourceSpec{}
				if resp.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.InstanceType != nil {
					f4f6f0.InstanceType = resp.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.InstanceType
				}
				if resp.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.LifecycleConfigArn != nil {
					f4f6f0.LifecycleConfigARN = resp.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.LifecycleConfigArn
				}
				if resp.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageArn != nil {
					f4f6f0.SageMakerImageARN = resp.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageArn
				}
				if resp.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageVersionArn != nil {
					f4f6f0.SageMakerImageVersionARN = resp.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageVersionArn
				}
				f4f6.DefaultResourceSpec = f4f6f0
			}
			f4.TensorBoardAppSettings = f4f6
		}
		ko.Spec.DefaultUserSettings = f4
	} else {
		ko.Spec.DefaultUserSettings = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.DomainArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.DomainArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.DomainId != nil {
		ko.Status.DomainID = resp.DomainId
	} else {
		ko.Status.DomainID = nil
	}
	if resp.DomainName != nil {
		ko.Spec.DomainName = resp.DomainName
	} else {
		ko.Spec.DomainName = nil
	}
	if resp.DomainSettings != nil {
		f8 := &svcapitypes.DomainSettings{}
		if resp.DomainSettings.RStudioServerProDomainSettings != nil {
			f8f0 := &svcapitypes.RStudioServerProDomainSettings{}
			if resp.DomainSettings.RStudioServerProDomainSettings.DefaultResourceSpec != nil {
				f8f0f0 := &svcapitypes.ResourceSpec{}
				if resp.DomainSettings.RStudioServerProDomainSettings.DefaultResourceSpec.InstanceType != nil {
					f8f0f0.InstanceType = resp.DomainSettings.RStudioServerProDomainSettings.DefaultResourceSpec.InstanceType
				}
				if resp.DomainSettings.RStudioServerProDomainSettings.DefaultResourceSpec.LifecycleConfigArn != nil {
					f8f0f0.LifecycleConfigARN = resp.DomainSettings.RStudioServerProDomainSettings.DefaultResourceSpec.LifecycleConfigArn
				}
				if resp.DomainSettings.RStudioServerProDomainSettings.DefaultResourceSpec.SageMakerImageArn != nil {
					f8f0f0.SageMakerImageARN = resp.DomainSettings.RStudioServerProDomainSettings.DefaultResourceSpec.SageMakerImageArn
				}
				if resp.DomainSettings.RStudioServerProDomainSettings.DefaultResourceSpec.SageMakerImageVersionArn != nil {
					f8f0f0.SageMakerImageVersionARN = resp.DomainSettings.RStudioServerProDomainSettings.DefaultResourceSpec.SageMakerImageVersionArn
				}
				f8f0.DefaultResourceSpec = f8f0f0
			}
			if resp.DomainSettings.RStudioServerProDomainSettings.DomainExecutionRoleArn != nil {
				f8f0.DomainExecutionRoleARN = resp.DomainSettings.RStudioServerProDomainSettings.DomainExecutionRoleArn
			}
			if resp.DomainSettings.RStudioServerProDomainSettings.RStudioConnectUrl != nil {
				f8f0.RStudioConnectURL = resp.DomainSettings.RStudioServerProDomainSettings.RStudioConnectUrl
			}
			if resp.DomainSettings.RStudioServerProDomainSettings.RStudioPackageManagerUrl != nil {
				f8f0.RStudioPackageManagerURL = resp.DomainSettings.RStudioServerProDomainSettings.RStudioPackageManagerUrl
			}
			f8.RStudioServerProDomainSettings = f8f0
		}
		if resp.DomainSettings.SecurityGroupIds != nil {
			f8f1 := []*string{}
			for _, f8f1iter := range resp.DomainSettings.SecurityGroupIds {
				var f8f1elem string
				f8f1elem = *f8f1iter
				f8f1 = append(f8f1, &f8f1elem)
			}
			f8.SecurityGroupIDs = f8f1
		}
		ko.Spec.DomainSettings = f8
	} else {
		ko.Spec.DomainSettings = nil
	}
	if resp.HomeEfsFileSystemKmsKeyId != nil {
		ko.Spec.HomeEFSFileSystemKMSKeyID = resp.HomeEfsFileSystemKmsKeyId
	} else {
		ko.Spec.HomeEFSFileSystemKMSKeyID = nil
	}
	if resp.KmsKeyId != nil {
		ko.Spec.KMSKeyID = resp.KmsKeyId
	} else {
		ko.Spec.KMSKeyID = nil
	}
	if resp.Status != nil {
		ko.Status.Status = resp.Status
	} else {
		ko.Status.Status = nil
	}
	if resp.SubnetIds != nil {
		f17 := []*string{}
		for _, f17iter := range resp.SubnetIds {
			var f17elem string
			f17elem = *f17iter
			f17 = append(f17, &f17elem)
		}
		ko.Spec.SubnetIDs = f17
	} else {
		ko.Spec.SubnetIDs = nil
	}
	if resp.Url != nil {
		ko.Status.URL = resp.Url
	} else {
		ko.Status.URL = nil
	}
	if resp.VpcId != nil {
		ko.Spec.VPCID = resp.VpcId
	} else {
		ko.Spec.VPCID = nil
	}

	rm.setStatusDefaults(ko)
	rm.customDescribeDomainSetOutput(ko)
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Status.DomainID == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.DescribeDomainInput, error) {
	res := &svcsdk.DescribeDomainInput{}

	if r.ko.Status.DomainID != nil {
		res.SetDomainId(*r.ko.Status.DomainID)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateDomainOutput
	_ = resp
	resp, err = rm.sdkapi.CreateDomainWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateDomain", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.DomainArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.DomainArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.Url != nil {
		ko.Status.URL = resp.Url
	} else {
		ko.Status.URL = nil
	}

	rm.setStatusDefaults(ko)
	// Manually set the DomainID as Create only return the ARN
	if resp.DomainArn != nil && ko.Status.DomainID == nil {
		ko.Status.DomainID = &strings.Split(*resp.DomainArn, "/")[1]
	}

	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateDomainInput, error) {
	res := &svcsdk.CreateDomainInput{}

	if r.ko.Spec.AppNetworkAccessType != nil {
		res.SetAppNetworkAccessType(*r.ko.Spec.AppNetworkAccessType)
	}
	if r.ko.Spec.AppSecurityGroupManagement != nil {
		res.SetAppSecurityGroupManagement(*r.ko.Spec.AppSecurityGroupManagement)
	}
	if r.ko.Spec.AuthMode != nil {
		res.SetAuthMode(*r.ko.Spec.AuthMode)
	}
	if r.ko.Spec.DefaultUserSettings != nil {
		f3 := &svcsdk.UserSettings{}
		if r.ko.Spec.DefaultUserSettings.ExecutionRole != nil {
			f3.SetExecutionRole(*r.ko.Spec.DefaultUserSettings.ExecutionRole)
		}
		if r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings != nil {
			f3f1 := &svcsdk.JupyterServerAppSettings{}
			if r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec != nil {
				f3f1f0 := &svcsdk.ResourceSpec{}
				if r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.InstanceType != nil {
					f3f1f0.SetInstanceType(*r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.LifecycleConfigARN != nil {
					f3f1f0.SetLifecycleConfigArn(*r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.LifecycleConfigARN)
				}
				if r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f3f1f0.SetSageMakerImageArn(*r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageARN)
				}
				if r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f3f1f0.SetSageMakerImageVersionArn(*r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionARN)
				}
				f3f1.SetDefaultResourceSpec(f3f1f0)
			}
			if r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.LifecycleConfigARNs != nil {
				f3f1f1 := []*string{}
				for _, f3f1f1iter := range r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.LifecycleConfigARNs {
					var f3f1f1elem string
					f3f1f1elem = *f3f1f1iter
					f3f1f1 = append(f3f1f1, &f3f1f1elem)
				}
				f3f1.SetLifecycleConfigArns(f3f1f1)
			}
			f3.SetJupyterServerAppSettings(f3f1)
		}
		if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings != nil {
			f3f2 := &svcsdk.KernelGatewayAppSettings{}
			if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.CustomImages != nil {
				f3f2f0 := []*svcsdk.CustomImage{}
				for _, f3f2f0iter := range r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.CustomImages {
					f3f2f0elem := &svcsdk.CustomImage{}
					if f3f2f0iter.AppImageConfigName != nil {
						f3f2f0elem.SetAppImageConfigName(*f3f2f0iter.AppImageConfigName)
					}
					if f3f2f0iter.ImageName != nil {
						f3f2f0elem.SetImageName(*f3f2f0iter.ImageName)
					}
					if f3f2f0iter.ImageVersionNumber != nil {
						f3f2f0elem.SetImageVersionNumber(*f3f2f0iter.ImageVersionNumber)
					}
					f3f2f0 = append(f3f2f0, f3f2f0elem)
				}
				f3f2.SetCustomImages(f3f2f0)
			}
			if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec != nil {
				f3f2f1 := &svcsdk.ResourceSpec{}
				if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.InstanceType != nil {
					f3f2f1.SetInstanceType(*r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.LifecycleConfigARN != nil {
					f3f2f1.SetLifecycleConfigArn(*r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.LifecycleConfigARN)
				}
				if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f3f2f1.SetSageMakerImageArn(*r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageARN)
				}
				if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f3f2f1.SetSageMakerImageVersionArn(*r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionARN)
				}
				f3f2.SetDefaultResourceSpec(f3f2f1)
			}
			if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.LifecycleConfigARNs != nil {
				f3f2f2 := []*string{}
				for _, f3f2f2iter := range r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.LifecycleConfigARNs {
					var f3f2f2elem string
					f3f2f2elem = *f3f2f2iter
					f3f2f2 = append(f3f2f2, &f3f2f2elem)
				}
				f3f2.SetLifecycleConfigArns(f3f2f2)
			}
			f3.SetKernelGatewayAppSettings(f3f2)
		}
		if r.ko.Spec.DefaultUserSettings.RStudioServerProAppSettings != nil {
			f3f3 := &svcsdk.RStudioServerProAppSettings{}
			if r.ko.Spec.DefaultUserSettings.RStudioServerProAppSettings.AccessStatus != nil {
				f3f3.SetAccessStatus(*r.ko.Spec.DefaultUserSettings.RStudioServerProAppSettings.AccessStatus)
			}
			if r.ko.Spec.DefaultUserSettings.RStudioServerProAppSettings.UserGroup != nil {
				f3f3.SetUserGroup(*r.ko.Spec.DefaultUserSettings.RStudioServerProAppSettings.UserGroup)
			}
			f3.SetRStudioServerProAppSettings(f3f3)
		}
		if r.ko.Spec.DefaultUserSettings.SecurityGroups != nil {
			f3f4 := []*string{}
			for _, f3f4iter := range r.ko.Spec.DefaultUserSettings.SecurityGroups {
				var f3f4elem string
				f3f4elem = *f3f4iter
				f3f4 = append(f3f4, &f3f4elem)
			}
			f3.SetSecurityGroups(f3f4)
		}
		if r.ko.Spec.DefaultUserSettings.SharingSettings != nil {
			f3f5 := &svcsdk.SharingSettings{}
			if r.ko.Spec.DefaultUserSettings.SharingSettings.NotebookOutputOption != nil {
				f3f5.SetNotebookOutputOption(*r.ko.Spec.DefaultUserSettings.SharingSettings.NotebookOutputOption)
			}
			if r.ko.Spec.DefaultUserSettings.SharingSettings.S3KMSKeyID != nil {
				f3f5.SetS3KmsKeyId(*r.ko.Spec.DefaultUserSettings.SharingSettings.S3KMSKeyID)
			}
			if r.ko.Spec.DefaultUserSettings.SharingSettings.S3OutputPath != nil {
				f3f5.SetS3OutputPath(*r.ko.Spec.DefaultUserSettings.SharingSettings.S3OutputPath)
			}
			f3.SetSharingSettings(f3f5)
		}
		if r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings != nil {
			f3f6 := &svcsdk.TensorBoardAppSettings{}
			if r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec != nil {
				f3f6f0 := &svcsdk.ResourceSpec{}
				if r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.InstanceType != nil {
					f3f6f0.SetInstanceType(*r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.LifecycleConfigARN != nil {
					f3f6f0.SetLifecycleConfigArn(*r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.LifecycleConfigARN)
				}
				if r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f3f6f0.SetSageMakerImageArn(*r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageARN)
				}
				if r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f3f6f0.SetSageMakerImageVersionArn(*r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageVersionARN)
				}
				f3f6.SetDefaultResourceSpec(f3f6f0)
			}
			f3.SetTensorBoardAppSettings(f3f6)
		}
		res.SetDefaultUserSettings(f3)
	}
	if r.ko.Spec.DomainName != nil {
		res.SetDomainName(*r.ko.Spec.DomainName)
	}
	if r.ko.Spec.DomainSettings != nil {
		f5 := &svcsdk.DomainSettings{}
		if r.ko.Spec.DomainSettings.RStudioServerProDomainSettings != nil {
			f5f0 := &svcsdk.RStudioServerProDomainSettings{}
			if r.ko.Spec.DomainSettings.RStudioServerProDomainSettings.DefaultResourceSpec != nil {
				f5f0f0 := &svcsdk.ResourceSpec{}
				if r.ko.Spec.DomainSettings.RStudioServerProDomainSettings.DefaultResourceSpec.InstanceType != nil {
					f5f0f0.SetInstanceType(*r.ko.Spec.DomainSettings.RStudioServerProDomainSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.DomainSettings.RStudioServerProDomainSettings.DefaultResourceSpec.LifecycleConfigARN != nil {
					f5f0f0.SetLifecycleConfigArn(*r.ko.Spec.DomainSettings.RStudioServerProDomainSettings.DefaultResourceSpec.LifecycleConfigARN)
				}
				if r.ko.Spec.DomainSettings.RStudioServerProDomainSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f5f0f0.SetSageMakerImageArn(*r.ko.Spec.DomainSettings.RStudioServerProDomainSettings.DefaultResourceSpec.SageMakerImageARN)
				}
				if r.ko.Spec.DomainSettings.RStudioServerProDomainSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f5f0f0.SetSageMakerImageVersionArn(*r.ko.Spec.DomainSettings.RStudioServerProDomainSettings.DefaultResourceSpec.SageMakerImageVersionARN)
				}
				f5f0.SetDefaultResourceSpec(f5f0f0)
			}
			if r.ko.Spec.DomainSettings.RStudioServerProDomainSettings.DomainExecutionRoleARN != nil {
				f5f0.SetDomainExecutionRoleArn(*r.ko.Spec.DomainSettings.RStudioServerProDomainSettings.DomainExecutionRoleARN)
			}
			if r.ko.Spec.DomainSettings.RStudioServerProDomainSettings.RStudioConnectURL != nil {
				f5f0.SetRStudioConnectUrl(*r.ko.Spec.DomainSettings.RStudioServerProDomainSettings.RStudioConnectURL)
			}
			if r.ko.Spec.DomainSettings.RStudioServerProDomainSettings.RStudioPackageManagerURL != nil {
				f5f0.SetRStudioPackageManagerUrl(*r.ko.Spec.DomainSettings.RStudioServerProDomainSettings.RStudioPackageManagerURL)
			}
			f5.SetRStudioServerProDomainSettings(f5f0)
		}
		if r.ko.Spec.DomainSettings.SecurityGroupIDs != nil {
			f5f1 := []*string{}
			for _, f5f1iter := range r.ko.Spec.DomainSettings.SecurityGroupIDs {
				var f5f1elem string
				f5f1elem = *f5f1iter
				f5f1 = append(f5f1, &f5f1elem)
			}
			f5.SetSecurityGroupIds(f5f1)
		}
		res.SetDomainSettings(f5)
	}
	if r.ko.Spec.HomeEFSFileSystemKMSKeyID != nil {
		res.SetHomeEfsFileSystemKmsKeyId(*r.ko.Spec.HomeEFSFileSystemKMSKeyID)
	}
	if r.ko.Spec.KMSKeyID != nil {
		res.SetKmsKeyId(*r.ko.Spec.KMSKeyID)
	}
	if r.ko.Spec.SubnetIDs != nil {
		f8 := []*string{}
		for _, f8iter := range r.ko.Spec.SubnetIDs {
			var f8elem string
			f8elem = *f8iter
			f8 = append(f8, &f8elem)
		}
		res.SetSubnetIds(f8)
	}
	if r.ko.Spec.Tags != nil {
		f9 := []*svcsdk.Tag{}
		for _, f9iter := range r.ko.Spec.Tags {
			f9elem := &svcsdk.Tag{}
			if f9iter.Key != nil {
				f9elem.SetKey(*f9iter.Key)
			}
			if f9iter.Value != nil {
				f9elem.SetValue(*f9iter.Value)
			}
			f9 = append(f9, f9elem)
		}
		res.SetTags(f9)
	}
	if r.ko.Spec.VPCID != nil {
		res.SetVpcId(*r.ko.Spec.VPCID)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	if err = rm.requeueUntilCanModify(ctx, latest); err != nil {
		return nil, err
	}
	input, err := rm.newUpdateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.UpdateDomainOutput
	_ = resp
	resp, err = rm.sdkapi.UpdateDomainWithContext(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdateDomain", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.DomainArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.DomainArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.UpdateDomainInput, error) {
	res := &svcsdk.UpdateDomainInput{}

	if r.ko.Spec.DefaultUserSettings != nil {
		f0 := &svcsdk.UserSettings{}
		if r.ko.Spec.DefaultUserSettings.ExecutionRole != nil {
			f0.SetExecutionRole(*r.ko.Spec.DefaultUserSettings.ExecutionRole)
		}
		if r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings != nil {
			f0f1 := &svcsdk.JupyterServerAppSettings{}
			if r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec != nil {
				f0f1f0 := &svcsdk.ResourceSpec{}
				if r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.InstanceType != nil {
					f0f1f0.SetInstanceType(*r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.LifecycleConfigARN != nil {
					f0f1f0.SetLifecycleConfigArn(*r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.LifecycleConfigARN)
				}
				if r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f0f1f0.SetSageMakerImageArn(*r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageARN)
				}
				if r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f0f1f0.SetSageMakerImageVersionArn(*r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionARN)
				}
				f0f1.SetDefaultResourceSpec(f0f1f0)
			}
			if r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.LifecycleConfigARNs != nil {
				f0f1f1 := []*string{}
				for _, f0f1f1iter := range r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.LifecycleConfigARNs {
					var f0f1f1elem string
					f0f1f1elem = *f0f1f1iter
					f0f1f1 = append(f0f1f1, &f0f1f1elem)
				}
				f0f1.SetLifecycleConfigArns(f0f1f1)
			}
			f0.SetJupyterServerAppSettings(f0f1)
		}
		if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings != nil {
			f0f2 := &svcsdk.KernelGatewayAppSettings{}
			if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.CustomImages != nil {
				f0f2f0 := []*svcsdk.CustomImage{}
				for _, f0f2f0iter := range r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.CustomImages {
					f0f2f0elem := &svcsdk.CustomImage{}
					if f0f2f0iter.AppImageConfigName != nil {
						f0f2f0elem.SetAppImageConfigName(*f0f2f0iter.AppImageConfigName)
					}
					if f0f2f0iter.ImageName != nil {
						f0f2f0elem.SetImageName(*f0f2f0iter.ImageName)
					}
					if f0f2f0iter.ImageVersionNumber != nil {
						f0f2f0elem.SetImageVersionNumber(*f0f2f0iter.ImageVersionNumber)
					}
					f0f2f0 = append(f0f2f0, f0f2f0elem)
				}
				f0f2.SetCustomImages(f0f2f0)
			}
			if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec != nil {
				f0f2f1 := &svcsdk.ResourceSpec{}
				if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.InstanceType != nil {
					f0f2f1.SetInstanceType(*r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.LifecycleConfigARN != nil {
					f0f2f1.SetLifecycleConfigArn(*r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.LifecycleConfigARN)
				}
				if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f0f2f1.SetSageMakerImageArn(*r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageARN)
				}
				if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f0f2f1.SetSageMakerImageVersionArn(*r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionARN)
				}
				f0f2.SetDefaultResourceSpec(f0f2f1)
			}
			if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.LifecycleConfigARNs != nil {
				f0f2f2 := []*string{}
				for _, f0f2f2iter := range r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.LifecycleConfigARNs {
					var f0f2f2elem string
					f0f2f2elem = *f0f2f2iter
					f0f2f2 = append(f0f2f2, &f0f2f2elem)
				}
				f0f2.SetLifecycleConfigArns(f0f2f2)
			}
			f0.SetKernelGatewayAppSettings(f0f2)
		}
		if r.ko.Spec.DefaultUserSettings.RStudioServerProAppSettings != nil {
			f0f3 := &svcsdk.RStudioServerProAppSettings{}
			if r.ko.Spec.DefaultUserSettings.RStudioServerProAppSettings.AccessStatus != nil {
				f0f3.SetAccessStatus(*r.ko.Spec.DefaultUserSettings.RStudioServerProAppSettings.AccessStatus)
			}
			if r.ko.Spec.DefaultUserSettings.RStudioServerProAppSettings.UserGroup != nil {
				f0f3.SetUserGroup(*r.ko.Spec.DefaultUserSettings.RStudioServerProAppSettings.UserGroup)
			}
			f0.SetRStudioServerProAppSettings(f0f3)
		}
		if r.ko.Spec.DefaultUserSettings.SecurityGroups != nil {
			f0f4 := []*string{}
			for _, f0f4iter := range r.ko.Spec.DefaultUserSettings.SecurityGroups {
				var f0f4elem string
				f0f4elem = *f0f4iter
				f0f4 = append(f0f4, &f0f4elem)
			}
			f0.SetSecurityGroups(f0f4)
		}
		if r.ko.Spec.DefaultUserSettings.SharingSettings != nil {
			f0f5 := &svcsdk.SharingSettings{}
			if r.ko.Spec.DefaultUserSettings.SharingSettings.NotebookOutputOption != nil {
				f0f5.SetNotebookOutputOption(*r.ko.Spec.DefaultUserSettings.SharingSettings.NotebookOutputOption)
			}
			if r.ko.Spec.DefaultUserSettings.SharingSettings.S3KMSKeyID != nil {
				f0f5.SetS3KmsKeyId(*r.ko.Spec.DefaultUserSettings.SharingSettings.S3KMSKeyID)
			}
			if r.ko.Spec.DefaultUserSettings.SharingSettings.S3OutputPath != nil {
				f0f5.SetS3OutputPath(*r.ko.Spec.DefaultUserSettings.SharingSettings.S3OutputPath)
			}
			f0.SetSharingSettings(f0f5)
		}
		if r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings != nil {
			f0f6 := &svcsdk.TensorBoardAppSettings{}
			if r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec != nil {
				f0f6f0 := &svcsdk.ResourceSpec{}
				if r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.InstanceType != nil {
					f0f6f0.SetInstanceType(*r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.LifecycleConfigARN != nil {
					f0f6f0.SetLifecycleConfigArn(*r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.LifecycleConfigARN)
				}
				if r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f0f6f0.SetSageMakerImageArn(*r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageARN)
				}
				if r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f0f6f0.SetSageMakerImageVersionArn(*r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageVersionARN)
				}
				f0f6.SetDefaultResourceSpec(f0f6f0)
			}
			f0.SetTensorBoardAppSettings(f0f6)
		}
		res.SetDefaultUserSettings(f0)
	}
	if r.ko.Status.DomainID != nil {
		res.SetDomainId(*r.ko.Status.DomainID)
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteDomainOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteDomainWithContext(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteDomain", err)

	if err == nil {
		if observed, err := rm.sdkFind(ctx, r); err != ackerr.NotFound {
			if err != nil {
				return nil, err
			}
			r.SetStatus(observed)
			return r, requeueWaitWhileDeleting
		}
	}

	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteDomainInput, error) {
	res := &svcsdk.DeleteDomainInput{}

	if r.ko.Status.DomainID != nil {
		res.SetDomainId(*r.ko.Status.DomainID)
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.Domain,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}
	awsErr, ok := ackerr.AWSError(err)
	if !ok {
		return false
	}
	switch awsErr.Code() {
	case "ResourceNotFound",
		"InvalidParameterCombination",
		"InvalidParameterValue",
		"MissingParameter":
		return true
	default:
		return false
	}
}
