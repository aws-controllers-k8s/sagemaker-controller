// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package domain

import (
	"context"
	"errors"
	"fmt"
	"math"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go-v2/aws"
	svcsdk "github.com/aws/aws-sdk-go-v2/service/sagemaker"
	svcsdktypes "github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
	smithy "github.com/aws/smithy-go"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/sagemaker-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &svcsdk.Client{}
	_ = &svcapitypes.Domain{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
	_ = &aws.Config{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.DescribeDomainOutput
	resp, err = rm.sdkapi.DescribeDomain(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "DescribeDomain", err)
	if err != nil {
		var awsErr smithy.APIError
		if errors.As(err, &awsErr) && awsErr.ErrorCode() == "ResourceNotFound" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.AppNetworkAccessType != "" {
		ko.Spec.AppNetworkAccessType = aws.String(string(resp.AppNetworkAccessType))
	} else {
		ko.Spec.AppNetworkAccessType = nil
	}
	if resp.AppSecurityGroupManagement != "" {
		ko.Spec.AppSecurityGroupManagement = aws.String(string(resp.AppSecurityGroupManagement))
	} else {
		ko.Spec.AppSecurityGroupManagement = nil
	}
	if resp.AuthMode != "" {
		ko.Spec.AuthMode = aws.String(string(resp.AuthMode))
	} else {
		ko.Spec.AuthMode = nil
	}
	if resp.DefaultUserSettings != nil {
		f4 := &svcapitypes.UserSettings{}
		if resp.DefaultUserSettings.CodeEditorAppSettings != nil {
			f4f0 := &svcapitypes.CodeEditorAppSettings{}
			if resp.DefaultUserSettings.CodeEditorAppSettings.DefaultResourceSpec != nil {
				f4f0f0 := &svcapitypes.ResourceSpec{}
				if resp.DefaultUserSettings.CodeEditorAppSettings.DefaultResourceSpec.InstanceType != "" {
					f4f0f0.InstanceType = aws.String(string(resp.DefaultUserSettings.CodeEditorAppSettings.DefaultResourceSpec.InstanceType))
				}
				if resp.DefaultUserSettings.CodeEditorAppSettings.DefaultResourceSpec.LifecycleConfigArn != nil {
					f4f0f0.LifecycleConfigARN = resp.DefaultUserSettings.CodeEditorAppSettings.DefaultResourceSpec.LifecycleConfigArn
				}
				if resp.DefaultUserSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageArn != nil {
					f4f0f0.SageMakerImageARN = resp.DefaultUserSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageArn
				}
				if resp.DefaultUserSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f4f0f0.SageMakerImageVersionAlias = resp.DefaultUserSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if resp.DefaultUserSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageVersionArn != nil {
					f4f0f0.SageMakerImageVersionARN = resp.DefaultUserSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageVersionArn
				}
				f4f0.DefaultResourceSpec = f4f0f0
			}
			if resp.DefaultUserSettings.CodeEditorAppSettings.LifecycleConfigArns != nil {
				f4f0.LifecycleConfigARNs = aws.StringSlice(resp.DefaultUserSettings.CodeEditorAppSettings.LifecycleConfigArns)
			}
			f4.CodeEditorAppSettings = f4f0
		}
		if resp.DefaultUserSettings.CustomFileSystemConfigs != nil {
			f4f1 := []*svcapitypes.CustomFileSystemConfig{}
			for _, f4f1iter := range resp.DefaultUserSettings.CustomFileSystemConfigs {
				f4f1elem := &svcapitypes.CustomFileSystemConfig{}
				switch f4f1iter.(type) {
				case *svcsdktypes.CustomFileSystemConfigMemberEFSFileSystemConfig:
					f4f1elemf0 := f4f1iter.(*svcsdktypes.CustomFileSystemConfigMemberEFSFileSystemConfig)
					if f4f1elemf0 != nil {
						f4f1elemf0f0 := &svcapitypes.EFSFileSystemConfig{}
						if f4f1elemf0.Value.FileSystemId != nil {
							f4f1elemf0f0.FileSystemID = f4f1elemf0.Value.FileSystemId
						}
						if f4f1elemf0.Value.FileSystemPath != nil {
							f4f1elemf0f0.FileSystemPath = f4f1elemf0.Value.FileSystemPath
						}
						f4f1elem.EFSFileSystemConfig = f4f1elemf0f0
					}
				}
				f4f1 = append(f4f1, f4f1elem)
			}
			f4.CustomFileSystemConfigs = f4f1
		}
		if resp.DefaultUserSettings.CustomPosixUserConfig != nil {
			f4f2 := &svcapitypes.CustomPosixUserConfig{}
			if resp.DefaultUserSettings.CustomPosixUserConfig.Gid != nil {
				f4f2.GID = resp.DefaultUserSettings.CustomPosixUserConfig.Gid
			}
			if resp.DefaultUserSettings.CustomPosixUserConfig.Uid != nil {
				f4f2.UID = resp.DefaultUserSettings.CustomPosixUserConfig.Uid
			}
			f4.CustomPosixUserConfig = f4f2
		}
		if resp.DefaultUserSettings.DefaultLandingUri != nil {
			f4.DefaultLandingURI = resp.DefaultUserSettings.DefaultLandingUri
		}
		if resp.DefaultUserSettings.ExecutionRole != nil {
			f4.ExecutionRole = resp.DefaultUserSettings.ExecutionRole
		}
		if resp.DefaultUserSettings.JupyterLabAppSettings != nil {
			f4f5 := &svcapitypes.JupyterLabAppSettings{}
			if resp.DefaultUserSettings.JupyterLabAppSettings.CustomImages != nil {
				f4f5f0 := []*svcapitypes.CustomImage{}
				for _, f4f5f0iter := range resp.DefaultUserSettings.JupyterLabAppSettings.CustomImages {
					f4f5f0elem := &svcapitypes.CustomImage{}
					if f4f5f0iter.AppImageConfigName != nil {
						f4f5f0elem.AppImageConfigName = f4f5f0iter.AppImageConfigName
					}
					if f4f5f0iter.ImageName != nil {
						f4f5f0elem.ImageName = f4f5f0iter.ImageName
					}
					if f4f5f0iter.ImageVersionNumber != nil {
						imageVersionNumberCopy := int64(*f4f5f0iter.ImageVersionNumber)
						f4f5f0elem.ImageVersionNumber = &imageVersionNumberCopy
					}
					f4f5f0 = append(f4f5f0, f4f5f0elem)
				}
				f4f5.CustomImages = f4f5f0
			}
			if resp.DefaultUserSettings.JupyterLabAppSettings.DefaultResourceSpec != nil {
				f4f5f1 := &svcapitypes.ResourceSpec{}
				if resp.DefaultUserSettings.JupyterLabAppSettings.DefaultResourceSpec.InstanceType != "" {
					f4f5f1.InstanceType = aws.String(string(resp.DefaultUserSettings.JupyterLabAppSettings.DefaultResourceSpec.InstanceType))
				}
				if resp.DefaultUserSettings.JupyterLabAppSettings.DefaultResourceSpec.LifecycleConfigArn != nil {
					f4f5f1.LifecycleConfigARN = resp.DefaultUserSettings.JupyterLabAppSettings.DefaultResourceSpec.LifecycleConfigArn
				}
				if resp.DefaultUserSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageArn != nil {
					f4f5f1.SageMakerImageARN = resp.DefaultUserSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageArn
				}
				if resp.DefaultUserSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f4f5f1.SageMakerImageVersionAlias = resp.DefaultUserSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if resp.DefaultUserSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageVersionArn != nil {
					f4f5f1.SageMakerImageVersionARN = resp.DefaultUserSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageVersionArn
				}
				f4f5.DefaultResourceSpec = f4f5f1
			}
			if resp.DefaultUserSettings.JupyterLabAppSettings.LifecycleConfigArns != nil {
				f4f5.LifecycleConfigARNs = aws.StringSlice(resp.DefaultUserSettings.JupyterLabAppSettings.LifecycleConfigArns)
			}
			f4.JupyterLabAppSettings = f4f5
		}
		if resp.DefaultUserSettings.JupyterServerAppSettings != nil {
			f4f6 := &svcapitypes.JupyterServerAppSettings{}
			if resp.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec != nil {
				f4f6f0 := &svcapitypes.ResourceSpec{}
				if resp.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.InstanceType != "" {
					f4f6f0.InstanceType = aws.String(string(resp.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.InstanceType))
				}
				if resp.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.LifecycleConfigArn != nil {
					f4f6f0.LifecycleConfigARN = resp.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.LifecycleConfigArn
				}
				if resp.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageArn != nil {
					f4f6f0.SageMakerImageARN = resp.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageArn
				}
				if resp.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f4f6f0.SageMakerImageVersionAlias = resp.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if resp.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionArn != nil {
					f4f6f0.SageMakerImageVersionARN = resp.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionArn
				}
				f4f6.DefaultResourceSpec = f4f6f0
			}
			if resp.DefaultUserSettings.JupyterServerAppSettings.LifecycleConfigArns != nil {
				f4f6.LifecycleConfigARNs = aws.StringSlice(resp.DefaultUserSettings.JupyterServerAppSettings.LifecycleConfigArns)
			}
			f4.JupyterServerAppSettings = f4f6
		}
		if resp.DefaultUserSettings.KernelGatewayAppSettings != nil {
			f4f7 := &svcapitypes.KernelGatewayAppSettings{}
			if resp.DefaultUserSettings.KernelGatewayAppSettings.CustomImages != nil {
				f4f7f0 := []*svcapitypes.CustomImage{}
				for _, f4f7f0iter := range resp.DefaultUserSettings.KernelGatewayAppSettings.CustomImages {
					f4f7f0elem := &svcapitypes.CustomImage{}
					if f4f7f0iter.AppImageConfigName != nil {
						f4f7f0elem.AppImageConfigName = f4f7f0iter.AppImageConfigName
					}
					if f4f7f0iter.ImageName != nil {
						f4f7f0elem.ImageName = f4f7f0iter.ImageName
					}
					if f4f7f0iter.ImageVersionNumber != nil {
						imageVersionNumberCopy := int64(*f4f7f0iter.ImageVersionNumber)
						f4f7f0elem.ImageVersionNumber = &imageVersionNumberCopy
					}
					f4f7f0 = append(f4f7f0, f4f7f0elem)
				}
				f4f7.CustomImages = f4f7f0
			}
			if resp.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec != nil {
				f4f7f1 := &svcapitypes.ResourceSpec{}
				if resp.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.InstanceType != "" {
					f4f7f1.InstanceType = aws.String(string(resp.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.InstanceType))
				}
				if resp.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.LifecycleConfigArn != nil {
					f4f7f1.LifecycleConfigARN = resp.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.LifecycleConfigArn
				}
				if resp.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageArn != nil {
					f4f7f1.SageMakerImageARN = resp.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageArn
				}
				if resp.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f4f7f1.SageMakerImageVersionAlias = resp.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if resp.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionArn != nil {
					f4f7f1.SageMakerImageVersionARN = resp.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionArn
				}
				f4f7.DefaultResourceSpec = f4f7f1
			}
			if resp.DefaultUserSettings.KernelGatewayAppSettings.LifecycleConfigArns != nil {
				f4f7.LifecycleConfigARNs = aws.StringSlice(resp.DefaultUserSettings.KernelGatewayAppSettings.LifecycleConfigArns)
			}
			f4.KernelGatewayAppSettings = f4f7
		}
		if resp.DefaultUserSettings.RStudioServerProAppSettings != nil {
			f4f8 := &svcapitypes.RStudioServerProAppSettings{}
			if resp.DefaultUserSettings.RStudioServerProAppSettings.AccessStatus != "" {
				f4f8.AccessStatus = aws.String(string(resp.DefaultUserSettings.RStudioServerProAppSettings.AccessStatus))
			}
			if resp.DefaultUserSettings.RStudioServerProAppSettings.UserGroup != "" {
				f4f8.UserGroup = aws.String(string(resp.DefaultUserSettings.RStudioServerProAppSettings.UserGroup))
			}
			f4.RStudioServerProAppSettings = f4f8
		}
		if resp.DefaultUserSettings.SecurityGroups != nil {
			f4.SecurityGroups = aws.StringSlice(resp.DefaultUserSettings.SecurityGroups)
		}
		if resp.DefaultUserSettings.SharingSettings != nil {
			f4f10 := &svcapitypes.SharingSettings{}
			if resp.DefaultUserSettings.SharingSettings.NotebookOutputOption != "" {
				f4f10.NotebookOutputOption = aws.String(string(resp.DefaultUserSettings.SharingSettings.NotebookOutputOption))
			}
			if resp.DefaultUserSettings.SharingSettings.S3KmsKeyId != nil {
				f4f10.S3KMSKeyID = resp.DefaultUserSettings.SharingSettings.S3KmsKeyId
			}
			if resp.DefaultUserSettings.SharingSettings.S3OutputPath != nil {
				f4f10.S3OutputPath = resp.DefaultUserSettings.SharingSettings.S3OutputPath
			}
			f4.SharingSettings = f4f10
		}
		if resp.DefaultUserSettings.SpaceStorageSettings != nil {
			f4f11 := &svcapitypes.DefaultSpaceStorageSettings{}
			if resp.DefaultUserSettings.SpaceStorageSettings.DefaultEbsStorageSettings != nil {
				f4f11f0 := &svcapitypes.DefaultEBSStorageSettings{}
				if resp.DefaultUserSettings.SpaceStorageSettings.DefaultEbsStorageSettings.DefaultEbsVolumeSizeInGb != nil {
					defaultEBSVolumeSizeInGbCopy := int64(*resp.DefaultUserSettings.SpaceStorageSettings.DefaultEbsStorageSettings.DefaultEbsVolumeSizeInGb)
					f4f11f0.DefaultEBSVolumeSizeInGb = &defaultEBSVolumeSizeInGbCopy
				}
				if resp.DefaultUserSettings.SpaceStorageSettings.DefaultEbsStorageSettings.MaximumEbsVolumeSizeInGb != nil {
					maximumEBSVolumeSizeInGbCopy := int64(*resp.DefaultUserSettings.SpaceStorageSettings.DefaultEbsStorageSettings.MaximumEbsVolumeSizeInGb)
					f4f11f0.MaximumEBSVolumeSizeInGb = &maximumEBSVolumeSizeInGbCopy
				}
				f4f11.DefaultEBSStorageSettings = f4f11f0
			}
			f4.SpaceStorageSettings = f4f11
		}
		if resp.DefaultUserSettings.StudioWebPortal != "" {
			f4.StudioWebPortal = aws.String(string(resp.DefaultUserSettings.StudioWebPortal))
		}
		if resp.DefaultUserSettings.TensorBoardAppSettings != nil {
			f4f13 := &svcapitypes.TensorBoardAppSettings{}
			if resp.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec != nil {
				f4f13f0 := &svcapitypes.ResourceSpec{}
				if resp.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.InstanceType != "" {
					f4f13f0.InstanceType = aws.String(string(resp.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.InstanceType))
				}
				if resp.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.LifecycleConfigArn != nil {
					f4f13f0.LifecycleConfigARN = resp.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.LifecycleConfigArn
				}
				if resp.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageArn != nil {
					f4f13f0.SageMakerImageARN = resp.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageArn
				}
				if resp.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f4f13f0.SageMakerImageVersionAlias = resp.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if resp.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageVersionArn != nil {
					f4f13f0.SageMakerImageVersionARN = resp.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageVersionArn
				}
				f4f13.DefaultResourceSpec = f4f13f0
			}
			f4.TensorBoardAppSettings = f4f13
		}
		ko.Spec.DefaultUserSettings = f4
	} else {
		ko.Spec.DefaultUserSettings = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.DomainArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.DomainArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.DomainId != nil {
		ko.Status.DomainID = resp.DomainId
	} else {
		ko.Status.DomainID = nil
	}
	if resp.DomainName != nil {
		ko.Spec.DomainName = resp.DomainName
	} else {
		ko.Spec.DomainName = nil
	}
	if resp.DomainSettings != nil {
		f8 := &svcapitypes.DomainSettings{}
		if resp.DomainSettings.DockerSettings != nil {
			f8f0 := &svcapitypes.DockerSettings{}
			if resp.DomainSettings.DockerSettings.EnableDockerAccess != "" {
				f8f0.EnableDockerAccess = aws.String(string(resp.DomainSettings.DockerSettings.EnableDockerAccess))
			}
			if resp.DomainSettings.DockerSettings.VpcOnlyTrustedAccounts != nil {
				f8f0.VPCOnlyTrustedAccounts = aws.StringSlice(resp.DomainSettings.DockerSettings.VpcOnlyTrustedAccounts)
			}
			f8.DockerSettings = f8f0
		}
		if resp.DomainSettings.RStudioServerProDomainSettings != nil {
			f8f1 := &svcapitypes.RStudioServerProDomainSettings{}
			if resp.DomainSettings.RStudioServerProDomainSettings.DefaultResourceSpec != nil {
				f8f1f0 := &svcapitypes.ResourceSpec{}
				if resp.DomainSettings.RStudioServerProDomainSettings.DefaultResourceSpec.InstanceType != "" {
					f8f1f0.InstanceType = aws.String(string(resp.DomainSettings.RStudioServerProDomainSettings.DefaultResourceSpec.InstanceType))
				}
				if resp.DomainSettings.RStudioServerProDomainSettings.DefaultResourceSpec.LifecycleConfigArn != nil {
					f8f1f0.LifecycleConfigARN = resp.DomainSettings.RStudioServerProDomainSettings.DefaultResourceSpec.LifecycleConfigArn
				}
				if resp.DomainSettings.RStudioServerProDomainSettings.DefaultResourceSpec.SageMakerImageArn != nil {
					f8f1f0.SageMakerImageARN = resp.DomainSettings.RStudioServerProDomainSettings.DefaultResourceSpec.SageMakerImageArn
				}
				if resp.DomainSettings.RStudioServerProDomainSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f8f1f0.SageMakerImageVersionAlias = resp.DomainSettings.RStudioServerProDomainSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if resp.DomainSettings.RStudioServerProDomainSettings.DefaultResourceSpec.SageMakerImageVersionArn != nil {
					f8f1f0.SageMakerImageVersionARN = resp.DomainSettings.RStudioServerProDomainSettings.DefaultResourceSpec.SageMakerImageVersionArn
				}
				f8f1.DefaultResourceSpec = f8f1f0
			}
			if resp.DomainSettings.RStudioServerProDomainSettings.DomainExecutionRoleArn != nil {
				f8f1.DomainExecutionRoleARN = resp.DomainSettings.RStudioServerProDomainSettings.DomainExecutionRoleArn
			}
			if resp.DomainSettings.RStudioServerProDomainSettings.RStudioConnectUrl != nil {
				f8f1.RStudioConnectURL = resp.DomainSettings.RStudioServerProDomainSettings.RStudioConnectUrl
			}
			if resp.DomainSettings.RStudioServerProDomainSettings.RStudioPackageManagerUrl != nil {
				f8f1.RStudioPackageManagerURL = resp.DomainSettings.RStudioServerProDomainSettings.RStudioPackageManagerUrl
			}
			f8.RStudioServerProDomainSettings = f8f1
		}
		if resp.DomainSettings.SecurityGroupIds != nil {
			f8.SecurityGroupIDs = aws.StringSlice(resp.DomainSettings.SecurityGroupIds)
		}
		ko.Spec.DomainSettings = f8
	} else {
		ko.Spec.DomainSettings = nil
	}
	if resp.HomeEfsFileSystemKmsKeyId != nil {
		ko.Spec.HomeEFSFileSystemKMSKeyID = resp.HomeEfsFileSystemKmsKeyId
	} else {
		ko.Spec.HomeEFSFileSystemKMSKeyID = nil
	}
	if resp.KmsKeyId != nil {
		ko.Spec.KMSKeyID = resp.KmsKeyId
	} else {
		ko.Spec.KMSKeyID = nil
	}
	if resp.Status != "" {
		ko.Status.Status = aws.String(string(resp.Status))
	} else {
		ko.Status.Status = nil
	}
	if resp.SubnetIds != nil {
		ko.Spec.SubnetIDs = aws.StringSlice(resp.SubnetIds)
	} else {
		ko.Spec.SubnetIDs = nil
	}
	if resp.Url != nil {
		ko.Status.URL = resp.Url
	} else {
		ko.Status.URL = nil
	}
	if resp.VpcId != nil {
		ko.Spec.VPCID = resp.VpcId
	} else {
		ko.Spec.VPCID = nil
	}

	rm.setStatusDefaults(ko)
	rm.customDescribeDomainSetOutput(ko)
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Status.DomainID == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.DescribeDomainInput, error) {
	res := &svcsdk.DescribeDomainInput{}

	if r.ko.Status.DomainID != nil {
		res.DomainId = r.ko.Status.DomainID
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateDomainOutput
	_ = resp
	resp, err = rm.sdkapi.CreateDomain(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateDomain", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.DomainArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.DomainArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.Url != nil {
		ko.Status.URL = resp.Url
	} else {
		ko.Status.URL = nil
	}

	rm.setStatusDefaults(ko)
	// Manually set the DomainID as Create only return the ARN
	if resp.DomainArn != nil && ko.Status.DomainID == nil {
		ko.Status.DomainID = &strings.Split(*resp.DomainArn, "/")[1]
	}

	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateDomainInput, error) {
	res := &svcsdk.CreateDomainInput{}

	if r.ko.Spec.AppNetworkAccessType != nil {
		res.AppNetworkAccessType = svcsdktypes.AppNetworkAccessType(*r.ko.Spec.AppNetworkAccessType)
	}
	if r.ko.Spec.AppSecurityGroupManagement != nil {
		res.AppSecurityGroupManagement = svcsdktypes.AppSecurityGroupManagement(*r.ko.Spec.AppSecurityGroupManagement)
	}
	if r.ko.Spec.AuthMode != nil {
		res.AuthMode = svcsdktypes.AuthMode(*r.ko.Spec.AuthMode)
	}
	if r.ko.Spec.DefaultUserSettings != nil {
		f3 := &svcsdktypes.UserSettings{}
		if r.ko.Spec.DefaultUserSettings.CodeEditorAppSettings != nil {
			f3f0 := &svcsdktypes.CodeEditorAppSettings{}
			if r.ko.Spec.DefaultUserSettings.CodeEditorAppSettings.DefaultResourceSpec != nil {
				f3f0f0 := &svcsdktypes.ResourceSpec{}
				if r.ko.Spec.DefaultUserSettings.CodeEditorAppSettings.DefaultResourceSpec.InstanceType != nil {
					f3f0f0.InstanceType = svcsdktypes.AppInstanceType(*r.ko.Spec.DefaultUserSettings.CodeEditorAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.DefaultUserSettings.CodeEditorAppSettings.DefaultResourceSpec.LifecycleConfigARN != nil {
					f3f0f0.LifecycleConfigArn = r.ko.Spec.DefaultUserSettings.CodeEditorAppSettings.DefaultResourceSpec.LifecycleConfigARN
				}
				if r.ko.Spec.DefaultUserSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f3f0f0.SageMakerImageArn = r.ko.Spec.DefaultUserSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageARN
				}
				if r.ko.Spec.DefaultUserSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f3f0f0.SageMakerImageVersionAlias = r.ko.Spec.DefaultUserSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if r.ko.Spec.DefaultUserSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f3f0f0.SageMakerImageVersionArn = r.ko.Spec.DefaultUserSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageVersionARN
				}
				f3f0.DefaultResourceSpec = f3f0f0
			}
			if r.ko.Spec.DefaultUserSettings.CodeEditorAppSettings.LifecycleConfigARNs != nil {
				f3f0.LifecycleConfigArns = aws.ToStringSlice(r.ko.Spec.DefaultUserSettings.CodeEditorAppSettings.LifecycleConfigARNs)
			}
			f3.CodeEditorAppSettings = f3f0
		}
		if r.ko.Spec.DefaultUserSettings.CustomFileSystemConfigs != nil {
			f3f1 := []svcsdktypes.CustomFileSystemConfig{}
			for _, f3f1iter := range r.ko.Spec.DefaultUserSettings.CustomFileSystemConfigs {
				var f3f1elem svcsdktypes.CustomFileSystemConfig
				isInterfaceSet := false
				if f3f1iter.EFSFileSystemConfig != nil {
					if isInterfaceSet {
						return nil, ackerr.NewTerminalError(fmt.Errorf("can only set one of the members for EFSFileSystemConfig"))
					}
					f3f1elemf0Parent := &svcsdktypes.CustomFileSystemConfigMemberEFSFileSystemConfig{}
					f3f1elemf0 := &svcsdktypes.EFSFileSystemConfig{}
					if f3f1iter.EFSFileSystemConfig.FileSystemID != nil {
						f3f1elemf0.FileSystemId = f3f1iter.EFSFileSystemConfig.FileSystemID
					}
					if f3f1iter.EFSFileSystemConfig.FileSystemPath != nil {
						f3f1elemf0.FileSystemPath = f3f1iter.EFSFileSystemConfig.FileSystemPath
					}
					f3f1elemf0Parent.Value = *f3f1elemf0
				}
				f3f1 = append(f3f1, f3f1elem)
			}
			f3.CustomFileSystemConfigs = f3f1
		}
		if r.ko.Spec.DefaultUserSettings.CustomPosixUserConfig != nil {
			f3f2 := &svcsdktypes.CustomPosixUserConfig{}
			if r.ko.Spec.DefaultUserSettings.CustomPosixUserConfig.GID != nil {
				f3f2.Gid = r.ko.Spec.DefaultUserSettings.CustomPosixUserConfig.GID
			}
			if r.ko.Spec.DefaultUserSettings.CustomPosixUserConfig.UID != nil {
				f3f2.Uid = r.ko.Spec.DefaultUserSettings.CustomPosixUserConfig.UID
			}
			f3.CustomPosixUserConfig = f3f2
		}
		if r.ko.Spec.DefaultUserSettings.DefaultLandingURI != nil {
			f3.DefaultLandingUri = r.ko.Spec.DefaultUserSettings.DefaultLandingURI
		}
		if r.ko.Spec.DefaultUserSettings.ExecutionRole != nil {
			f3.ExecutionRole = r.ko.Spec.DefaultUserSettings.ExecutionRole
		}
		if r.ko.Spec.DefaultUserSettings.JupyterLabAppSettings != nil {
			f3f5 := &svcsdktypes.JupyterLabAppSettings{}
			if r.ko.Spec.DefaultUserSettings.JupyterLabAppSettings.CustomImages != nil {
				f3f5f0 := []svcsdktypes.CustomImage{}
				for _, f3f5f0iter := range r.ko.Spec.DefaultUserSettings.JupyterLabAppSettings.CustomImages {
					f3f5f0elem := &svcsdktypes.CustomImage{}
					if f3f5f0iter.AppImageConfigName != nil {
						f3f5f0elem.AppImageConfigName = f3f5f0iter.AppImageConfigName
					}
					if f3f5f0iter.ImageName != nil {
						f3f5f0elem.ImageName = f3f5f0iter.ImageName
					}
					if f3f5f0iter.ImageVersionNumber != nil {
						imageVersionNumberCopy0 := *f3f5f0iter.ImageVersionNumber
						if imageVersionNumberCopy0 > math.MaxInt32 || imageVersionNumberCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field ImageVersionNumber is of type int32")
						}
						imageVersionNumberCopy := int32(imageVersionNumberCopy0)
						f3f5f0elem.ImageVersionNumber = &imageVersionNumberCopy
					}
					f3f5f0 = append(f3f5f0, *f3f5f0elem)
				}
				f3f5.CustomImages = f3f5f0
			}
			if r.ko.Spec.DefaultUserSettings.JupyterLabAppSettings.DefaultResourceSpec != nil {
				f3f5f1 := &svcsdktypes.ResourceSpec{}
				if r.ko.Spec.DefaultUserSettings.JupyterLabAppSettings.DefaultResourceSpec.InstanceType != nil {
					f3f5f1.InstanceType = svcsdktypes.AppInstanceType(*r.ko.Spec.DefaultUserSettings.JupyterLabAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.DefaultUserSettings.JupyterLabAppSettings.DefaultResourceSpec.LifecycleConfigARN != nil {
					f3f5f1.LifecycleConfigArn = r.ko.Spec.DefaultUserSettings.JupyterLabAppSettings.DefaultResourceSpec.LifecycleConfigARN
				}
				if r.ko.Spec.DefaultUserSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f3f5f1.SageMakerImageArn = r.ko.Spec.DefaultUserSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageARN
				}
				if r.ko.Spec.DefaultUserSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f3f5f1.SageMakerImageVersionAlias = r.ko.Spec.DefaultUserSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if r.ko.Spec.DefaultUserSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f3f5f1.SageMakerImageVersionArn = r.ko.Spec.DefaultUserSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageVersionARN
				}
				f3f5.DefaultResourceSpec = f3f5f1
			}
			if r.ko.Spec.DefaultUserSettings.JupyterLabAppSettings.LifecycleConfigARNs != nil {
				f3f5.LifecycleConfigArns = aws.ToStringSlice(r.ko.Spec.DefaultUserSettings.JupyterLabAppSettings.LifecycleConfigARNs)
			}
			f3.JupyterLabAppSettings = f3f5
		}
		if r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings != nil {
			f3f6 := &svcsdktypes.JupyterServerAppSettings{}
			if r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec != nil {
				f3f6f0 := &svcsdktypes.ResourceSpec{}
				if r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.InstanceType != nil {
					f3f6f0.InstanceType = svcsdktypes.AppInstanceType(*r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.LifecycleConfigARN != nil {
					f3f6f0.LifecycleConfigArn = r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.LifecycleConfigARN
				}
				if r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f3f6f0.SageMakerImageArn = r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageARN
				}
				if r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f3f6f0.SageMakerImageVersionAlias = r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f3f6f0.SageMakerImageVersionArn = r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionARN
				}
				f3f6.DefaultResourceSpec = f3f6f0
			}
			if r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.LifecycleConfigARNs != nil {
				f3f6.LifecycleConfigArns = aws.ToStringSlice(r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.LifecycleConfigARNs)
			}
			f3.JupyterServerAppSettings = f3f6
		}
		if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings != nil {
			f3f7 := &svcsdktypes.KernelGatewayAppSettings{}
			if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.CustomImages != nil {
				f3f7f0 := []svcsdktypes.CustomImage{}
				for _, f3f7f0iter := range r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.CustomImages {
					f3f7f0elem := &svcsdktypes.CustomImage{}
					if f3f7f0iter.AppImageConfigName != nil {
						f3f7f0elem.AppImageConfigName = f3f7f0iter.AppImageConfigName
					}
					if f3f7f0iter.ImageName != nil {
						f3f7f0elem.ImageName = f3f7f0iter.ImageName
					}
					if f3f7f0iter.ImageVersionNumber != nil {
						imageVersionNumberCopy0 := *f3f7f0iter.ImageVersionNumber
						if imageVersionNumberCopy0 > math.MaxInt32 || imageVersionNumberCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field ImageVersionNumber is of type int32")
						}
						imageVersionNumberCopy := int32(imageVersionNumberCopy0)
						f3f7f0elem.ImageVersionNumber = &imageVersionNumberCopy
					}
					f3f7f0 = append(f3f7f0, *f3f7f0elem)
				}
				f3f7.CustomImages = f3f7f0
			}
			if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec != nil {
				f3f7f1 := &svcsdktypes.ResourceSpec{}
				if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.InstanceType != nil {
					f3f7f1.InstanceType = svcsdktypes.AppInstanceType(*r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.LifecycleConfigARN != nil {
					f3f7f1.LifecycleConfigArn = r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.LifecycleConfigARN
				}
				if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f3f7f1.SageMakerImageArn = r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageARN
				}
				if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f3f7f1.SageMakerImageVersionAlias = r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f3f7f1.SageMakerImageVersionArn = r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionARN
				}
				f3f7.DefaultResourceSpec = f3f7f1
			}
			if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.LifecycleConfigARNs != nil {
				f3f7.LifecycleConfigArns = aws.ToStringSlice(r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.LifecycleConfigARNs)
			}
			f3.KernelGatewayAppSettings = f3f7
		}
		if r.ko.Spec.DefaultUserSettings.RStudioServerProAppSettings != nil {
			f3f8 := &svcsdktypes.RStudioServerProAppSettings{}
			if r.ko.Spec.DefaultUserSettings.RStudioServerProAppSettings.AccessStatus != nil {
				f3f8.AccessStatus = svcsdktypes.RStudioServerProAccessStatus(*r.ko.Spec.DefaultUserSettings.RStudioServerProAppSettings.AccessStatus)
			}
			if r.ko.Spec.DefaultUserSettings.RStudioServerProAppSettings.UserGroup != nil {
				f3f8.UserGroup = svcsdktypes.RStudioServerProUserGroup(*r.ko.Spec.DefaultUserSettings.RStudioServerProAppSettings.UserGroup)
			}
			f3.RStudioServerProAppSettings = f3f8
		}
		if r.ko.Spec.DefaultUserSettings.SecurityGroups != nil {
			f3.SecurityGroups = aws.ToStringSlice(r.ko.Spec.DefaultUserSettings.SecurityGroups)
		}
		if r.ko.Spec.DefaultUserSettings.SharingSettings != nil {
			f3f10 := &svcsdktypes.SharingSettings{}
			if r.ko.Spec.DefaultUserSettings.SharingSettings.NotebookOutputOption != nil {
				f3f10.NotebookOutputOption = svcsdktypes.NotebookOutputOption(*r.ko.Spec.DefaultUserSettings.SharingSettings.NotebookOutputOption)
			}
			if r.ko.Spec.DefaultUserSettings.SharingSettings.S3KMSKeyID != nil {
				f3f10.S3KmsKeyId = r.ko.Spec.DefaultUserSettings.SharingSettings.S3KMSKeyID
			}
			if r.ko.Spec.DefaultUserSettings.SharingSettings.S3OutputPath != nil {
				f3f10.S3OutputPath = r.ko.Spec.DefaultUserSettings.SharingSettings.S3OutputPath
			}
			f3.SharingSettings = f3f10
		}
		if r.ko.Spec.DefaultUserSettings.SpaceStorageSettings != nil {
			f3f11 := &svcsdktypes.DefaultSpaceStorageSettings{}
			if r.ko.Spec.DefaultUserSettings.SpaceStorageSettings.DefaultEBSStorageSettings != nil {
				f3f11f0 := &svcsdktypes.DefaultEbsStorageSettings{}
				if r.ko.Spec.DefaultUserSettings.SpaceStorageSettings.DefaultEBSStorageSettings.DefaultEBSVolumeSizeInGb != nil {
					defaultEBSVolumeSizeInGbCopy0 := *r.ko.Spec.DefaultUserSettings.SpaceStorageSettings.DefaultEBSStorageSettings.DefaultEBSVolumeSizeInGb
					if defaultEBSVolumeSizeInGbCopy0 > math.MaxInt32 || defaultEBSVolumeSizeInGbCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field DefaultEbsVolumeSizeInGb is of type int32")
					}
					defaultEBSVolumeSizeInGbCopy := int32(defaultEBSVolumeSizeInGbCopy0)
					f3f11f0.DefaultEbsVolumeSizeInGb = &defaultEBSVolumeSizeInGbCopy
				}
				if r.ko.Spec.DefaultUserSettings.SpaceStorageSettings.DefaultEBSStorageSettings.MaximumEBSVolumeSizeInGb != nil {
					maximumEBSVolumeSizeInGbCopy0 := *r.ko.Spec.DefaultUserSettings.SpaceStorageSettings.DefaultEBSStorageSettings.MaximumEBSVolumeSizeInGb
					if maximumEBSVolumeSizeInGbCopy0 > math.MaxInt32 || maximumEBSVolumeSizeInGbCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field MaximumEbsVolumeSizeInGb is of type int32")
					}
					maximumEBSVolumeSizeInGbCopy := int32(maximumEBSVolumeSizeInGbCopy0)
					f3f11f0.MaximumEbsVolumeSizeInGb = &maximumEBSVolumeSizeInGbCopy
				}
				f3f11.DefaultEbsStorageSettings = f3f11f0
			}
			f3.SpaceStorageSettings = f3f11
		}
		if r.ko.Spec.DefaultUserSettings.StudioWebPortal != nil {
			f3.StudioWebPortal = svcsdktypes.StudioWebPortal(*r.ko.Spec.DefaultUserSettings.StudioWebPortal)
		}
		if r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings != nil {
			f3f13 := &svcsdktypes.TensorBoardAppSettings{}
			if r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec != nil {
				f3f13f0 := &svcsdktypes.ResourceSpec{}
				if r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.InstanceType != nil {
					f3f13f0.InstanceType = svcsdktypes.AppInstanceType(*r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.LifecycleConfigARN != nil {
					f3f13f0.LifecycleConfigArn = r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.LifecycleConfigARN
				}
				if r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f3f13f0.SageMakerImageArn = r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageARN
				}
				if r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f3f13f0.SageMakerImageVersionAlias = r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f3f13f0.SageMakerImageVersionArn = r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageVersionARN
				}
				f3f13.DefaultResourceSpec = f3f13f0
			}
			f3.TensorBoardAppSettings = f3f13
		}
		res.DefaultUserSettings = f3
	}
	if r.ko.Spec.DomainName != nil {
		res.DomainName = r.ko.Spec.DomainName
	}
	if r.ko.Spec.DomainSettings != nil {
		f5 := &svcsdktypes.DomainSettings{}
		if r.ko.Spec.DomainSettings.DockerSettings != nil {
			f5f0 := &svcsdktypes.DockerSettings{}
			if r.ko.Spec.DomainSettings.DockerSettings.EnableDockerAccess != nil {
				f5f0.EnableDockerAccess = svcsdktypes.FeatureStatus(*r.ko.Spec.DomainSettings.DockerSettings.EnableDockerAccess)
			}
			if r.ko.Spec.DomainSettings.DockerSettings.VPCOnlyTrustedAccounts != nil {
				f5f0.VpcOnlyTrustedAccounts = aws.ToStringSlice(r.ko.Spec.DomainSettings.DockerSettings.VPCOnlyTrustedAccounts)
			}
			f5.DockerSettings = f5f0
		}
		if r.ko.Spec.DomainSettings.RStudioServerProDomainSettings != nil {
			f5f1 := &svcsdktypes.RStudioServerProDomainSettings{}
			if r.ko.Spec.DomainSettings.RStudioServerProDomainSettings.DefaultResourceSpec != nil {
				f5f1f0 := &svcsdktypes.ResourceSpec{}
				if r.ko.Spec.DomainSettings.RStudioServerProDomainSettings.DefaultResourceSpec.InstanceType != nil {
					f5f1f0.InstanceType = svcsdktypes.AppInstanceType(*r.ko.Spec.DomainSettings.RStudioServerProDomainSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.DomainSettings.RStudioServerProDomainSettings.DefaultResourceSpec.LifecycleConfigARN != nil {
					f5f1f0.LifecycleConfigArn = r.ko.Spec.DomainSettings.RStudioServerProDomainSettings.DefaultResourceSpec.LifecycleConfigARN
				}
				if r.ko.Spec.DomainSettings.RStudioServerProDomainSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f5f1f0.SageMakerImageArn = r.ko.Spec.DomainSettings.RStudioServerProDomainSettings.DefaultResourceSpec.SageMakerImageARN
				}
				if r.ko.Spec.DomainSettings.RStudioServerProDomainSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f5f1f0.SageMakerImageVersionAlias = r.ko.Spec.DomainSettings.RStudioServerProDomainSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if r.ko.Spec.DomainSettings.RStudioServerProDomainSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f5f1f0.SageMakerImageVersionArn = r.ko.Spec.DomainSettings.RStudioServerProDomainSettings.DefaultResourceSpec.SageMakerImageVersionARN
				}
				f5f1.DefaultResourceSpec = f5f1f0
			}
			if r.ko.Spec.DomainSettings.RStudioServerProDomainSettings.DomainExecutionRoleARN != nil {
				f5f1.DomainExecutionRoleArn = r.ko.Spec.DomainSettings.RStudioServerProDomainSettings.DomainExecutionRoleARN
			}
			if r.ko.Spec.DomainSettings.RStudioServerProDomainSettings.RStudioConnectURL != nil {
				f5f1.RStudioConnectUrl = r.ko.Spec.DomainSettings.RStudioServerProDomainSettings.RStudioConnectURL
			}
			if r.ko.Spec.DomainSettings.RStudioServerProDomainSettings.RStudioPackageManagerURL != nil {
				f5f1.RStudioPackageManagerUrl = r.ko.Spec.DomainSettings.RStudioServerProDomainSettings.RStudioPackageManagerURL
			}
			f5.RStudioServerProDomainSettings = f5f1
		}
		if r.ko.Spec.DomainSettings.SecurityGroupIDs != nil {
			f5.SecurityGroupIds = aws.ToStringSlice(r.ko.Spec.DomainSettings.SecurityGroupIDs)
		}
		res.DomainSettings = f5
	}
	if r.ko.Spec.HomeEFSFileSystemKMSKeyID != nil {
		res.HomeEfsFileSystemKmsKeyId = r.ko.Spec.HomeEFSFileSystemKMSKeyID
	}
	if r.ko.Spec.KMSKeyID != nil {
		res.KmsKeyId = r.ko.Spec.KMSKeyID
	}
	if r.ko.Spec.SubnetIDs != nil {
		res.SubnetIds = aws.ToStringSlice(r.ko.Spec.SubnetIDs)
	}
	if r.ko.Spec.Tags != nil {
		f9 := []svcsdktypes.Tag{}
		for _, f9iter := range r.ko.Spec.Tags {
			f9elem := &svcsdktypes.Tag{}
			if f9iter.Key != nil {
				f9elem.Key = f9iter.Key
			}
			if f9iter.Value != nil {
				f9elem.Value = f9iter.Value
			}
			f9 = append(f9, *f9elem)
		}
		res.Tags = f9
	}
	if r.ko.Spec.VPCID != nil {
		res.VpcId = r.ko.Spec.VPCID
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	if err = rm.requeueUntilCanModify(ctx, latest); err != nil {
		return nil, err
	}
	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.UpdateDomainOutput
	_ = resp
	resp, err = rm.sdkapi.UpdateDomain(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdateDomain", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.DomainArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.DomainArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.UpdateDomainInput, error) {
	res := &svcsdk.UpdateDomainInput{}

	if r.ko.Spec.AppNetworkAccessType != nil {
		res.AppNetworkAccessType = svcsdktypes.AppNetworkAccessType(*r.ko.Spec.AppNetworkAccessType)
	}
	if r.ko.Spec.AppSecurityGroupManagement != nil {
		res.AppSecurityGroupManagement = svcsdktypes.AppSecurityGroupManagement(*r.ko.Spec.AppSecurityGroupManagement)
	}
	if r.ko.Spec.DefaultUserSettings != nil {
		f2 := &svcsdktypes.UserSettings{}
		if r.ko.Spec.DefaultUserSettings.CodeEditorAppSettings != nil {
			f2f0 := &svcsdktypes.CodeEditorAppSettings{}
			if r.ko.Spec.DefaultUserSettings.CodeEditorAppSettings.DefaultResourceSpec != nil {
				f2f0f0 := &svcsdktypes.ResourceSpec{}
				if r.ko.Spec.DefaultUserSettings.CodeEditorAppSettings.DefaultResourceSpec.InstanceType != nil {
					f2f0f0.InstanceType = svcsdktypes.AppInstanceType(*r.ko.Spec.DefaultUserSettings.CodeEditorAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.DefaultUserSettings.CodeEditorAppSettings.DefaultResourceSpec.LifecycleConfigARN != nil {
					f2f0f0.LifecycleConfigArn = r.ko.Spec.DefaultUserSettings.CodeEditorAppSettings.DefaultResourceSpec.LifecycleConfigARN
				}
				if r.ko.Spec.DefaultUserSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f2f0f0.SageMakerImageArn = r.ko.Spec.DefaultUserSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageARN
				}
				if r.ko.Spec.DefaultUserSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f2f0f0.SageMakerImageVersionAlias = r.ko.Spec.DefaultUserSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if r.ko.Spec.DefaultUserSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f2f0f0.SageMakerImageVersionArn = r.ko.Spec.DefaultUserSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageVersionARN
				}
				f2f0.DefaultResourceSpec = f2f0f0
			}
			if r.ko.Spec.DefaultUserSettings.CodeEditorAppSettings.LifecycleConfigARNs != nil {
				f2f0.LifecycleConfigArns = aws.ToStringSlice(r.ko.Spec.DefaultUserSettings.CodeEditorAppSettings.LifecycleConfigARNs)
			}
			f2.CodeEditorAppSettings = f2f0
		}
		if r.ko.Spec.DefaultUserSettings.CustomFileSystemConfigs != nil {
			f2f1 := []svcsdktypes.CustomFileSystemConfig{}
			for _, f2f1iter := range r.ko.Spec.DefaultUserSettings.CustomFileSystemConfigs {
				var f2f1elem svcsdktypes.CustomFileSystemConfig
				isInterfaceSet := false
				if f2f1iter.EFSFileSystemConfig != nil {
					if isInterfaceSet {
						return nil, ackerr.NewTerminalError(fmt.Errorf("can only set one of the members for EFSFileSystemConfig"))
					}
					f2f1elemf0Parent := &svcsdktypes.CustomFileSystemConfigMemberEFSFileSystemConfig{}
					f2f1elemf0 := &svcsdktypes.EFSFileSystemConfig{}
					if f2f1iter.EFSFileSystemConfig.FileSystemID != nil {
						f2f1elemf0.FileSystemId = f2f1iter.EFSFileSystemConfig.FileSystemID
					}
					if f2f1iter.EFSFileSystemConfig.FileSystemPath != nil {
						f2f1elemf0.FileSystemPath = f2f1iter.EFSFileSystemConfig.FileSystemPath
					}
					f2f1elemf0Parent.Value = *f2f1elemf0
				}
				f2f1 = append(f2f1, f2f1elem)
			}
			f2.CustomFileSystemConfigs = f2f1
		}
		if r.ko.Spec.DefaultUserSettings.CustomPosixUserConfig != nil {
			f2f2 := &svcsdktypes.CustomPosixUserConfig{}
			if r.ko.Spec.DefaultUserSettings.CustomPosixUserConfig.GID != nil {
				f2f2.Gid = r.ko.Spec.DefaultUserSettings.CustomPosixUserConfig.GID
			}
			if r.ko.Spec.DefaultUserSettings.CustomPosixUserConfig.UID != nil {
				f2f2.Uid = r.ko.Spec.DefaultUserSettings.CustomPosixUserConfig.UID
			}
			f2.CustomPosixUserConfig = f2f2
		}
		if r.ko.Spec.DefaultUserSettings.DefaultLandingURI != nil {
			f2.DefaultLandingUri = r.ko.Spec.DefaultUserSettings.DefaultLandingURI
		}
		if r.ko.Spec.DefaultUserSettings.ExecutionRole != nil {
			f2.ExecutionRole = r.ko.Spec.DefaultUserSettings.ExecutionRole
		}
		if r.ko.Spec.DefaultUserSettings.JupyterLabAppSettings != nil {
			f2f5 := &svcsdktypes.JupyterLabAppSettings{}
			if r.ko.Spec.DefaultUserSettings.JupyterLabAppSettings.CustomImages != nil {
				f2f5f0 := []svcsdktypes.CustomImage{}
				for _, f2f5f0iter := range r.ko.Spec.DefaultUserSettings.JupyterLabAppSettings.CustomImages {
					f2f5f0elem := &svcsdktypes.CustomImage{}
					if f2f5f0iter.AppImageConfigName != nil {
						f2f5f0elem.AppImageConfigName = f2f5f0iter.AppImageConfigName
					}
					if f2f5f0iter.ImageName != nil {
						f2f5f0elem.ImageName = f2f5f0iter.ImageName
					}
					if f2f5f0iter.ImageVersionNumber != nil {
						imageVersionNumberCopy0 := *f2f5f0iter.ImageVersionNumber
						if imageVersionNumberCopy0 > math.MaxInt32 || imageVersionNumberCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field ImageVersionNumber is of type int32")
						}
						imageVersionNumberCopy := int32(imageVersionNumberCopy0)
						f2f5f0elem.ImageVersionNumber = &imageVersionNumberCopy
					}
					f2f5f0 = append(f2f5f0, *f2f5f0elem)
				}
				f2f5.CustomImages = f2f5f0
			}
			if r.ko.Spec.DefaultUserSettings.JupyterLabAppSettings.DefaultResourceSpec != nil {
				f2f5f1 := &svcsdktypes.ResourceSpec{}
				if r.ko.Spec.DefaultUserSettings.JupyterLabAppSettings.DefaultResourceSpec.InstanceType != nil {
					f2f5f1.InstanceType = svcsdktypes.AppInstanceType(*r.ko.Spec.DefaultUserSettings.JupyterLabAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.DefaultUserSettings.JupyterLabAppSettings.DefaultResourceSpec.LifecycleConfigARN != nil {
					f2f5f1.LifecycleConfigArn = r.ko.Spec.DefaultUserSettings.JupyterLabAppSettings.DefaultResourceSpec.LifecycleConfigARN
				}
				if r.ko.Spec.DefaultUserSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f2f5f1.SageMakerImageArn = r.ko.Spec.DefaultUserSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageARN
				}
				if r.ko.Spec.DefaultUserSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f2f5f1.SageMakerImageVersionAlias = r.ko.Spec.DefaultUserSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if r.ko.Spec.DefaultUserSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f2f5f1.SageMakerImageVersionArn = r.ko.Spec.DefaultUserSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageVersionARN
				}
				f2f5.DefaultResourceSpec = f2f5f1
			}
			if r.ko.Spec.DefaultUserSettings.JupyterLabAppSettings.LifecycleConfigARNs != nil {
				f2f5.LifecycleConfigArns = aws.ToStringSlice(r.ko.Spec.DefaultUserSettings.JupyterLabAppSettings.LifecycleConfigARNs)
			}
			f2.JupyterLabAppSettings = f2f5
		}
		if r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings != nil {
			f2f6 := &svcsdktypes.JupyterServerAppSettings{}
			if r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec != nil {
				f2f6f0 := &svcsdktypes.ResourceSpec{}
				if r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.InstanceType != nil {
					f2f6f0.InstanceType = svcsdktypes.AppInstanceType(*r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.LifecycleConfigARN != nil {
					f2f6f0.LifecycleConfigArn = r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.LifecycleConfigARN
				}
				if r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f2f6f0.SageMakerImageArn = r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageARN
				}
				if r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f2f6f0.SageMakerImageVersionAlias = r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f2f6f0.SageMakerImageVersionArn = r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionARN
				}
				f2f6.DefaultResourceSpec = f2f6f0
			}
			if r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.LifecycleConfigARNs != nil {
				f2f6.LifecycleConfigArns = aws.ToStringSlice(r.ko.Spec.DefaultUserSettings.JupyterServerAppSettings.LifecycleConfigARNs)
			}
			f2.JupyterServerAppSettings = f2f6
		}
		if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings != nil {
			f2f7 := &svcsdktypes.KernelGatewayAppSettings{}
			if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.CustomImages != nil {
				f2f7f0 := []svcsdktypes.CustomImage{}
				for _, f2f7f0iter := range r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.CustomImages {
					f2f7f0elem := &svcsdktypes.CustomImage{}
					if f2f7f0iter.AppImageConfigName != nil {
						f2f7f0elem.AppImageConfigName = f2f7f0iter.AppImageConfigName
					}
					if f2f7f0iter.ImageName != nil {
						f2f7f0elem.ImageName = f2f7f0iter.ImageName
					}
					if f2f7f0iter.ImageVersionNumber != nil {
						imageVersionNumberCopy0 := *f2f7f0iter.ImageVersionNumber
						if imageVersionNumberCopy0 > math.MaxInt32 || imageVersionNumberCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field ImageVersionNumber is of type int32")
						}
						imageVersionNumberCopy := int32(imageVersionNumberCopy0)
						f2f7f0elem.ImageVersionNumber = &imageVersionNumberCopy
					}
					f2f7f0 = append(f2f7f0, *f2f7f0elem)
				}
				f2f7.CustomImages = f2f7f0
			}
			if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec != nil {
				f2f7f1 := &svcsdktypes.ResourceSpec{}
				if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.InstanceType != nil {
					f2f7f1.InstanceType = svcsdktypes.AppInstanceType(*r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.LifecycleConfigARN != nil {
					f2f7f1.LifecycleConfigArn = r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.LifecycleConfigARN
				}
				if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f2f7f1.SageMakerImageArn = r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageARN
				}
				if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f2f7f1.SageMakerImageVersionAlias = r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f2f7f1.SageMakerImageVersionArn = r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionARN
				}
				f2f7.DefaultResourceSpec = f2f7f1
			}
			if r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.LifecycleConfigARNs != nil {
				f2f7.LifecycleConfigArns = aws.ToStringSlice(r.ko.Spec.DefaultUserSettings.KernelGatewayAppSettings.LifecycleConfigARNs)
			}
			f2.KernelGatewayAppSettings = f2f7
		}
		if r.ko.Spec.DefaultUserSettings.RStudioServerProAppSettings != nil {
			f2f8 := &svcsdktypes.RStudioServerProAppSettings{}
			if r.ko.Spec.DefaultUserSettings.RStudioServerProAppSettings.AccessStatus != nil {
				f2f8.AccessStatus = svcsdktypes.RStudioServerProAccessStatus(*r.ko.Spec.DefaultUserSettings.RStudioServerProAppSettings.AccessStatus)
			}
			if r.ko.Spec.DefaultUserSettings.RStudioServerProAppSettings.UserGroup != nil {
				f2f8.UserGroup = svcsdktypes.RStudioServerProUserGroup(*r.ko.Spec.DefaultUserSettings.RStudioServerProAppSettings.UserGroup)
			}
			f2.RStudioServerProAppSettings = f2f8
		}
		if r.ko.Spec.DefaultUserSettings.SecurityGroups != nil {
			f2.SecurityGroups = aws.ToStringSlice(r.ko.Spec.DefaultUserSettings.SecurityGroups)
		}
		if r.ko.Spec.DefaultUserSettings.SharingSettings != nil {
			f2f10 := &svcsdktypes.SharingSettings{}
			if r.ko.Spec.DefaultUserSettings.SharingSettings.NotebookOutputOption != nil {
				f2f10.NotebookOutputOption = svcsdktypes.NotebookOutputOption(*r.ko.Spec.DefaultUserSettings.SharingSettings.NotebookOutputOption)
			}
			if r.ko.Spec.DefaultUserSettings.SharingSettings.S3KMSKeyID != nil {
				f2f10.S3KmsKeyId = r.ko.Spec.DefaultUserSettings.SharingSettings.S3KMSKeyID
			}
			if r.ko.Spec.DefaultUserSettings.SharingSettings.S3OutputPath != nil {
				f2f10.S3OutputPath = r.ko.Spec.DefaultUserSettings.SharingSettings.S3OutputPath
			}
			f2.SharingSettings = f2f10
		}
		if r.ko.Spec.DefaultUserSettings.SpaceStorageSettings != nil {
			f2f11 := &svcsdktypes.DefaultSpaceStorageSettings{}
			if r.ko.Spec.DefaultUserSettings.SpaceStorageSettings.DefaultEBSStorageSettings != nil {
				f2f11f0 := &svcsdktypes.DefaultEbsStorageSettings{}
				if r.ko.Spec.DefaultUserSettings.SpaceStorageSettings.DefaultEBSStorageSettings.DefaultEBSVolumeSizeInGb != nil {
					defaultEBSVolumeSizeInGbCopy0 := *r.ko.Spec.DefaultUserSettings.SpaceStorageSettings.DefaultEBSStorageSettings.DefaultEBSVolumeSizeInGb
					if defaultEBSVolumeSizeInGbCopy0 > math.MaxInt32 || defaultEBSVolumeSizeInGbCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field DefaultEbsVolumeSizeInGb is of type int32")
					}
					defaultEBSVolumeSizeInGbCopy := int32(defaultEBSVolumeSizeInGbCopy0)
					f2f11f0.DefaultEbsVolumeSizeInGb = &defaultEBSVolumeSizeInGbCopy
				}
				if r.ko.Spec.DefaultUserSettings.SpaceStorageSettings.DefaultEBSStorageSettings.MaximumEBSVolumeSizeInGb != nil {
					maximumEBSVolumeSizeInGbCopy0 := *r.ko.Spec.DefaultUserSettings.SpaceStorageSettings.DefaultEBSStorageSettings.MaximumEBSVolumeSizeInGb
					if maximumEBSVolumeSizeInGbCopy0 > math.MaxInt32 || maximumEBSVolumeSizeInGbCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field MaximumEbsVolumeSizeInGb is of type int32")
					}
					maximumEBSVolumeSizeInGbCopy := int32(maximumEBSVolumeSizeInGbCopy0)
					f2f11f0.MaximumEbsVolumeSizeInGb = &maximumEBSVolumeSizeInGbCopy
				}
				f2f11.DefaultEbsStorageSettings = f2f11f0
			}
			f2.SpaceStorageSettings = f2f11
		}
		if r.ko.Spec.DefaultUserSettings.StudioWebPortal != nil {
			f2.StudioWebPortal = svcsdktypes.StudioWebPortal(*r.ko.Spec.DefaultUserSettings.StudioWebPortal)
		}
		if r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings != nil {
			f2f13 := &svcsdktypes.TensorBoardAppSettings{}
			if r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec != nil {
				f2f13f0 := &svcsdktypes.ResourceSpec{}
				if r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.InstanceType != nil {
					f2f13f0.InstanceType = svcsdktypes.AppInstanceType(*r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.LifecycleConfigARN != nil {
					f2f13f0.LifecycleConfigArn = r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.LifecycleConfigARN
				}
				if r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f2f13f0.SageMakerImageArn = r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageARN
				}
				if r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f2f13f0.SageMakerImageVersionAlias = r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f2f13f0.SageMakerImageVersionArn = r.ko.Spec.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageVersionARN
				}
				f2f13.DefaultResourceSpec = f2f13f0
			}
			f2.TensorBoardAppSettings = f2f13
		}
		res.DefaultUserSettings = f2
	}
	if r.ko.Status.DomainID != nil {
		res.DomainId = r.ko.Status.DomainID
	}
	if r.ko.Spec.SubnetIDs != nil {
		res.SubnetIds = aws.ToStringSlice(r.ko.Spec.SubnetIDs)
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteDomainOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteDomain(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteDomain", err)

	if err == nil {
		if observed, err := rm.sdkFind(ctx, r); err != ackerr.NotFound {
			if err != nil {
				return nil, err
			}
			r.SetStatus(observed)
			return r, requeueWaitWhileDeleting
		}
	}

	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteDomainInput, error) {
	res := &svcsdk.DeleteDomainInput{}

	if r.ko.Status.DomainID != nil {
		res.DomainId = r.ko.Status.DomainID
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.Domain,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}

	var terminalErr smithy.APIError
	if !errors.As(err, &terminalErr) {
		return false
	}
	switch terminalErr.ErrorCode() {
	case "ResourceNotFound",
		"InvalidParameterCombination",
		"InvalidParameterValue",
		"MissingParameter":
		return true
	default:
		return false
	}
}
