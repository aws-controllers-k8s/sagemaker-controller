// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package user_profile

import (
	"context"
	"errors"
	"fmt"
	"math"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go-v2/aws"
	svcsdk "github.com/aws/aws-sdk-go-v2/service/sagemaker"
	svcsdktypes "github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
	smithy "github.com/aws/smithy-go"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/sagemaker-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &svcsdk.Client{}
	_ = &svcapitypes.UserProfile{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
	_ = &aws.Config{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.DescribeUserProfileOutput
	resp, err = rm.sdkapi.DescribeUserProfile(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "DescribeUserProfile", err)
	if err != nil {
		var awsErr smithy.APIError
		if errors.As(err, &awsErr) && awsErr.ErrorCode() == "ResourceNotFound" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.DomainId != nil {
		ko.Spec.DomainID = resp.DomainId
	} else {
		ko.Spec.DomainID = nil
	}
	if resp.SingleSignOnUserIdentifier != nil {
		ko.Spec.SingleSignOnUserIdentifier = resp.SingleSignOnUserIdentifier
	} else {
		ko.Spec.SingleSignOnUserIdentifier = nil
	}
	if resp.SingleSignOnUserValue != nil {
		ko.Spec.SingleSignOnUserValue = resp.SingleSignOnUserValue
	} else {
		ko.Spec.SingleSignOnUserValue = nil
	}
	if resp.Status != "" {
		ko.Status.Status = aws.String(string(resp.Status))
	} else {
		ko.Status.Status = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.UserProfileArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.UserProfileArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.UserProfileName != nil {
		ko.Spec.UserProfileName = resp.UserProfileName
	} else {
		ko.Spec.UserProfileName = nil
	}
	if resp.UserSettings != nil {
		f10 := &svcapitypes.UserSettings{}
		if resp.UserSettings.CodeEditorAppSettings != nil {
			f10f0 := &svcapitypes.CodeEditorAppSettings{}
			if resp.UserSettings.CodeEditorAppSettings.DefaultResourceSpec != nil {
				f10f0f0 := &svcapitypes.ResourceSpec{}
				if resp.UserSettings.CodeEditorAppSettings.DefaultResourceSpec.InstanceType != "" {
					f10f0f0.InstanceType = aws.String(string(resp.UserSettings.CodeEditorAppSettings.DefaultResourceSpec.InstanceType))
				}
				if resp.UserSettings.CodeEditorAppSettings.DefaultResourceSpec.LifecycleConfigArn != nil {
					f10f0f0.LifecycleConfigARN = resp.UserSettings.CodeEditorAppSettings.DefaultResourceSpec.LifecycleConfigArn
				}
				if resp.UserSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageArn != nil {
					f10f0f0.SageMakerImageARN = resp.UserSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageArn
				}
				if resp.UserSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f10f0f0.SageMakerImageVersionAlias = resp.UserSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if resp.UserSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageVersionArn != nil {
					f10f0f0.SageMakerImageVersionARN = resp.UserSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageVersionArn
				}
				f10f0.DefaultResourceSpec = f10f0f0
			}
			if resp.UserSettings.CodeEditorAppSettings.LifecycleConfigArns != nil {
				f10f0.LifecycleConfigARNs = aws.StringSlice(resp.UserSettings.CodeEditorAppSettings.LifecycleConfigArns)
			}
			f10.CodeEditorAppSettings = f10f0
		}
		if resp.UserSettings.CustomFileSystemConfigs != nil {
			f10f1 := []*svcapitypes.CustomFileSystemConfig{}
			for _, f10f1iter := range resp.UserSettings.CustomFileSystemConfigs {
				f10f1elem := &svcapitypes.CustomFileSystemConfig{}
				switch f10f1iter.(type) {
				case *svcsdktypes.CustomFileSystemConfigMemberEFSFileSystemConfig:
					f10f1elemf0 := f10f1iter.(*svcsdktypes.CustomFileSystemConfigMemberEFSFileSystemConfig)
					if f10f1elemf0 != nil {
						f10f1elemf0f0 := &svcapitypes.EFSFileSystemConfig{}
						if f10f1elemf0.Value.FileSystemId != nil {
							f10f1elemf0f0.FileSystemID = f10f1elemf0.Value.FileSystemId
						}
						if f10f1elemf0.Value.FileSystemPath != nil {
							f10f1elemf0f0.FileSystemPath = f10f1elemf0.Value.FileSystemPath
						}
						f10f1elem.EFSFileSystemConfig = f10f1elemf0f0
					}
				}
				f10f1 = append(f10f1, f10f1elem)
			}
			f10.CustomFileSystemConfigs = f10f1
		}
		if resp.UserSettings.CustomPosixUserConfig != nil {
			f10f2 := &svcapitypes.CustomPosixUserConfig{}
			if resp.UserSettings.CustomPosixUserConfig.Gid != nil {
				f10f2.GID = resp.UserSettings.CustomPosixUserConfig.Gid
			}
			if resp.UserSettings.CustomPosixUserConfig.Uid != nil {
				f10f2.UID = resp.UserSettings.CustomPosixUserConfig.Uid
			}
			f10.CustomPosixUserConfig = f10f2
		}
		if resp.UserSettings.DefaultLandingUri != nil {
			f10.DefaultLandingURI = resp.UserSettings.DefaultLandingUri
		}
		if resp.UserSettings.ExecutionRole != nil {
			f10.ExecutionRole = resp.UserSettings.ExecutionRole
		}
		if resp.UserSettings.JupyterLabAppSettings != nil {
			f10f5 := &svcapitypes.JupyterLabAppSettings{}
			if resp.UserSettings.JupyterLabAppSettings.CustomImages != nil {
				f10f5f0 := []*svcapitypes.CustomImage{}
				for _, f10f5f0iter := range resp.UserSettings.JupyterLabAppSettings.CustomImages {
					f10f5f0elem := &svcapitypes.CustomImage{}
					if f10f5f0iter.AppImageConfigName != nil {
						f10f5f0elem.AppImageConfigName = f10f5f0iter.AppImageConfigName
					}
					if f10f5f0iter.ImageName != nil {
						f10f5f0elem.ImageName = f10f5f0iter.ImageName
					}
					if f10f5f0iter.ImageVersionNumber != nil {
						imageVersionNumberCopy := int64(*f10f5f0iter.ImageVersionNumber)
						f10f5f0elem.ImageVersionNumber = &imageVersionNumberCopy
					}
					f10f5f0 = append(f10f5f0, f10f5f0elem)
				}
				f10f5.CustomImages = f10f5f0
			}
			if resp.UserSettings.JupyterLabAppSettings.DefaultResourceSpec != nil {
				f10f5f1 := &svcapitypes.ResourceSpec{}
				if resp.UserSettings.JupyterLabAppSettings.DefaultResourceSpec.InstanceType != "" {
					f10f5f1.InstanceType = aws.String(string(resp.UserSettings.JupyterLabAppSettings.DefaultResourceSpec.InstanceType))
				}
				if resp.UserSettings.JupyterLabAppSettings.DefaultResourceSpec.LifecycleConfigArn != nil {
					f10f5f1.LifecycleConfigARN = resp.UserSettings.JupyterLabAppSettings.DefaultResourceSpec.LifecycleConfigArn
				}
				if resp.UserSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageArn != nil {
					f10f5f1.SageMakerImageARN = resp.UserSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageArn
				}
				if resp.UserSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f10f5f1.SageMakerImageVersionAlias = resp.UserSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if resp.UserSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageVersionArn != nil {
					f10f5f1.SageMakerImageVersionARN = resp.UserSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageVersionArn
				}
				f10f5.DefaultResourceSpec = f10f5f1
			}
			if resp.UserSettings.JupyterLabAppSettings.LifecycleConfigArns != nil {
				f10f5.LifecycleConfigARNs = aws.StringSlice(resp.UserSettings.JupyterLabAppSettings.LifecycleConfigArns)
			}
			f10.JupyterLabAppSettings = f10f5
		}
		if resp.UserSettings.JupyterServerAppSettings != nil {
			f10f6 := &svcapitypes.JupyterServerAppSettings{}
			if resp.UserSettings.JupyterServerAppSettings.DefaultResourceSpec != nil {
				f10f6f0 := &svcapitypes.ResourceSpec{}
				if resp.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.InstanceType != "" {
					f10f6f0.InstanceType = aws.String(string(resp.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.InstanceType))
				}
				if resp.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.LifecycleConfigArn != nil {
					f10f6f0.LifecycleConfigARN = resp.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.LifecycleConfigArn
				}
				if resp.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageArn != nil {
					f10f6f0.SageMakerImageARN = resp.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageArn
				}
				if resp.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f10f6f0.SageMakerImageVersionAlias = resp.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if resp.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionArn != nil {
					f10f6f0.SageMakerImageVersionARN = resp.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionArn
				}
				f10f6.DefaultResourceSpec = f10f6f0
			}
			if resp.UserSettings.JupyterServerAppSettings.LifecycleConfigArns != nil {
				f10f6.LifecycleConfigARNs = aws.StringSlice(resp.UserSettings.JupyterServerAppSettings.LifecycleConfigArns)
			}
			f10.JupyterServerAppSettings = f10f6
		}
		if resp.UserSettings.KernelGatewayAppSettings != nil {
			f10f7 := &svcapitypes.KernelGatewayAppSettings{}
			if resp.UserSettings.KernelGatewayAppSettings.CustomImages != nil {
				f10f7f0 := []*svcapitypes.CustomImage{}
				for _, f10f7f0iter := range resp.UserSettings.KernelGatewayAppSettings.CustomImages {
					f10f7f0elem := &svcapitypes.CustomImage{}
					if f10f7f0iter.AppImageConfigName != nil {
						f10f7f0elem.AppImageConfigName = f10f7f0iter.AppImageConfigName
					}
					if f10f7f0iter.ImageName != nil {
						f10f7f0elem.ImageName = f10f7f0iter.ImageName
					}
					if f10f7f0iter.ImageVersionNumber != nil {
						imageVersionNumberCopy := int64(*f10f7f0iter.ImageVersionNumber)
						f10f7f0elem.ImageVersionNumber = &imageVersionNumberCopy
					}
					f10f7f0 = append(f10f7f0, f10f7f0elem)
				}
				f10f7.CustomImages = f10f7f0
			}
			if resp.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec != nil {
				f10f7f1 := &svcapitypes.ResourceSpec{}
				if resp.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.InstanceType != "" {
					f10f7f1.InstanceType = aws.String(string(resp.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.InstanceType))
				}
				if resp.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.LifecycleConfigArn != nil {
					f10f7f1.LifecycleConfigARN = resp.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.LifecycleConfigArn
				}
				if resp.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageArn != nil {
					f10f7f1.SageMakerImageARN = resp.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageArn
				}
				if resp.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f10f7f1.SageMakerImageVersionAlias = resp.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if resp.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionArn != nil {
					f10f7f1.SageMakerImageVersionARN = resp.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionArn
				}
				f10f7.DefaultResourceSpec = f10f7f1
			}
			if resp.UserSettings.KernelGatewayAppSettings.LifecycleConfigArns != nil {
				f10f7.LifecycleConfigARNs = aws.StringSlice(resp.UserSettings.KernelGatewayAppSettings.LifecycleConfigArns)
			}
			f10.KernelGatewayAppSettings = f10f7
		}
		if resp.UserSettings.RStudioServerProAppSettings != nil {
			f10f8 := &svcapitypes.RStudioServerProAppSettings{}
			if resp.UserSettings.RStudioServerProAppSettings.AccessStatus != "" {
				f10f8.AccessStatus = aws.String(string(resp.UserSettings.RStudioServerProAppSettings.AccessStatus))
			}
			if resp.UserSettings.RStudioServerProAppSettings.UserGroup != "" {
				f10f8.UserGroup = aws.String(string(resp.UserSettings.RStudioServerProAppSettings.UserGroup))
			}
			f10.RStudioServerProAppSettings = f10f8
		}
		if resp.UserSettings.SecurityGroups != nil {
			f10.SecurityGroups = aws.StringSlice(resp.UserSettings.SecurityGroups)
		}
		if resp.UserSettings.SharingSettings != nil {
			f10f10 := &svcapitypes.SharingSettings{}
			if resp.UserSettings.SharingSettings.NotebookOutputOption != "" {
				f10f10.NotebookOutputOption = aws.String(string(resp.UserSettings.SharingSettings.NotebookOutputOption))
			}
			if resp.UserSettings.SharingSettings.S3KmsKeyId != nil {
				f10f10.S3KMSKeyID = resp.UserSettings.SharingSettings.S3KmsKeyId
			}
			if resp.UserSettings.SharingSettings.S3OutputPath != nil {
				f10f10.S3OutputPath = resp.UserSettings.SharingSettings.S3OutputPath
			}
			f10.SharingSettings = f10f10
		}
		if resp.UserSettings.SpaceStorageSettings != nil {
			f10f11 := &svcapitypes.DefaultSpaceStorageSettings{}
			if resp.UserSettings.SpaceStorageSettings.DefaultEbsStorageSettings != nil {
				f10f11f0 := &svcapitypes.DefaultEBSStorageSettings{}
				if resp.UserSettings.SpaceStorageSettings.DefaultEbsStorageSettings.DefaultEbsVolumeSizeInGb != nil {
					defaultEBSVolumeSizeInGbCopy := int64(*resp.UserSettings.SpaceStorageSettings.DefaultEbsStorageSettings.DefaultEbsVolumeSizeInGb)
					f10f11f0.DefaultEBSVolumeSizeInGb = &defaultEBSVolumeSizeInGbCopy
				}
				if resp.UserSettings.SpaceStorageSettings.DefaultEbsStorageSettings.MaximumEbsVolumeSizeInGb != nil {
					maximumEBSVolumeSizeInGbCopy := int64(*resp.UserSettings.SpaceStorageSettings.DefaultEbsStorageSettings.MaximumEbsVolumeSizeInGb)
					f10f11f0.MaximumEBSVolumeSizeInGb = &maximumEBSVolumeSizeInGbCopy
				}
				f10f11.DefaultEBSStorageSettings = f10f11f0
			}
			f10.SpaceStorageSettings = f10f11
		}
		if resp.UserSettings.StudioWebPortal != "" {
			f10.StudioWebPortal = aws.String(string(resp.UserSettings.StudioWebPortal))
		}
		if resp.UserSettings.TensorBoardAppSettings != nil {
			f10f13 := &svcapitypes.TensorBoardAppSettings{}
			if resp.UserSettings.TensorBoardAppSettings.DefaultResourceSpec != nil {
				f10f13f0 := &svcapitypes.ResourceSpec{}
				if resp.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.InstanceType != "" {
					f10f13f0.InstanceType = aws.String(string(resp.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.InstanceType))
				}
				if resp.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.LifecycleConfigArn != nil {
					f10f13f0.LifecycleConfigARN = resp.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.LifecycleConfigArn
				}
				if resp.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageArn != nil {
					f10f13f0.SageMakerImageARN = resp.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageArn
				}
				if resp.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f10f13f0.SageMakerImageVersionAlias = resp.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if resp.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageVersionArn != nil {
					f10f13f0.SageMakerImageVersionARN = resp.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageVersionArn
				}
				f10f13.DefaultResourceSpec = f10f13f0
			}
			f10.TensorBoardAppSettings = f10f13
		}
		ko.Spec.UserSettings = f10
	} else {
		ko.Spec.UserSettings = nil
	}

	rm.setStatusDefaults(ko)
	rm.customDescribeUserProfileSetOutput(ko)
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Spec.DomainID == nil || r.ko.Spec.UserProfileName == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.DescribeUserProfileInput, error) {
	res := &svcsdk.DescribeUserProfileInput{}

	if r.ko.Spec.DomainID != nil {
		res.DomainId = r.ko.Spec.DomainID
	}
	if r.ko.Spec.UserProfileName != nil {
		res.UserProfileName = r.ko.Spec.UserProfileName
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateUserProfileOutput
	_ = resp
	resp, err = rm.sdkapi.CreateUserProfile(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateUserProfile", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.UserProfileArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.UserProfileArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateUserProfileInput, error) {
	res := &svcsdk.CreateUserProfileInput{}

	if r.ko.Spec.DomainID != nil {
		res.DomainId = r.ko.Spec.DomainID
	}
	if r.ko.Spec.SingleSignOnUserIdentifier != nil {
		res.SingleSignOnUserIdentifier = r.ko.Spec.SingleSignOnUserIdentifier
	}
	if r.ko.Spec.SingleSignOnUserValue != nil {
		res.SingleSignOnUserValue = r.ko.Spec.SingleSignOnUserValue
	}
	if r.ko.Spec.Tags != nil {
		f3 := []svcsdktypes.Tag{}
		for _, f3iter := range r.ko.Spec.Tags {
			f3elem := &svcsdktypes.Tag{}
			if f3iter.Key != nil {
				f3elem.Key = f3iter.Key
			}
			if f3iter.Value != nil {
				f3elem.Value = f3iter.Value
			}
			f3 = append(f3, *f3elem)
		}
		res.Tags = f3
	}
	if r.ko.Spec.UserProfileName != nil {
		res.UserProfileName = r.ko.Spec.UserProfileName
	}
	if r.ko.Spec.UserSettings != nil {
		f5 := &svcsdktypes.UserSettings{}
		if r.ko.Spec.UserSettings.CodeEditorAppSettings != nil {
			f5f0 := &svcsdktypes.CodeEditorAppSettings{}
			if r.ko.Spec.UserSettings.CodeEditorAppSettings.DefaultResourceSpec != nil {
				f5f0f0 := &svcsdktypes.ResourceSpec{}
				if r.ko.Spec.UserSettings.CodeEditorAppSettings.DefaultResourceSpec.InstanceType != nil {
					f5f0f0.InstanceType = svcsdktypes.AppInstanceType(*r.ko.Spec.UserSettings.CodeEditorAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.UserSettings.CodeEditorAppSettings.DefaultResourceSpec.LifecycleConfigARN != nil {
					f5f0f0.LifecycleConfigArn = r.ko.Spec.UserSettings.CodeEditorAppSettings.DefaultResourceSpec.LifecycleConfigARN
				}
				if r.ko.Spec.UserSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f5f0f0.SageMakerImageArn = r.ko.Spec.UserSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageARN
				}
				if r.ko.Spec.UserSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f5f0f0.SageMakerImageVersionAlias = r.ko.Spec.UserSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if r.ko.Spec.UserSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f5f0f0.SageMakerImageVersionArn = r.ko.Spec.UserSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageVersionARN
				}
				f5f0.DefaultResourceSpec = f5f0f0
			}
			if r.ko.Spec.UserSettings.CodeEditorAppSettings.LifecycleConfigARNs != nil {
				f5f0.LifecycleConfigArns = aws.ToStringSlice(r.ko.Spec.UserSettings.CodeEditorAppSettings.LifecycleConfigARNs)
			}
			f5.CodeEditorAppSettings = f5f0
		}
		if r.ko.Spec.UserSettings.CustomFileSystemConfigs != nil {
			f5f1 := []svcsdktypes.CustomFileSystemConfig{}
			for _, f5f1iter := range r.ko.Spec.UserSettings.CustomFileSystemConfigs {
				var f5f1elem svcsdktypes.CustomFileSystemConfig
				isInterfaceSet := false
				if f5f1iter.EFSFileSystemConfig != nil {
					if isInterfaceSet {
						return nil, ackerr.NewTerminalError(fmt.Errorf("can only set one of the members for EFSFileSystemConfig"))
					}
					f5f1elemf0Parent := &svcsdktypes.CustomFileSystemConfigMemberEFSFileSystemConfig{}
					f5f1elemf0 := &svcsdktypes.EFSFileSystemConfig{}
					if f5f1iter.EFSFileSystemConfig.FileSystemID != nil {
						f5f1elemf0.FileSystemId = f5f1iter.EFSFileSystemConfig.FileSystemID
					}
					if f5f1iter.EFSFileSystemConfig.FileSystemPath != nil {
						f5f1elemf0.FileSystemPath = f5f1iter.EFSFileSystemConfig.FileSystemPath
					}
					f5f1elemf0Parent.Value = *f5f1elemf0
				}
				f5f1 = append(f5f1, f5f1elem)
			}
			f5.CustomFileSystemConfigs = f5f1
		}
		if r.ko.Spec.UserSettings.CustomPosixUserConfig != nil {
			f5f2 := &svcsdktypes.CustomPosixUserConfig{}
			if r.ko.Spec.UserSettings.CustomPosixUserConfig.GID != nil {
				f5f2.Gid = r.ko.Spec.UserSettings.CustomPosixUserConfig.GID
			}
			if r.ko.Spec.UserSettings.CustomPosixUserConfig.UID != nil {
				f5f2.Uid = r.ko.Spec.UserSettings.CustomPosixUserConfig.UID
			}
			f5.CustomPosixUserConfig = f5f2
		}
		if r.ko.Spec.UserSettings.DefaultLandingURI != nil {
			f5.DefaultLandingUri = r.ko.Spec.UserSettings.DefaultLandingURI
		}
		if r.ko.Spec.UserSettings.ExecutionRole != nil {
			f5.ExecutionRole = r.ko.Spec.UserSettings.ExecutionRole
		}
		if r.ko.Spec.UserSettings.JupyterLabAppSettings != nil {
			f5f5 := &svcsdktypes.JupyterLabAppSettings{}
			if r.ko.Spec.UserSettings.JupyterLabAppSettings.CustomImages != nil {
				f5f5f0 := []svcsdktypes.CustomImage{}
				for _, f5f5f0iter := range r.ko.Spec.UserSettings.JupyterLabAppSettings.CustomImages {
					f5f5f0elem := &svcsdktypes.CustomImage{}
					if f5f5f0iter.AppImageConfigName != nil {
						f5f5f0elem.AppImageConfigName = f5f5f0iter.AppImageConfigName
					}
					if f5f5f0iter.ImageName != nil {
						f5f5f0elem.ImageName = f5f5f0iter.ImageName
					}
					if f5f5f0iter.ImageVersionNumber != nil {
						imageVersionNumberCopy0 := *f5f5f0iter.ImageVersionNumber
						if imageVersionNumberCopy0 > math.MaxInt32 || imageVersionNumberCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field ImageVersionNumber is of type int32")
						}
						imageVersionNumberCopy := int32(imageVersionNumberCopy0)
						f5f5f0elem.ImageVersionNumber = &imageVersionNumberCopy
					}
					f5f5f0 = append(f5f5f0, *f5f5f0elem)
				}
				f5f5.CustomImages = f5f5f0
			}
			if r.ko.Spec.UserSettings.JupyterLabAppSettings.DefaultResourceSpec != nil {
				f5f5f1 := &svcsdktypes.ResourceSpec{}
				if r.ko.Spec.UserSettings.JupyterLabAppSettings.DefaultResourceSpec.InstanceType != nil {
					f5f5f1.InstanceType = svcsdktypes.AppInstanceType(*r.ko.Spec.UserSettings.JupyterLabAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.UserSettings.JupyterLabAppSettings.DefaultResourceSpec.LifecycleConfigARN != nil {
					f5f5f1.LifecycleConfigArn = r.ko.Spec.UserSettings.JupyterLabAppSettings.DefaultResourceSpec.LifecycleConfigARN
				}
				if r.ko.Spec.UserSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f5f5f1.SageMakerImageArn = r.ko.Spec.UserSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageARN
				}
				if r.ko.Spec.UserSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f5f5f1.SageMakerImageVersionAlias = r.ko.Spec.UserSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if r.ko.Spec.UserSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f5f5f1.SageMakerImageVersionArn = r.ko.Spec.UserSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageVersionARN
				}
				f5f5.DefaultResourceSpec = f5f5f1
			}
			if r.ko.Spec.UserSettings.JupyterLabAppSettings.LifecycleConfigARNs != nil {
				f5f5.LifecycleConfigArns = aws.ToStringSlice(r.ko.Spec.UserSettings.JupyterLabAppSettings.LifecycleConfigARNs)
			}
			f5.JupyterLabAppSettings = f5f5
		}
		if r.ko.Spec.UserSettings.JupyterServerAppSettings != nil {
			f5f6 := &svcsdktypes.JupyterServerAppSettings{}
			if r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec != nil {
				f5f6f0 := &svcsdktypes.ResourceSpec{}
				if r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.InstanceType != nil {
					f5f6f0.InstanceType = svcsdktypes.AppInstanceType(*r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.LifecycleConfigARN != nil {
					f5f6f0.LifecycleConfigArn = r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.LifecycleConfigARN
				}
				if r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f5f6f0.SageMakerImageArn = r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageARN
				}
				if r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f5f6f0.SageMakerImageVersionAlias = r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f5f6f0.SageMakerImageVersionArn = r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionARN
				}
				f5f6.DefaultResourceSpec = f5f6f0
			}
			if r.ko.Spec.UserSettings.JupyterServerAppSettings.LifecycleConfigARNs != nil {
				f5f6.LifecycleConfigArns = aws.ToStringSlice(r.ko.Spec.UserSettings.JupyterServerAppSettings.LifecycleConfigARNs)
			}
			f5.JupyterServerAppSettings = f5f6
		}
		if r.ko.Spec.UserSettings.KernelGatewayAppSettings != nil {
			f5f7 := &svcsdktypes.KernelGatewayAppSettings{}
			if r.ko.Spec.UserSettings.KernelGatewayAppSettings.CustomImages != nil {
				f5f7f0 := []svcsdktypes.CustomImage{}
				for _, f5f7f0iter := range r.ko.Spec.UserSettings.KernelGatewayAppSettings.CustomImages {
					f5f7f0elem := &svcsdktypes.CustomImage{}
					if f5f7f0iter.AppImageConfigName != nil {
						f5f7f0elem.AppImageConfigName = f5f7f0iter.AppImageConfigName
					}
					if f5f7f0iter.ImageName != nil {
						f5f7f0elem.ImageName = f5f7f0iter.ImageName
					}
					if f5f7f0iter.ImageVersionNumber != nil {
						imageVersionNumberCopy0 := *f5f7f0iter.ImageVersionNumber
						if imageVersionNumberCopy0 > math.MaxInt32 || imageVersionNumberCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field ImageVersionNumber is of type int32")
						}
						imageVersionNumberCopy := int32(imageVersionNumberCopy0)
						f5f7f0elem.ImageVersionNumber = &imageVersionNumberCopy
					}
					f5f7f0 = append(f5f7f0, *f5f7f0elem)
				}
				f5f7.CustomImages = f5f7f0
			}
			if r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec != nil {
				f5f7f1 := &svcsdktypes.ResourceSpec{}
				if r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.InstanceType != nil {
					f5f7f1.InstanceType = svcsdktypes.AppInstanceType(*r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.LifecycleConfigARN != nil {
					f5f7f1.LifecycleConfigArn = r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.LifecycleConfigARN
				}
				if r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f5f7f1.SageMakerImageArn = r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageARN
				}
				if r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f5f7f1.SageMakerImageVersionAlias = r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f5f7f1.SageMakerImageVersionArn = r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionARN
				}
				f5f7.DefaultResourceSpec = f5f7f1
			}
			if r.ko.Spec.UserSettings.KernelGatewayAppSettings.LifecycleConfigARNs != nil {
				f5f7.LifecycleConfigArns = aws.ToStringSlice(r.ko.Spec.UserSettings.KernelGatewayAppSettings.LifecycleConfigARNs)
			}
			f5.KernelGatewayAppSettings = f5f7
		}
		if r.ko.Spec.UserSettings.RStudioServerProAppSettings != nil {
			f5f8 := &svcsdktypes.RStudioServerProAppSettings{}
			if r.ko.Spec.UserSettings.RStudioServerProAppSettings.AccessStatus != nil {
				f5f8.AccessStatus = svcsdktypes.RStudioServerProAccessStatus(*r.ko.Spec.UserSettings.RStudioServerProAppSettings.AccessStatus)
			}
			if r.ko.Spec.UserSettings.RStudioServerProAppSettings.UserGroup != nil {
				f5f8.UserGroup = svcsdktypes.RStudioServerProUserGroup(*r.ko.Spec.UserSettings.RStudioServerProAppSettings.UserGroup)
			}
			f5.RStudioServerProAppSettings = f5f8
		}
		if r.ko.Spec.UserSettings.SecurityGroups != nil {
			f5.SecurityGroups = aws.ToStringSlice(r.ko.Spec.UserSettings.SecurityGroups)
		}
		if r.ko.Spec.UserSettings.SharingSettings != nil {
			f5f10 := &svcsdktypes.SharingSettings{}
			if r.ko.Spec.UserSettings.SharingSettings.NotebookOutputOption != nil {
				f5f10.NotebookOutputOption = svcsdktypes.NotebookOutputOption(*r.ko.Spec.UserSettings.SharingSettings.NotebookOutputOption)
			}
			if r.ko.Spec.UserSettings.SharingSettings.S3KMSKeyID != nil {
				f5f10.S3KmsKeyId = r.ko.Spec.UserSettings.SharingSettings.S3KMSKeyID
			}
			if r.ko.Spec.UserSettings.SharingSettings.S3OutputPath != nil {
				f5f10.S3OutputPath = r.ko.Spec.UserSettings.SharingSettings.S3OutputPath
			}
			f5.SharingSettings = f5f10
		}
		if r.ko.Spec.UserSettings.SpaceStorageSettings != nil {
			f5f11 := &svcsdktypes.DefaultSpaceStorageSettings{}
			if r.ko.Spec.UserSettings.SpaceStorageSettings.DefaultEBSStorageSettings != nil {
				f5f11f0 := &svcsdktypes.DefaultEbsStorageSettings{}
				if r.ko.Spec.UserSettings.SpaceStorageSettings.DefaultEBSStorageSettings.DefaultEBSVolumeSizeInGb != nil {
					defaultEBSVolumeSizeInGbCopy0 := *r.ko.Spec.UserSettings.SpaceStorageSettings.DefaultEBSStorageSettings.DefaultEBSVolumeSizeInGb
					if defaultEBSVolumeSizeInGbCopy0 > math.MaxInt32 || defaultEBSVolumeSizeInGbCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field DefaultEbsVolumeSizeInGb is of type int32")
					}
					defaultEBSVolumeSizeInGbCopy := int32(defaultEBSVolumeSizeInGbCopy0)
					f5f11f0.DefaultEbsVolumeSizeInGb = &defaultEBSVolumeSizeInGbCopy
				}
				if r.ko.Spec.UserSettings.SpaceStorageSettings.DefaultEBSStorageSettings.MaximumEBSVolumeSizeInGb != nil {
					maximumEBSVolumeSizeInGbCopy0 := *r.ko.Spec.UserSettings.SpaceStorageSettings.DefaultEBSStorageSettings.MaximumEBSVolumeSizeInGb
					if maximumEBSVolumeSizeInGbCopy0 > math.MaxInt32 || maximumEBSVolumeSizeInGbCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field MaximumEbsVolumeSizeInGb is of type int32")
					}
					maximumEBSVolumeSizeInGbCopy := int32(maximumEBSVolumeSizeInGbCopy0)
					f5f11f0.MaximumEbsVolumeSizeInGb = &maximumEBSVolumeSizeInGbCopy
				}
				f5f11.DefaultEbsStorageSettings = f5f11f0
			}
			f5.SpaceStorageSettings = f5f11
		}
		if r.ko.Spec.UserSettings.StudioWebPortal != nil {
			f5.StudioWebPortal = svcsdktypes.StudioWebPortal(*r.ko.Spec.UserSettings.StudioWebPortal)
		}
		if r.ko.Spec.UserSettings.TensorBoardAppSettings != nil {
			f5f13 := &svcsdktypes.TensorBoardAppSettings{}
			if r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec != nil {
				f5f13f0 := &svcsdktypes.ResourceSpec{}
				if r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.InstanceType != nil {
					f5f13f0.InstanceType = svcsdktypes.AppInstanceType(*r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.LifecycleConfigARN != nil {
					f5f13f0.LifecycleConfigArn = r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.LifecycleConfigARN
				}
				if r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f5f13f0.SageMakerImageArn = r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageARN
				}
				if r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f5f13f0.SageMakerImageVersionAlias = r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f5f13f0.SageMakerImageVersionArn = r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageVersionARN
				}
				f5f13.DefaultResourceSpec = f5f13f0
			}
			f5.TensorBoardAppSettings = f5f13
		}
		res.UserSettings = f5
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	if err = rm.requeueUntilCanModify(ctx, latest); err != nil {
		return nil, err
	}
	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.UpdateUserProfileOutput
	_ = resp
	resp, err = rm.sdkapi.UpdateUserProfile(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdateUserProfile", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.UserProfileArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.UserProfileArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.UpdateUserProfileInput, error) {
	res := &svcsdk.UpdateUserProfileInput{}

	if r.ko.Spec.DomainID != nil {
		res.DomainId = r.ko.Spec.DomainID
	}
	if r.ko.Spec.UserProfileName != nil {
		res.UserProfileName = r.ko.Spec.UserProfileName
	}
	if r.ko.Spec.UserSettings != nil {
		f2 := &svcsdktypes.UserSettings{}
		if r.ko.Spec.UserSettings.CodeEditorAppSettings != nil {
			f2f0 := &svcsdktypes.CodeEditorAppSettings{}
			if r.ko.Spec.UserSettings.CodeEditorAppSettings.DefaultResourceSpec != nil {
				f2f0f0 := &svcsdktypes.ResourceSpec{}
				if r.ko.Spec.UserSettings.CodeEditorAppSettings.DefaultResourceSpec.InstanceType != nil {
					f2f0f0.InstanceType = svcsdktypes.AppInstanceType(*r.ko.Spec.UserSettings.CodeEditorAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.UserSettings.CodeEditorAppSettings.DefaultResourceSpec.LifecycleConfigARN != nil {
					f2f0f0.LifecycleConfigArn = r.ko.Spec.UserSettings.CodeEditorAppSettings.DefaultResourceSpec.LifecycleConfigARN
				}
				if r.ko.Spec.UserSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f2f0f0.SageMakerImageArn = r.ko.Spec.UserSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageARN
				}
				if r.ko.Spec.UserSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f2f0f0.SageMakerImageVersionAlias = r.ko.Spec.UserSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if r.ko.Spec.UserSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f2f0f0.SageMakerImageVersionArn = r.ko.Spec.UserSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageVersionARN
				}
				f2f0.DefaultResourceSpec = f2f0f0
			}
			if r.ko.Spec.UserSettings.CodeEditorAppSettings.LifecycleConfigARNs != nil {
				f2f0.LifecycleConfigArns = aws.ToStringSlice(r.ko.Spec.UserSettings.CodeEditorAppSettings.LifecycleConfigARNs)
			}
			f2.CodeEditorAppSettings = f2f0
		}
		if r.ko.Spec.UserSettings.CustomFileSystemConfigs != nil {
			f2f1 := []svcsdktypes.CustomFileSystemConfig{}
			for _, f2f1iter := range r.ko.Spec.UserSettings.CustomFileSystemConfigs {
				var f2f1elem svcsdktypes.CustomFileSystemConfig
				isInterfaceSet := false
				if f2f1iter.EFSFileSystemConfig != nil {
					if isInterfaceSet {
						return nil, ackerr.NewTerminalError(fmt.Errorf("can only set one of the members for EFSFileSystemConfig"))
					}
					f2f1elemf0Parent := &svcsdktypes.CustomFileSystemConfigMemberEFSFileSystemConfig{}
					f2f1elemf0 := &svcsdktypes.EFSFileSystemConfig{}
					if f2f1iter.EFSFileSystemConfig.FileSystemID != nil {
						f2f1elemf0.FileSystemId = f2f1iter.EFSFileSystemConfig.FileSystemID
					}
					if f2f1iter.EFSFileSystemConfig.FileSystemPath != nil {
						f2f1elemf0.FileSystemPath = f2f1iter.EFSFileSystemConfig.FileSystemPath
					}
					f2f1elemf0Parent.Value = *f2f1elemf0
				}
				f2f1 = append(f2f1, f2f1elem)
			}
			f2.CustomFileSystemConfigs = f2f1
		}
		if r.ko.Spec.UserSettings.CustomPosixUserConfig != nil {
			f2f2 := &svcsdktypes.CustomPosixUserConfig{}
			if r.ko.Spec.UserSettings.CustomPosixUserConfig.GID != nil {
				f2f2.Gid = r.ko.Spec.UserSettings.CustomPosixUserConfig.GID
			}
			if r.ko.Spec.UserSettings.CustomPosixUserConfig.UID != nil {
				f2f2.Uid = r.ko.Spec.UserSettings.CustomPosixUserConfig.UID
			}
			f2.CustomPosixUserConfig = f2f2
		}
		if r.ko.Spec.UserSettings.DefaultLandingURI != nil {
			f2.DefaultLandingUri = r.ko.Spec.UserSettings.DefaultLandingURI
		}
		if r.ko.Spec.UserSettings.ExecutionRole != nil {
			f2.ExecutionRole = r.ko.Spec.UserSettings.ExecutionRole
		}
		if r.ko.Spec.UserSettings.JupyterLabAppSettings != nil {
			f2f5 := &svcsdktypes.JupyterLabAppSettings{}
			if r.ko.Spec.UserSettings.JupyterLabAppSettings.CustomImages != nil {
				f2f5f0 := []svcsdktypes.CustomImage{}
				for _, f2f5f0iter := range r.ko.Spec.UserSettings.JupyterLabAppSettings.CustomImages {
					f2f5f0elem := &svcsdktypes.CustomImage{}
					if f2f5f0iter.AppImageConfigName != nil {
						f2f5f0elem.AppImageConfigName = f2f5f0iter.AppImageConfigName
					}
					if f2f5f0iter.ImageName != nil {
						f2f5f0elem.ImageName = f2f5f0iter.ImageName
					}
					if f2f5f0iter.ImageVersionNumber != nil {
						imageVersionNumberCopy0 := *f2f5f0iter.ImageVersionNumber
						if imageVersionNumberCopy0 > math.MaxInt32 || imageVersionNumberCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field ImageVersionNumber is of type int32")
						}
						imageVersionNumberCopy := int32(imageVersionNumberCopy0)
						f2f5f0elem.ImageVersionNumber = &imageVersionNumberCopy
					}
					f2f5f0 = append(f2f5f0, *f2f5f0elem)
				}
				f2f5.CustomImages = f2f5f0
			}
			if r.ko.Spec.UserSettings.JupyterLabAppSettings.DefaultResourceSpec != nil {
				f2f5f1 := &svcsdktypes.ResourceSpec{}
				if r.ko.Spec.UserSettings.JupyterLabAppSettings.DefaultResourceSpec.InstanceType != nil {
					f2f5f1.InstanceType = svcsdktypes.AppInstanceType(*r.ko.Spec.UserSettings.JupyterLabAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.UserSettings.JupyterLabAppSettings.DefaultResourceSpec.LifecycleConfigARN != nil {
					f2f5f1.LifecycleConfigArn = r.ko.Spec.UserSettings.JupyterLabAppSettings.DefaultResourceSpec.LifecycleConfigARN
				}
				if r.ko.Spec.UserSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f2f5f1.SageMakerImageArn = r.ko.Spec.UserSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageARN
				}
				if r.ko.Spec.UserSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f2f5f1.SageMakerImageVersionAlias = r.ko.Spec.UserSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if r.ko.Spec.UserSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f2f5f1.SageMakerImageVersionArn = r.ko.Spec.UserSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageVersionARN
				}
				f2f5.DefaultResourceSpec = f2f5f1
			}
			if r.ko.Spec.UserSettings.JupyterLabAppSettings.LifecycleConfigARNs != nil {
				f2f5.LifecycleConfigArns = aws.ToStringSlice(r.ko.Spec.UserSettings.JupyterLabAppSettings.LifecycleConfigARNs)
			}
			f2.JupyterLabAppSettings = f2f5
		}
		if r.ko.Spec.UserSettings.JupyterServerAppSettings != nil {
			f2f6 := &svcsdktypes.JupyterServerAppSettings{}
			if r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec != nil {
				f2f6f0 := &svcsdktypes.ResourceSpec{}
				if r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.InstanceType != nil {
					f2f6f0.InstanceType = svcsdktypes.AppInstanceType(*r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.LifecycleConfigARN != nil {
					f2f6f0.LifecycleConfigArn = r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.LifecycleConfigARN
				}
				if r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f2f6f0.SageMakerImageArn = r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageARN
				}
				if r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f2f6f0.SageMakerImageVersionAlias = r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f2f6f0.SageMakerImageVersionArn = r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionARN
				}
				f2f6.DefaultResourceSpec = f2f6f0
			}
			if r.ko.Spec.UserSettings.JupyterServerAppSettings.LifecycleConfigARNs != nil {
				f2f6.LifecycleConfigArns = aws.ToStringSlice(r.ko.Spec.UserSettings.JupyterServerAppSettings.LifecycleConfigARNs)
			}
			f2.JupyterServerAppSettings = f2f6
		}
		if r.ko.Spec.UserSettings.KernelGatewayAppSettings != nil {
			f2f7 := &svcsdktypes.KernelGatewayAppSettings{}
			if r.ko.Spec.UserSettings.KernelGatewayAppSettings.CustomImages != nil {
				f2f7f0 := []svcsdktypes.CustomImage{}
				for _, f2f7f0iter := range r.ko.Spec.UserSettings.KernelGatewayAppSettings.CustomImages {
					f2f7f0elem := &svcsdktypes.CustomImage{}
					if f2f7f0iter.AppImageConfigName != nil {
						f2f7f0elem.AppImageConfigName = f2f7f0iter.AppImageConfigName
					}
					if f2f7f0iter.ImageName != nil {
						f2f7f0elem.ImageName = f2f7f0iter.ImageName
					}
					if f2f7f0iter.ImageVersionNumber != nil {
						imageVersionNumberCopy0 := *f2f7f0iter.ImageVersionNumber
						if imageVersionNumberCopy0 > math.MaxInt32 || imageVersionNumberCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field ImageVersionNumber is of type int32")
						}
						imageVersionNumberCopy := int32(imageVersionNumberCopy0)
						f2f7f0elem.ImageVersionNumber = &imageVersionNumberCopy
					}
					f2f7f0 = append(f2f7f0, *f2f7f0elem)
				}
				f2f7.CustomImages = f2f7f0
			}
			if r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec != nil {
				f2f7f1 := &svcsdktypes.ResourceSpec{}
				if r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.InstanceType != nil {
					f2f7f1.InstanceType = svcsdktypes.AppInstanceType(*r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.LifecycleConfigARN != nil {
					f2f7f1.LifecycleConfigArn = r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.LifecycleConfigARN
				}
				if r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f2f7f1.SageMakerImageArn = r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageARN
				}
				if r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f2f7f1.SageMakerImageVersionAlias = r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f2f7f1.SageMakerImageVersionArn = r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionARN
				}
				f2f7.DefaultResourceSpec = f2f7f1
			}
			if r.ko.Spec.UserSettings.KernelGatewayAppSettings.LifecycleConfigARNs != nil {
				f2f7.LifecycleConfigArns = aws.ToStringSlice(r.ko.Spec.UserSettings.KernelGatewayAppSettings.LifecycleConfigARNs)
			}
			f2.KernelGatewayAppSettings = f2f7
		}
		if r.ko.Spec.UserSettings.RStudioServerProAppSettings != nil {
			f2f8 := &svcsdktypes.RStudioServerProAppSettings{}
			if r.ko.Spec.UserSettings.RStudioServerProAppSettings.AccessStatus != nil {
				f2f8.AccessStatus = svcsdktypes.RStudioServerProAccessStatus(*r.ko.Spec.UserSettings.RStudioServerProAppSettings.AccessStatus)
			}
			if r.ko.Spec.UserSettings.RStudioServerProAppSettings.UserGroup != nil {
				f2f8.UserGroup = svcsdktypes.RStudioServerProUserGroup(*r.ko.Spec.UserSettings.RStudioServerProAppSettings.UserGroup)
			}
			f2.RStudioServerProAppSettings = f2f8
		}
		if r.ko.Spec.UserSettings.SecurityGroups != nil {
			f2.SecurityGroups = aws.ToStringSlice(r.ko.Spec.UserSettings.SecurityGroups)
		}
		if r.ko.Spec.UserSettings.SharingSettings != nil {
			f2f10 := &svcsdktypes.SharingSettings{}
			if r.ko.Spec.UserSettings.SharingSettings.NotebookOutputOption != nil {
				f2f10.NotebookOutputOption = svcsdktypes.NotebookOutputOption(*r.ko.Spec.UserSettings.SharingSettings.NotebookOutputOption)
			}
			if r.ko.Spec.UserSettings.SharingSettings.S3KMSKeyID != nil {
				f2f10.S3KmsKeyId = r.ko.Spec.UserSettings.SharingSettings.S3KMSKeyID
			}
			if r.ko.Spec.UserSettings.SharingSettings.S3OutputPath != nil {
				f2f10.S3OutputPath = r.ko.Spec.UserSettings.SharingSettings.S3OutputPath
			}
			f2.SharingSettings = f2f10
		}
		if r.ko.Spec.UserSettings.SpaceStorageSettings != nil {
			f2f11 := &svcsdktypes.DefaultSpaceStorageSettings{}
			if r.ko.Spec.UserSettings.SpaceStorageSettings.DefaultEBSStorageSettings != nil {
				f2f11f0 := &svcsdktypes.DefaultEbsStorageSettings{}
				if r.ko.Spec.UserSettings.SpaceStorageSettings.DefaultEBSStorageSettings.DefaultEBSVolumeSizeInGb != nil {
					defaultEBSVolumeSizeInGbCopy0 := *r.ko.Spec.UserSettings.SpaceStorageSettings.DefaultEBSStorageSettings.DefaultEBSVolumeSizeInGb
					if defaultEBSVolumeSizeInGbCopy0 > math.MaxInt32 || defaultEBSVolumeSizeInGbCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field DefaultEbsVolumeSizeInGb is of type int32")
					}
					defaultEBSVolumeSizeInGbCopy := int32(defaultEBSVolumeSizeInGbCopy0)
					f2f11f0.DefaultEbsVolumeSizeInGb = &defaultEBSVolumeSizeInGbCopy
				}
				if r.ko.Spec.UserSettings.SpaceStorageSettings.DefaultEBSStorageSettings.MaximumEBSVolumeSizeInGb != nil {
					maximumEBSVolumeSizeInGbCopy0 := *r.ko.Spec.UserSettings.SpaceStorageSettings.DefaultEBSStorageSettings.MaximumEBSVolumeSizeInGb
					if maximumEBSVolumeSizeInGbCopy0 > math.MaxInt32 || maximumEBSVolumeSizeInGbCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field MaximumEbsVolumeSizeInGb is of type int32")
					}
					maximumEBSVolumeSizeInGbCopy := int32(maximumEBSVolumeSizeInGbCopy0)
					f2f11f0.MaximumEbsVolumeSizeInGb = &maximumEBSVolumeSizeInGbCopy
				}
				f2f11.DefaultEbsStorageSettings = f2f11f0
			}
			f2.SpaceStorageSettings = f2f11
		}
		if r.ko.Spec.UserSettings.StudioWebPortal != nil {
			f2.StudioWebPortal = svcsdktypes.StudioWebPortal(*r.ko.Spec.UserSettings.StudioWebPortal)
		}
		if r.ko.Spec.UserSettings.TensorBoardAppSettings != nil {
			f2f13 := &svcsdktypes.TensorBoardAppSettings{}
			if r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec != nil {
				f2f13f0 := &svcsdktypes.ResourceSpec{}
				if r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.InstanceType != nil {
					f2f13f0.InstanceType = svcsdktypes.AppInstanceType(*r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.LifecycleConfigARN != nil {
					f2f13f0.LifecycleConfigArn = r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.LifecycleConfigARN
				}
				if r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f2f13f0.SageMakerImageArn = r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageARN
				}
				if r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f2f13f0.SageMakerImageVersionAlias = r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f2f13f0.SageMakerImageVersionArn = r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageVersionARN
				}
				f2f13.DefaultResourceSpec = f2f13f0
			}
			f2.TensorBoardAppSettings = f2f13
		}
		res.UserSettings = f2
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	if err = rm.requeueUntilCanModify(ctx, r); err != nil {
		return r, err
	}

	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteUserProfileOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteUserProfile(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteUserProfile", err)

	if err == nil {
		if observed, err := rm.sdkFind(ctx, r); err != ackerr.NotFound {
			if err != nil {
				return nil, err
			}
			r.SetStatus(observed)
			return r, requeueWaitWhileDeleting
		}
	}

	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteUserProfileInput, error) {
	res := &svcsdk.DeleteUserProfileInput{}

	if r.ko.Spec.DomainID != nil {
		res.DomainId = r.ko.Spec.DomainID
	}
	if r.ko.Spec.UserProfileName != nil {
		res.UserProfileName = r.ko.Spec.UserProfileName
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.UserProfile,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}

	var terminalErr smithy.APIError
	if !errors.As(err, &terminalErr) {
		return false
	}
	switch terminalErr.ErrorCode() {
	case "ResourceNotFound",
		"InvalidParameterCombination",
		"InvalidParameterValue",
		"MissingParameter":
		return true
	default:
		return false
	}
}
