// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package user_profile

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/sagemaker"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/sagemaker-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.SageMaker{}
	_ = &svcapitypes.UserProfile{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.DescribeUserProfileOutput
	resp, err = rm.sdkapi.DescribeUserProfileWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "DescribeUserProfile", err)
	if err != nil {
		if awsErr, ok := ackerr.AWSError(err); ok && awsErr.Code() == "ResourceNotFound" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.DomainId != nil {
		ko.Spec.DomainID = resp.DomainId
	} else {
		ko.Spec.DomainID = nil
	}
	if resp.SingleSignOnUserIdentifier != nil {
		ko.Spec.SingleSignOnUserIdentifier = resp.SingleSignOnUserIdentifier
	} else {
		ko.Spec.SingleSignOnUserIdentifier = nil
	}
	if resp.SingleSignOnUserValue != nil {
		ko.Spec.SingleSignOnUserValue = resp.SingleSignOnUserValue
	} else {
		ko.Spec.SingleSignOnUserValue = nil
	}
	if resp.Status != nil {
		ko.Status.Status = resp.Status
	} else {
		ko.Status.Status = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.UserProfileArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.UserProfileArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.UserProfileName != nil {
		ko.Spec.UserProfileName = resp.UserProfileName
	} else {
		ko.Spec.UserProfileName = nil
	}
	if resp.UserSettings != nil {
		f10 := &svcapitypes.UserSettings{}
		if resp.UserSettings.ExecutionRole != nil {
			f10.ExecutionRole = resp.UserSettings.ExecutionRole
		}
		if resp.UserSettings.JupyterServerAppSettings != nil {
			f10f1 := &svcapitypes.JupyterServerAppSettings{}
			if resp.UserSettings.JupyterServerAppSettings.DefaultResourceSpec != nil {
				f10f1f0 := &svcapitypes.ResourceSpec{}
				if resp.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.InstanceType != nil {
					f10f1f0.InstanceType = resp.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.InstanceType
				}
				if resp.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.LifecycleConfigArn != nil {
					f10f1f0.LifecycleConfigARN = resp.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.LifecycleConfigArn
				}
				if resp.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageArn != nil {
					f10f1f0.SageMakerImageARN = resp.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageArn
				}
				if resp.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionArn != nil {
					f10f1f0.SageMakerImageVersionARN = resp.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionArn
				}
				f10f1.DefaultResourceSpec = f10f1f0
			}
			if resp.UserSettings.JupyterServerAppSettings.LifecycleConfigArns != nil {
				f10f1f1 := []*string{}
				for _, f10f1f1iter := range resp.UserSettings.JupyterServerAppSettings.LifecycleConfigArns {
					var f10f1f1elem string
					f10f1f1elem = *f10f1f1iter
					f10f1f1 = append(f10f1f1, &f10f1f1elem)
				}
				f10f1.LifecycleConfigARNs = f10f1f1
			}
			f10.JupyterServerAppSettings = f10f1
		}
		if resp.UserSettings.KernelGatewayAppSettings != nil {
			f10f2 := &svcapitypes.KernelGatewayAppSettings{}
			if resp.UserSettings.KernelGatewayAppSettings.CustomImages != nil {
				f10f2f0 := []*svcapitypes.CustomImage{}
				for _, f10f2f0iter := range resp.UserSettings.KernelGatewayAppSettings.CustomImages {
					f10f2f0elem := &svcapitypes.CustomImage{}
					if f10f2f0iter.AppImageConfigName != nil {
						f10f2f0elem.AppImageConfigName = f10f2f0iter.AppImageConfigName
					}
					if f10f2f0iter.ImageName != nil {
						f10f2f0elem.ImageName = f10f2f0iter.ImageName
					}
					if f10f2f0iter.ImageVersionNumber != nil {
						f10f2f0elem.ImageVersionNumber = f10f2f0iter.ImageVersionNumber
					}
					f10f2f0 = append(f10f2f0, f10f2f0elem)
				}
				f10f2.CustomImages = f10f2f0
			}
			if resp.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec != nil {
				f10f2f1 := &svcapitypes.ResourceSpec{}
				if resp.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.InstanceType != nil {
					f10f2f1.InstanceType = resp.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.InstanceType
				}
				if resp.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.LifecycleConfigArn != nil {
					f10f2f1.LifecycleConfigARN = resp.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.LifecycleConfigArn
				}
				if resp.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageArn != nil {
					f10f2f1.SageMakerImageARN = resp.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageArn
				}
				if resp.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionArn != nil {
					f10f2f1.SageMakerImageVersionARN = resp.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionArn
				}
				f10f2.DefaultResourceSpec = f10f2f1
			}
			if resp.UserSettings.KernelGatewayAppSettings.LifecycleConfigArns != nil {
				f10f2f2 := []*string{}
				for _, f10f2f2iter := range resp.UserSettings.KernelGatewayAppSettings.LifecycleConfigArns {
					var f10f2f2elem string
					f10f2f2elem = *f10f2f2iter
					f10f2f2 = append(f10f2f2, &f10f2f2elem)
				}
				f10f2.LifecycleConfigARNs = f10f2f2
			}
			f10.KernelGatewayAppSettings = f10f2
		}
		if resp.UserSettings.RStudioServerProAppSettings != nil {
			f10f3 := &svcapitypes.RStudioServerProAppSettings{}
			if resp.UserSettings.RStudioServerProAppSettings.AccessStatus != nil {
				f10f3.AccessStatus = resp.UserSettings.RStudioServerProAppSettings.AccessStatus
			}
			if resp.UserSettings.RStudioServerProAppSettings.UserGroup != nil {
				f10f3.UserGroup = resp.UserSettings.RStudioServerProAppSettings.UserGroup
			}
			f10.RStudioServerProAppSettings = f10f3
		}
		if resp.UserSettings.SecurityGroups != nil {
			f10f4 := []*string{}
			for _, f10f4iter := range resp.UserSettings.SecurityGroups {
				var f10f4elem string
				f10f4elem = *f10f4iter
				f10f4 = append(f10f4, &f10f4elem)
			}
			f10.SecurityGroups = f10f4
		}
		if resp.UserSettings.SharingSettings != nil {
			f10f5 := &svcapitypes.SharingSettings{}
			if resp.UserSettings.SharingSettings.NotebookOutputOption != nil {
				f10f5.NotebookOutputOption = resp.UserSettings.SharingSettings.NotebookOutputOption
			}
			if resp.UserSettings.SharingSettings.S3KmsKeyId != nil {
				f10f5.S3KMSKeyID = resp.UserSettings.SharingSettings.S3KmsKeyId
			}
			if resp.UserSettings.SharingSettings.S3OutputPath != nil {
				f10f5.S3OutputPath = resp.UserSettings.SharingSettings.S3OutputPath
			}
			f10.SharingSettings = f10f5
		}
		if resp.UserSettings.TensorBoardAppSettings != nil {
			f10f6 := &svcapitypes.TensorBoardAppSettings{}
			if resp.UserSettings.TensorBoardAppSettings.DefaultResourceSpec != nil {
				f10f6f0 := &svcapitypes.ResourceSpec{}
				if resp.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.InstanceType != nil {
					f10f6f0.InstanceType = resp.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.InstanceType
				}
				if resp.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.LifecycleConfigArn != nil {
					f10f6f0.LifecycleConfigARN = resp.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.LifecycleConfigArn
				}
				if resp.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageArn != nil {
					f10f6f0.SageMakerImageARN = resp.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageArn
				}
				if resp.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageVersionArn != nil {
					f10f6f0.SageMakerImageVersionARN = resp.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageVersionArn
				}
				f10f6.DefaultResourceSpec = f10f6f0
			}
			f10.TensorBoardAppSettings = f10f6
		}
		ko.Spec.UserSettings = f10
	} else {
		ko.Spec.UserSettings = nil
	}

	rm.setStatusDefaults(ko)
	rm.customDescribeUserProfileSetOutput(ko)
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Spec.DomainID == nil || r.ko.Spec.UserProfileName == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.DescribeUserProfileInput, error) {
	res := &svcsdk.DescribeUserProfileInput{}

	if r.ko.Spec.DomainID != nil {
		res.SetDomainId(*r.ko.Spec.DomainID)
	}
	if r.ko.Spec.UserProfileName != nil {
		res.SetUserProfileName(*r.ko.Spec.UserProfileName)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateUserProfileOutput
	_ = resp
	resp, err = rm.sdkapi.CreateUserProfileWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateUserProfile", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.UserProfileArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.UserProfileArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateUserProfileInput, error) {
	res := &svcsdk.CreateUserProfileInput{}

	if r.ko.Spec.DomainID != nil {
		res.SetDomainId(*r.ko.Spec.DomainID)
	}
	if r.ko.Spec.SingleSignOnUserIdentifier != nil {
		res.SetSingleSignOnUserIdentifier(*r.ko.Spec.SingleSignOnUserIdentifier)
	}
	if r.ko.Spec.SingleSignOnUserValue != nil {
		res.SetSingleSignOnUserValue(*r.ko.Spec.SingleSignOnUserValue)
	}
	if r.ko.Spec.Tags != nil {
		f3 := []*svcsdk.Tag{}
		for _, f3iter := range r.ko.Spec.Tags {
			f3elem := &svcsdk.Tag{}
			if f3iter.Key != nil {
				f3elem.SetKey(*f3iter.Key)
			}
			if f3iter.Value != nil {
				f3elem.SetValue(*f3iter.Value)
			}
			f3 = append(f3, f3elem)
		}
		res.SetTags(f3)
	}
	if r.ko.Spec.UserProfileName != nil {
		res.SetUserProfileName(*r.ko.Spec.UserProfileName)
	}
	if r.ko.Spec.UserSettings != nil {
		f5 := &svcsdk.UserSettings{}
		if r.ko.Spec.UserSettings.ExecutionRole != nil {
			f5.SetExecutionRole(*r.ko.Spec.UserSettings.ExecutionRole)
		}
		if r.ko.Spec.UserSettings.JupyterServerAppSettings != nil {
			f5f1 := &svcsdk.JupyterServerAppSettings{}
			if r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec != nil {
				f5f1f0 := &svcsdk.ResourceSpec{}
				if r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.InstanceType != nil {
					f5f1f0.SetInstanceType(*r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.LifecycleConfigARN != nil {
					f5f1f0.SetLifecycleConfigArn(*r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.LifecycleConfigARN)
				}
				if r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f5f1f0.SetSageMakerImageArn(*r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageARN)
				}
				if r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f5f1f0.SetSageMakerImageVersionArn(*r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionARN)
				}
				f5f1.SetDefaultResourceSpec(f5f1f0)
			}
			if r.ko.Spec.UserSettings.JupyterServerAppSettings.LifecycleConfigARNs != nil {
				f5f1f1 := []*string{}
				for _, f5f1f1iter := range r.ko.Spec.UserSettings.JupyterServerAppSettings.LifecycleConfigARNs {
					var f5f1f1elem string
					f5f1f1elem = *f5f1f1iter
					f5f1f1 = append(f5f1f1, &f5f1f1elem)
				}
				f5f1.SetLifecycleConfigArns(f5f1f1)
			}
			f5.SetJupyterServerAppSettings(f5f1)
		}
		if r.ko.Spec.UserSettings.KernelGatewayAppSettings != nil {
			f5f2 := &svcsdk.KernelGatewayAppSettings{}
			if r.ko.Spec.UserSettings.KernelGatewayAppSettings.CustomImages != nil {
				f5f2f0 := []*svcsdk.CustomImage{}
				for _, f5f2f0iter := range r.ko.Spec.UserSettings.KernelGatewayAppSettings.CustomImages {
					f5f2f0elem := &svcsdk.CustomImage{}
					if f5f2f0iter.AppImageConfigName != nil {
						f5f2f0elem.SetAppImageConfigName(*f5f2f0iter.AppImageConfigName)
					}
					if f5f2f0iter.ImageName != nil {
						f5f2f0elem.SetImageName(*f5f2f0iter.ImageName)
					}
					if f5f2f0iter.ImageVersionNumber != nil {
						f5f2f0elem.SetImageVersionNumber(*f5f2f0iter.ImageVersionNumber)
					}
					f5f2f0 = append(f5f2f0, f5f2f0elem)
				}
				f5f2.SetCustomImages(f5f2f0)
			}
			if r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec != nil {
				f5f2f1 := &svcsdk.ResourceSpec{}
				if r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.InstanceType != nil {
					f5f2f1.SetInstanceType(*r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.LifecycleConfigARN != nil {
					f5f2f1.SetLifecycleConfigArn(*r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.LifecycleConfigARN)
				}
				if r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f5f2f1.SetSageMakerImageArn(*r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageARN)
				}
				if r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f5f2f1.SetSageMakerImageVersionArn(*r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionARN)
				}
				f5f2.SetDefaultResourceSpec(f5f2f1)
			}
			if r.ko.Spec.UserSettings.KernelGatewayAppSettings.LifecycleConfigARNs != nil {
				f5f2f2 := []*string{}
				for _, f5f2f2iter := range r.ko.Spec.UserSettings.KernelGatewayAppSettings.LifecycleConfigARNs {
					var f5f2f2elem string
					f5f2f2elem = *f5f2f2iter
					f5f2f2 = append(f5f2f2, &f5f2f2elem)
				}
				f5f2.SetLifecycleConfigArns(f5f2f2)
			}
			f5.SetKernelGatewayAppSettings(f5f2)
		}
		if r.ko.Spec.UserSettings.RStudioServerProAppSettings != nil {
			f5f3 := &svcsdk.RStudioServerProAppSettings{}
			if r.ko.Spec.UserSettings.RStudioServerProAppSettings.AccessStatus != nil {
				f5f3.SetAccessStatus(*r.ko.Spec.UserSettings.RStudioServerProAppSettings.AccessStatus)
			}
			if r.ko.Spec.UserSettings.RStudioServerProAppSettings.UserGroup != nil {
				f5f3.SetUserGroup(*r.ko.Spec.UserSettings.RStudioServerProAppSettings.UserGroup)
			}
			f5.SetRStudioServerProAppSettings(f5f3)
		}
		if r.ko.Spec.UserSettings.SecurityGroups != nil {
			f5f4 := []*string{}
			for _, f5f4iter := range r.ko.Spec.UserSettings.SecurityGroups {
				var f5f4elem string
				f5f4elem = *f5f4iter
				f5f4 = append(f5f4, &f5f4elem)
			}
			f5.SetSecurityGroups(f5f4)
		}
		if r.ko.Spec.UserSettings.SharingSettings != nil {
			f5f5 := &svcsdk.SharingSettings{}
			if r.ko.Spec.UserSettings.SharingSettings.NotebookOutputOption != nil {
				f5f5.SetNotebookOutputOption(*r.ko.Spec.UserSettings.SharingSettings.NotebookOutputOption)
			}
			if r.ko.Spec.UserSettings.SharingSettings.S3KMSKeyID != nil {
				f5f5.SetS3KmsKeyId(*r.ko.Spec.UserSettings.SharingSettings.S3KMSKeyID)
			}
			if r.ko.Spec.UserSettings.SharingSettings.S3OutputPath != nil {
				f5f5.SetS3OutputPath(*r.ko.Spec.UserSettings.SharingSettings.S3OutputPath)
			}
			f5.SetSharingSettings(f5f5)
		}
		if r.ko.Spec.UserSettings.TensorBoardAppSettings != nil {
			f5f6 := &svcsdk.TensorBoardAppSettings{}
			if r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec != nil {
				f5f6f0 := &svcsdk.ResourceSpec{}
				if r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.InstanceType != nil {
					f5f6f0.SetInstanceType(*r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.LifecycleConfigARN != nil {
					f5f6f0.SetLifecycleConfigArn(*r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.LifecycleConfigARN)
				}
				if r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f5f6f0.SetSageMakerImageArn(*r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageARN)
				}
				if r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f5f6f0.SetSageMakerImageVersionArn(*r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageVersionARN)
				}
				f5f6.SetDefaultResourceSpec(f5f6f0)
			}
			f5.SetTensorBoardAppSettings(f5f6)
		}
		res.SetUserSettings(f5)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	if err = rm.requeueUntilCanModify(ctx, latest); err != nil {
		return nil, err
	}
	input, err := rm.newUpdateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.UpdateUserProfileOutput
	_ = resp
	resp, err = rm.sdkapi.UpdateUserProfileWithContext(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdateUserProfile", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.UserProfileArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.UserProfileArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.UpdateUserProfileInput, error) {
	res := &svcsdk.UpdateUserProfileInput{}

	if r.ko.Spec.DomainID != nil {
		res.SetDomainId(*r.ko.Spec.DomainID)
	}
	if r.ko.Spec.UserProfileName != nil {
		res.SetUserProfileName(*r.ko.Spec.UserProfileName)
	}
	if r.ko.Spec.UserSettings != nil {
		f2 := &svcsdk.UserSettings{}
		if r.ko.Spec.UserSettings.ExecutionRole != nil {
			f2.SetExecutionRole(*r.ko.Spec.UserSettings.ExecutionRole)
		}
		if r.ko.Spec.UserSettings.JupyterServerAppSettings != nil {
			f2f1 := &svcsdk.JupyterServerAppSettings{}
			if r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec != nil {
				f2f1f0 := &svcsdk.ResourceSpec{}
				if r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.InstanceType != nil {
					f2f1f0.SetInstanceType(*r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.LifecycleConfigARN != nil {
					f2f1f0.SetLifecycleConfigArn(*r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.LifecycleConfigARN)
				}
				if r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f2f1f0.SetSageMakerImageArn(*r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageARN)
				}
				if r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f2f1f0.SetSageMakerImageVersionArn(*r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionARN)
				}
				f2f1.SetDefaultResourceSpec(f2f1f0)
			}
			if r.ko.Spec.UserSettings.JupyterServerAppSettings.LifecycleConfigARNs != nil {
				f2f1f1 := []*string{}
				for _, f2f1f1iter := range r.ko.Spec.UserSettings.JupyterServerAppSettings.LifecycleConfigARNs {
					var f2f1f1elem string
					f2f1f1elem = *f2f1f1iter
					f2f1f1 = append(f2f1f1, &f2f1f1elem)
				}
				f2f1.SetLifecycleConfigArns(f2f1f1)
			}
			f2.SetJupyterServerAppSettings(f2f1)
		}
		if r.ko.Spec.UserSettings.KernelGatewayAppSettings != nil {
			f2f2 := &svcsdk.KernelGatewayAppSettings{}
			if r.ko.Spec.UserSettings.KernelGatewayAppSettings.CustomImages != nil {
				f2f2f0 := []*svcsdk.CustomImage{}
				for _, f2f2f0iter := range r.ko.Spec.UserSettings.KernelGatewayAppSettings.CustomImages {
					f2f2f0elem := &svcsdk.CustomImage{}
					if f2f2f0iter.AppImageConfigName != nil {
						f2f2f0elem.SetAppImageConfigName(*f2f2f0iter.AppImageConfigName)
					}
					if f2f2f0iter.ImageName != nil {
						f2f2f0elem.SetImageName(*f2f2f0iter.ImageName)
					}
					if f2f2f0iter.ImageVersionNumber != nil {
						f2f2f0elem.SetImageVersionNumber(*f2f2f0iter.ImageVersionNumber)
					}
					f2f2f0 = append(f2f2f0, f2f2f0elem)
				}
				f2f2.SetCustomImages(f2f2f0)
			}
			if r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec != nil {
				f2f2f1 := &svcsdk.ResourceSpec{}
				if r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.InstanceType != nil {
					f2f2f1.SetInstanceType(*r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.LifecycleConfigARN != nil {
					f2f2f1.SetLifecycleConfigArn(*r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.LifecycleConfigARN)
				}
				if r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f2f2f1.SetSageMakerImageArn(*r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageARN)
				}
				if r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f2f2f1.SetSageMakerImageVersionArn(*r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionARN)
				}
				f2f2.SetDefaultResourceSpec(f2f2f1)
			}
			if r.ko.Spec.UserSettings.KernelGatewayAppSettings.LifecycleConfigARNs != nil {
				f2f2f2 := []*string{}
				for _, f2f2f2iter := range r.ko.Spec.UserSettings.KernelGatewayAppSettings.LifecycleConfigARNs {
					var f2f2f2elem string
					f2f2f2elem = *f2f2f2iter
					f2f2f2 = append(f2f2f2, &f2f2f2elem)
				}
				f2f2.SetLifecycleConfigArns(f2f2f2)
			}
			f2.SetKernelGatewayAppSettings(f2f2)
		}
		if r.ko.Spec.UserSettings.RStudioServerProAppSettings != nil {
			f2f3 := &svcsdk.RStudioServerProAppSettings{}
			if r.ko.Spec.UserSettings.RStudioServerProAppSettings.AccessStatus != nil {
				f2f3.SetAccessStatus(*r.ko.Spec.UserSettings.RStudioServerProAppSettings.AccessStatus)
			}
			if r.ko.Spec.UserSettings.RStudioServerProAppSettings.UserGroup != nil {
				f2f3.SetUserGroup(*r.ko.Spec.UserSettings.RStudioServerProAppSettings.UserGroup)
			}
			f2.SetRStudioServerProAppSettings(f2f3)
		}
		if r.ko.Spec.UserSettings.SecurityGroups != nil {
			f2f4 := []*string{}
			for _, f2f4iter := range r.ko.Spec.UserSettings.SecurityGroups {
				var f2f4elem string
				f2f4elem = *f2f4iter
				f2f4 = append(f2f4, &f2f4elem)
			}
			f2.SetSecurityGroups(f2f4)
		}
		if r.ko.Spec.UserSettings.SharingSettings != nil {
			f2f5 := &svcsdk.SharingSettings{}
			if r.ko.Spec.UserSettings.SharingSettings.NotebookOutputOption != nil {
				f2f5.SetNotebookOutputOption(*r.ko.Spec.UserSettings.SharingSettings.NotebookOutputOption)
			}
			if r.ko.Spec.UserSettings.SharingSettings.S3KMSKeyID != nil {
				f2f5.SetS3KmsKeyId(*r.ko.Spec.UserSettings.SharingSettings.S3KMSKeyID)
			}
			if r.ko.Spec.UserSettings.SharingSettings.S3OutputPath != nil {
				f2f5.SetS3OutputPath(*r.ko.Spec.UserSettings.SharingSettings.S3OutputPath)
			}
			f2.SetSharingSettings(f2f5)
		}
		if r.ko.Spec.UserSettings.TensorBoardAppSettings != nil {
			f2f6 := &svcsdk.TensorBoardAppSettings{}
			if r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec != nil {
				f2f6f0 := &svcsdk.ResourceSpec{}
				if r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.InstanceType != nil {
					f2f6f0.SetInstanceType(*r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.LifecycleConfigARN != nil {
					f2f6f0.SetLifecycleConfigArn(*r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.LifecycleConfigARN)
				}
				if r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f2f6f0.SetSageMakerImageArn(*r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageARN)
				}
				if r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f2f6f0.SetSageMakerImageVersionArn(*r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageVersionARN)
				}
				f2f6.SetDefaultResourceSpec(f2f6f0)
			}
			f2.SetTensorBoardAppSettings(f2f6)
		}
		res.SetUserSettings(f2)
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteUserProfileOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteUserProfileWithContext(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteUserProfile", err)

	if err == nil {
		if observed, err := rm.sdkFind(ctx, r); err != ackerr.NotFound {
			if err != nil {
				return nil, err
			}
			r.SetStatus(observed)
			return r, requeueWaitWhileDeleting
		}
	}

	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteUserProfileInput, error) {
	res := &svcsdk.DeleteUserProfileInput{}

	if r.ko.Spec.DomainID != nil {
		res.SetDomainId(*r.ko.Spec.DomainID)
	}
	if r.ko.Spec.UserProfileName != nil {
		res.SetUserProfileName(*r.ko.Spec.UserProfileName)
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.UserProfile,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}
	awsErr, ok := ackerr.AWSError(err)
	if !ok {
		return false
	}
	switch awsErr.Code() {
	case "ResourceNotFound",
		"InvalidParameterCombination",
		"InvalidParameterValue",
		"MissingParameter":
		return true
	default:
		return false
	}
}
