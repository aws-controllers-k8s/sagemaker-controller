// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package labeling_job

import (
	"context"
	"errors"
	"fmt"
	"math"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go-v2/aws"
	svcsdk "github.com/aws/aws-sdk-go-v2/service/sagemaker"
	svcsdktypes "github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
	smithy "github.com/aws/smithy-go"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/sagemaker-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &svcsdk.Client{}
	_ = &svcapitypes.LabelingJob{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
	_ = &aws.Config{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.DescribeLabelingJobOutput
	resp, err = rm.sdkapi.DescribeLabelingJob(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "DescribeLabelingJob", err)
	if err != nil {
		var awsErr smithy.APIError
		if errors.As(err, &awsErr) && awsErr.ErrorCode() == "UNKNOWN" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.FailureReason != nil {
		ko.Status.FailureReason = resp.FailureReason
	} else {
		ko.Status.FailureReason = nil
	}
	if resp.HumanTaskConfig != nil {
		f2 := &svcapitypes.HumanTaskConfig{}
		if resp.HumanTaskConfig.AnnotationConsolidationConfig != nil {
			f2f0 := &svcapitypes.AnnotationConsolidationConfig{}
			if resp.HumanTaskConfig.AnnotationConsolidationConfig.AnnotationConsolidationLambdaArn != nil {
				f2f0.AnnotationConsolidationLambdaARN = resp.HumanTaskConfig.AnnotationConsolidationConfig.AnnotationConsolidationLambdaArn
			}
			f2.AnnotationConsolidationConfig = f2f0
		}
		if resp.HumanTaskConfig.MaxConcurrentTaskCount != nil {
			maxConcurrentTaskCountCopy := int64(*resp.HumanTaskConfig.MaxConcurrentTaskCount)
			f2.MaxConcurrentTaskCount = &maxConcurrentTaskCountCopy
		}
		if resp.HumanTaskConfig.NumberOfHumanWorkersPerDataObject != nil {
			numberOfHumanWorkersPerDataObjectCopy := int64(*resp.HumanTaskConfig.NumberOfHumanWorkersPerDataObject)
			f2.NumberOfHumanWorkersPerDataObject = &numberOfHumanWorkersPerDataObjectCopy
		}
		if resp.HumanTaskConfig.PreHumanTaskLambdaArn != nil {
			f2.PreHumanTaskLambdaARN = resp.HumanTaskConfig.PreHumanTaskLambdaArn
		}
		if resp.HumanTaskConfig.PublicWorkforceTaskPrice != nil {
			f2f4 := &svcapitypes.PublicWorkforceTaskPrice{}
			if resp.HumanTaskConfig.PublicWorkforceTaskPrice.AmountInUsd != nil {
				f2f4f0 := &svcapitypes.USD{}
				if resp.HumanTaskConfig.PublicWorkforceTaskPrice.AmountInUsd.Cents != nil {
					centsCopy := int64(*resp.HumanTaskConfig.PublicWorkforceTaskPrice.AmountInUsd.Cents)
					f2f4f0.Cents = &centsCopy
				}
				if resp.HumanTaskConfig.PublicWorkforceTaskPrice.AmountInUsd.Dollars != nil {
					dollarsCopy := int64(*resp.HumanTaskConfig.PublicWorkforceTaskPrice.AmountInUsd.Dollars)
					f2f4f0.Dollars = &dollarsCopy
				}
				if resp.HumanTaskConfig.PublicWorkforceTaskPrice.AmountInUsd.TenthFractionsOfACent != nil {
					tenthFractionsOfACentCopy := int64(*resp.HumanTaskConfig.PublicWorkforceTaskPrice.AmountInUsd.TenthFractionsOfACent)
					f2f4f0.TenthFractionsOfACent = &tenthFractionsOfACentCopy
				}
				f2f4.AmountInUsd = f2f4f0
			}
			f2.PublicWorkforceTaskPrice = f2f4
		}
		if resp.HumanTaskConfig.TaskAvailabilityLifetimeInSeconds != nil {
			taskAvailabilityLifetimeInSecondsCopy := int64(*resp.HumanTaskConfig.TaskAvailabilityLifetimeInSeconds)
			f2.TaskAvailabilityLifetimeInSeconds = &taskAvailabilityLifetimeInSecondsCopy
		}
		if resp.HumanTaskConfig.TaskDescription != nil {
			f2.TaskDescription = resp.HumanTaskConfig.TaskDescription
		}
		if resp.HumanTaskConfig.TaskKeywords != nil {
			f2.TaskKeywords = aws.StringSlice(resp.HumanTaskConfig.TaskKeywords)
		}
		if resp.HumanTaskConfig.TaskTimeLimitInSeconds != nil {
			taskTimeLimitInSecondsCopy := int64(*resp.HumanTaskConfig.TaskTimeLimitInSeconds)
			f2.TaskTimeLimitInSeconds = &taskTimeLimitInSecondsCopy
		}
		if resp.HumanTaskConfig.TaskTitle != nil {
			f2.TaskTitle = resp.HumanTaskConfig.TaskTitle
		}
		if resp.HumanTaskConfig.UiConfig != nil {
			f2f10 := &svcapitypes.UiConfig{}
			if resp.HumanTaskConfig.UiConfig.HumanTaskUiArn != nil {
				f2f10.HumanTaskUiARN = resp.HumanTaskConfig.UiConfig.HumanTaskUiArn
			}
			if resp.HumanTaskConfig.UiConfig.UiTemplateS3Uri != nil {
				f2f10.UiTemplateS3URI = resp.HumanTaskConfig.UiConfig.UiTemplateS3Uri
			}
			f2.UiConfig = f2f10
		}
		if resp.HumanTaskConfig.WorkteamArn != nil {
			f2.WorkteamARN = resp.HumanTaskConfig.WorkteamArn
		}
		ko.Spec.HumanTaskConfig = f2
	} else {
		ko.Spec.HumanTaskConfig = nil
	}
	if resp.InputConfig != nil {
		f3 := &svcapitypes.LabelingJobInputConfig{}
		if resp.InputConfig.DataAttributes != nil {
			f3f0 := &svcapitypes.LabelingJobDataAttributes{}
			if resp.InputConfig.DataAttributes.ContentClassifiers != nil {
				f3f0f0 := []*string{}
				for _, f3f0f0iter := range resp.InputConfig.DataAttributes.ContentClassifiers {
					var f3f0f0elem *string
					f3f0f0elem = aws.String(string(f3f0f0iter))
					f3f0f0 = append(f3f0f0, f3f0f0elem)
				}
				f3f0.ContentClassifiers = f3f0f0
			}
			f3.DataAttributes = f3f0
		}
		if resp.InputConfig.DataSource != nil {
			f3f1 := &svcapitypes.LabelingJobDataSource{}
			if resp.InputConfig.DataSource.S3DataSource != nil {
				f3f1f0 := &svcapitypes.LabelingJobS3DataSource{}
				if resp.InputConfig.DataSource.S3DataSource.ManifestS3Uri != nil {
					f3f1f0.ManifestS3URI = resp.InputConfig.DataSource.S3DataSource.ManifestS3Uri
				}
				f3f1.S3DataSource = f3f1f0
			}
			if resp.InputConfig.DataSource.SnsDataSource != nil {
				f3f1f1 := &svcapitypes.LabelingJobSNSDataSource{}
				if resp.InputConfig.DataSource.SnsDataSource.SnsTopicArn != nil {
					f3f1f1.SNSTopicARN = resp.InputConfig.DataSource.SnsDataSource.SnsTopicArn
				}
				f3f1.SNSDataSource = f3f1f1
			}
			f3.DataSource = f3f1
		}
		ko.Spec.InputConfig = f3
	} else {
		ko.Spec.InputConfig = nil
	}
	if resp.LabelAttributeName != nil {
		ko.Spec.LabelAttributeName = resp.LabelAttributeName
	} else {
		ko.Spec.LabelAttributeName = nil
	}
	if resp.LabelCategoryConfigS3Uri != nil {
		ko.Spec.LabelCategoryConfigS3URI = resp.LabelCategoryConfigS3Uri
	} else {
		ko.Spec.LabelCategoryConfigS3URI = nil
	}
	if resp.LabelingJobAlgorithmsConfig != nil {
		f8 := &svcapitypes.LabelingJobAlgorithmsConfig{}
		if resp.LabelingJobAlgorithmsConfig.InitialActiveLearningModelArn != nil {
			f8.InitialActiveLearningModelARN = resp.LabelingJobAlgorithmsConfig.InitialActiveLearningModelArn
		}
		if resp.LabelingJobAlgorithmsConfig.LabelingJobAlgorithmSpecificationArn != nil {
			f8.LabelingJobAlgorithmSpecificationARN = resp.LabelingJobAlgorithmsConfig.LabelingJobAlgorithmSpecificationArn
		}
		if resp.LabelingJobAlgorithmsConfig.LabelingJobResourceConfig != nil {
			f8f2 := &svcapitypes.LabelingJobResourceConfig{}
			if resp.LabelingJobAlgorithmsConfig.LabelingJobResourceConfig.VolumeKmsKeyId != nil {
				f8f2.VolumeKMSKeyID = resp.LabelingJobAlgorithmsConfig.LabelingJobResourceConfig.VolumeKmsKeyId
			}
			if resp.LabelingJobAlgorithmsConfig.LabelingJobResourceConfig.VpcConfig != nil {
				f8f2f1 := &svcapitypes.VPCConfig{}
				if resp.LabelingJobAlgorithmsConfig.LabelingJobResourceConfig.VpcConfig.SecurityGroupIds != nil {
					f8f2f1.SecurityGroupIDs = aws.StringSlice(resp.LabelingJobAlgorithmsConfig.LabelingJobResourceConfig.VpcConfig.SecurityGroupIds)
				}
				if resp.LabelingJobAlgorithmsConfig.LabelingJobResourceConfig.VpcConfig.Subnets != nil {
					f8f2f1.Subnets = aws.StringSlice(resp.LabelingJobAlgorithmsConfig.LabelingJobResourceConfig.VpcConfig.Subnets)
				}
				f8f2.VPCConfig = f8f2f1
			}
			f8.LabelingJobResourceConfig = f8f2
		}
		ko.Spec.LabelingJobAlgorithmsConfig = f8
	} else {
		ko.Spec.LabelingJobAlgorithmsConfig = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.LabelingJobArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.LabelingJobArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.LabelingJobName != nil {
		ko.Spec.LabelingJobName = resp.LabelingJobName
	} else {
		ko.Spec.LabelingJobName = nil
	}
	if resp.LabelingJobStatus != "" {
		ko.Status.LabelingJobStatus = aws.String(string(resp.LabelingJobStatus))
	} else {
		ko.Status.LabelingJobStatus = nil
	}
	if resp.OutputConfig != nil {
		f14 := &svcapitypes.LabelingJobOutputConfig{}
		if resp.OutputConfig.KmsKeyId != nil {
			f14.KMSKeyID = resp.OutputConfig.KmsKeyId
		}
		if resp.OutputConfig.S3OutputPath != nil {
			f14.S3OutputPath = resp.OutputConfig.S3OutputPath
		}
		if resp.OutputConfig.SnsTopicArn != nil {
			f14.SNSTopicARN = resp.OutputConfig.SnsTopicArn
		}
		ko.Spec.OutputConfig = f14
	} else {
		ko.Spec.OutputConfig = nil
	}
	if resp.RoleArn != nil {
		ko.Spec.RoleARN = resp.RoleArn
	} else {
		ko.Spec.RoleARN = nil
	}
	if resp.StoppingConditions != nil {
		f16 := &svcapitypes.LabelingJobStoppingConditions{}
		if resp.StoppingConditions.MaxHumanLabeledObjectCount != nil {
			maxHumanLabeledObjectCountCopy := int64(*resp.StoppingConditions.MaxHumanLabeledObjectCount)
			f16.MaxHumanLabeledObjectCount = &maxHumanLabeledObjectCountCopy
		}
		if resp.StoppingConditions.MaxPercentageOfInputDatasetLabeled != nil {
			maxPercentageOfInputDatasetLabeledCopy := int64(*resp.StoppingConditions.MaxPercentageOfInputDatasetLabeled)
			f16.MaxPercentageOfInputDatasetLabeled = &maxPercentageOfInputDatasetLabeledCopy
		}
		ko.Spec.StoppingConditions = f16
	} else {
		ko.Spec.StoppingConditions = nil
	}
	if resp.Tags != nil {
		f17 := []*svcapitypes.Tag{}
		for _, f17iter := range resp.Tags {
			f17elem := &svcapitypes.Tag{}
			if f17iter.Key != nil {
				f17elem.Key = f17iter.Key
			}
			if f17iter.Value != nil {
				f17elem.Value = f17iter.Value
			}
			f17 = append(f17, f17elem)
		}
		ko.Spec.Tags = f17
	} else {
		ko.Spec.Tags = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Spec.LabelingJobName == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.DescribeLabelingJobInput, error) {
	res := &svcsdk.DescribeLabelingJobInput{}

	if r.ko.Spec.LabelingJobName != nil {
		res.LabelingJobName = r.ko.Spec.LabelingJobName
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateLabelingJobOutput
	_ = resp
	resp, err = rm.sdkapi.CreateLabelingJob(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateLabelingJob", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.LabelingJobArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.LabelingJobArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateLabelingJobInput, error) {
	res := &svcsdk.CreateLabelingJobInput{}

	if r.ko.Spec.HumanTaskConfig != nil {
		f0 := &svcsdktypes.HumanTaskConfig{}
		if r.ko.Spec.HumanTaskConfig.AnnotationConsolidationConfig != nil {
			f0f0 := &svcsdktypes.AnnotationConsolidationConfig{}
			if r.ko.Spec.HumanTaskConfig.AnnotationConsolidationConfig.AnnotationConsolidationLambdaARN != nil {
				f0f0.AnnotationConsolidationLambdaArn = r.ko.Spec.HumanTaskConfig.AnnotationConsolidationConfig.AnnotationConsolidationLambdaARN
			}
			f0.AnnotationConsolidationConfig = f0f0
		}
		if r.ko.Spec.HumanTaskConfig.MaxConcurrentTaskCount != nil {
			maxConcurrentTaskCountCopy0 := *r.ko.Spec.HumanTaskConfig.MaxConcurrentTaskCount
			if maxConcurrentTaskCountCopy0 > math.MaxInt32 || maxConcurrentTaskCountCopy0 < math.MinInt32 {
				return nil, fmt.Errorf("error: field MaxConcurrentTaskCount is of type int32")
			}
			maxConcurrentTaskCountCopy := int32(maxConcurrentTaskCountCopy0)
			f0.MaxConcurrentTaskCount = &maxConcurrentTaskCountCopy
		}
		if r.ko.Spec.HumanTaskConfig.NumberOfHumanWorkersPerDataObject != nil {
			numberOfHumanWorkersPerDataObjectCopy0 := *r.ko.Spec.HumanTaskConfig.NumberOfHumanWorkersPerDataObject
			if numberOfHumanWorkersPerDataObjectCopy0 > math.MaxInt32 || numberOfHumanWorkersPerDataObjectCopy0 < math.MinInt32 {
				return nil, fmt.Errorf("error: field NumberOfHumanWorkersPerDataObject is of type int32")
			}
			numberOfHumanWorkersPerDataObjectCopy := int32(numberOfHumanWorkersPerDataObjectCopy0)
			f0.NumberOfHumanWorkersPerDataObject = &numberOfHumanWorkersPerDataObjectCopy
		}
		if r.ko.Spec.HumanTaskConfig.PreHumanTaskLambdaARN != nil {
			f0.PreHumanTaskLambdaArn = r.ko.Spec.HumanTaskConfig.PreHumanTaskLambdaARN
		}
		if r.ko.Spec.HumanTaskConfig.PublicWorkforceTaskPrice != nil {
			f0f4 := &svcsdktypes.PublicWorkforceTaskPrice{}
			if r.ko.Spec.HumanTaskConfig.PublicWorkforceTaskPrice.AmountInUsd != nil {
				f0f4f0 := &svcsdktypes.USD{}
				if r.ko.Spec.HumanTaskConfig.PublicWorkforceTaskPrice.AmountInUsd.Cents != nil {
					centsCopy0 := *r.ko.Spec.HumanTaskConfig.PublicWorkforceTaskPrice.AmountInUsd.Cents
					if centsCopy0 > math.MaxInt32 || centsCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Cents is of type int32")
					}
					centsCopy := int32(centsCopy0)
					f0f4f0.Cents = &centsCopy
				}
				if r.ko.Spec.HumanTaskConfig.PublicWorkforceTaskPrice.AmountInUsd.Dollars != nil {
					dollarsCopy0 := *r.ko.Spec.HumanTaskConfig.PublicWorkforceTaskPrice.AmountInUsd.Dollars
					if dollarsCopy0 > math.MaxInt32 || dollarsCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Dollars is of type int32")
					}
					dollarsCopy := int32(dollarsCopy0)
					f0f4f0.Dollars = &dollarsCopy
				}
				if r.ko.Spec.HumanTaskConfig.PublicWorkforceTaskPrice.AmountInUsd.TenthFractionsOfACent != nil {
					tenthFractionsOfACentCopy0 := *r.ko.Spec.HumanTaskConfig.PublicWorkforceTaskPrice.AmountInUsd.TenthFractionsOfACent
					if tenthFractionsOfACentCopy0 > math.MaxInt32 || tenthFractionsOfACentCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field TenthFractionsOfACent is of type int32")
					}
					tenthFractionsOfACentCopy := int32(tenthFractionsOfACentCopy0)
					f0f4f0.TenthFractionsOfACent = &tenthFractionsOfACentCopy
				}
				f0f4.AmountInUsd = f0f4f0
			}
			f0.PublicWorkforceTaskPrice = f0f4
		}
		if r.ko.Spec.HumanTaskConfig.TaskAvailabilityLifetimeInSeconds != nil {
			taskAvailabilityLifetimeInSecondsCopy0 := *r.ko.Spec.HumanTaskConfig.TaskAvailabilityLifetimeInSeconds
			if taskAvailabilityLifetimeInSecondsCopy0 > math.MaxInt32 || taskAvailabilityLifetimeInSecondsCopy0 < math.MinInt32 {
				return nil, fmt.Errorf("error: field TaskAvailabilityLifetimeInSeconds is of type int32")
			}
			taskAvailabilityLifetimeInSecondsCopy := int32(taskAvailabilityLifetimeInSecondsCopy0)
			f0.TaskAvailabilityLifetimeInSeconds = &taskAvailabilityLifetimeInSecondsCopy
		}
		if r.ko.Spec.HumanTaskConfig.TaskDescription != nil {
			f0.TaskDescription = r.ko.Spec.HumanTaskConfig.TaskDescription
		}
		if r.ko.Spec.HumanTaskConfig.TaskKeywords != nil {
			f0.TaskKeywords = aws.ToStringSlice(r.ko.Spec.HumanTaskConfig.TaskKeywords)
		}
		if r.ko.Spec.HumanTaskConfig.TaskTimeLimitInSeconds != nil {
			taskTimeLimitInSecondsCopy0 := *r.ko.Spec.HumanTaskConfig.TaskTimeLimitInSeconds
			if taskTimeLimitInSecondsCopy0 > math.MaxInt32 || taskTimeLimitInSecondsCopy0 < math.MinInt32 {
				return nil, fmt.Errorf("error: field TaskTimeLimitInSeconds is of type int32")
			}
			taskTimeLimitInSecondsCopy := int32(taskTimeLimitInSecondsCopy0)
			f0.TaskTimeLimitInSeconds = &taskTimeLimitInSecondsCopy
		}
		if r.ko.Spec.HumanTaskConfig.TaskTitle != nil {
			f0.TaskTitle = r.ko.Spec.HumanTaskConfig.TaskTitle
		}
		if r.ko.Spec.HumanTaskConfig.UiConfig != nil {
			f0f10 := &svcsdktypes.UiConfig{}
			if r.ko.Spec.HumanTaskConfig.UiConfig.HumanTaskUiARN != nil {
				f0f10.HumanTaskUiArn = r.ko.Spec.HumanTaskConfig.UiConfig.HumanTaskUiARN
			}
			if r.ko.Spec.HumanTaskConfig.UiConfig.UiTemplateS3URI != nil {
				f0f10.UiTemplateS3Uri = r.ko.Spec.HumanTaskConfig.UiConfig.UiTemplateS3URI
			}
			f0.UiConfig = f0f10
		}
		if r.ko.Spec.HumanTaskConfig.WorkteamARN != nil {
			f0.WorkteamArn = r.ko.Spec.HumanTaskConfig.WorkteamARN
		}
		res.HumanTaskConfig = f0
	}
	if r.ko.Spec.InputConfig != nil {
		f1 := &svcsdktypes.LabelingJobInputConfig{}
		if r.ko.Spec.InputConfig.DataAttributes != nil {
			f1f0 := &svcsdktypes.LabelingJobDataAttributes{}
			if r.ko.Spec.InputConfig.DataAttributes.ContentClassifiers != nil {
				f1f0f0 := []svcsdktypes.ContentClassifier{}
				for _, f1f0f0iter := range r.ko.Spec.InputConfig.DataAttributes.ContentClassifiers {
					var f1f0f0elem string
					f1f0f0elem = string(*f1f0f0iter)
					f1f0f0 = append(f1f0f0, svcsdktypes.ContentClassifier(f1f0f0elem))
				}
				f1f0.ContentClassifiers = f1f0f0
			}
			f1.DataAttributes = f1f0
		}
		if r.ko.Spec.InputConfig.DataSource != nil {
			f1f1 := &svcsdktypes.LabelingJobDataSource{}
			if r.ko.Spec.InputConfig.DataSource.S3DataSource != nil {
				f1f1f0 := &svcsdktypes.LabelingJobS3DataSource{}
				if r.ko.Spec.InputConfig.DataSource.S3DataSource.ManifestS3URI != nil {
					f1f1f0.ManifestS3Uri = r.ko.Spec.InputConfig.DataSource.S3DataSource.ManifestS3URI
				}
				f1f1.S3DataSource = f1f1f0
			}
			if r.ko.Spec.InputConfig.DataSource.SNSDataSource != nil {
				f1f1f1 := &svcsdktypes.LabelingJobSnsDataSource{}
				if r.ko.Spec.InputConfig.DataSource.SNSDataSource.SNSTopicARN != nil {
					f1f1f1.SnsTopicArn = r.ko.Spec.InputConfig.DataSource.SNSDataSource.SNSTopicARN
				}
				f1f1.SnsDataSource = f1f1f1
			}
			f1.DataSource = f1f1
		}
		res.InputConfig = f1
	}
	if r.ko.Spec.LabelAttributeName != nil {
		res.LabelAttributeName = r.ko.Spec.LabelAttributeName
	}
	if r.ko.Spec.LabelCategoryConfigS3URI != nil {
		res.LabelCategoryConfigS3Uri = r.ko.Spec.LabelCategoryConfigS3URI
	}
	if r.ko.Spec.LabelingJobAlgorithmsConfig != nil {
		f4 := &svcsdktypes.LabelingJobAlgorithmsConfig{}
		if r.ko.Spec.LabelingJobAlgorithmsConfig.InitialActiveLearningModelARN != nil {
			f4.InitialActiveLearningModelArn = r.ko.Spec.LabelingJobAlgorithmsConfig.InitialActiveLearningModelARN
		}
		if r.ko.Spec.LabelingJobAlgorithmsConfig.LabelingJobAlgorithmSpecificationARN != nil {
			f4.LabelingJobAlgorithmSpecificationArn = r.ko.Spec.LabelingJobAlgorithmsConfig.LabelingJobAlgorithmSpecificationARN
		}
		if r.ko.Spec.LabelingJobAlgorithmsConfig.LabelingJobResourceConfig != nil {
			f4f2 := &svcsdktypes.LabelingJobResourceConfig{}
			if r.ko.Spec.LabelingJobAlgorithmsConfig.LabelingJobResourceConfig.VolumeKMSKeyID != nil {
				f4f2.VolumeKmsKeyId = r.ko.Spec.LabelingJobAlgorithmsConfig.LabelingJobResourceConfig.VolumeKMSKeyID
			}
			if r.ko.Spec.LabelingJobAlgorithmsConfig.LabelingJobResourceConfig.VPCConfig != nil {
				f4f2f1 := &svcsdktypes.VpcConfig{}
				if r.ko.Spec.LabelingJobAlgorithmsConfig.LabelingJobResourceConfig.VPCConfig.SecurityGroupIDs != nil {
					f4f2f1.SecurityGroupIds = aws.ToStringSlice(r.ko.Spec.LabelingJobAlgorithmsConfig.LabelingJobResourceConfig.VPCConfig.SecurityGroupIDs)
				}
				if r.ko.Spec.LabelingJobAlgorithmsConfig.LabelingJobResourceConfig.VPCConfig.Subnets != nil {
					f4f2f1.Subnets = aws.ToStringSlice(r.ko.Spec.LabelingJobAlgorithmsConfig.LabelingJobResourceConfig.VPCConfig.Subnets)
				}
				f4f2.VpcConfig = f4f2f1
			}
			f4.LabelingJobResourceConfig = f4f2
		}
		res.LabelingJobAlgorithmsConfig = f4
	}
	if r.ko.Spec.LabelingJobName != nil {
		res.LabelingJobName = r.ko.Spec.LabelingJobName
	}
	if r.ko.Spec.OutputConfig != nil {
		f6 := &svcsdktypes.LabelingJobOutputConfig{}
		if r.ko.Spec.OutputConfig.KMSKeyID != nil {
			f6.KmsKeyId = r.ko.Spec.OutputConfig.KMSKeyID
		}
		if r.ko.Spec.OutputConfig.S3OutputPath != nil {
			f6.S3OutputPath = r.ko.Spec.OutputConfig.S3OutputPath
		}
		if r.ko.Spec.OutputConfig.SNSTopicARN != nil {
			f6.SnsTopicArn = r.ko.Spec.OutputConfig.SNSTopicARN
		}
		res.OutputConfig = f6
	}
	if r.ko.Spec.RoleARN != nil {
		res.RoleArn = r.ko.Spec.RoleARN
	}
	if r.ko.Spec.StoppingConditions != nil {
		f8 := &svcsdktypes.LabelingJobStoppingConditions{}
		if r.ko.Spec.StoppingConditions.MaxHumanLabeledObjectCount != nil {
			maxHumanLabeledObjectCountCopy0 := *r.ko.Spec.StoppingConditions.MaxHumanLabeledObjectCount
			if maxHumanLabeledObjectCountCopy0 > math.MaxInt32 || maxHumanLabeledObjectCountCopy0 < math.MinInt32 {
				return nil, fmt.Errorf("error: field MaxHumanLabeledObjectCount is of type int32")
			}
			maxHumanLabeledObjectCountCopy := int32(maxHumanLabeledObjectCountCopy0)
			f8.MaxHumanLabeledObjectCount = &maxHumanLabeledObjectCountCopy
		}
		if r.ko.Spec.StoppingConditions.MaxPercentageOfInputDatasetLabeled != nil {
			maxPercentageOfInputDatasetLabeledCopy0 := *r.ko.Spec.StoppingConditions.MaxPercentageOfInputDatasetLabeled
			if maxPercentageOfInputDatasetLabeledCopy0 > math.MaxInt32 || maxPercentageOfInputDatasetLabeledCopy0 < math.MinInt32 {
				return nil, fmt.Errorf("error: field MaxPercentageOfInputDatasetLabeled is of type int32")
			}
			maxPercentageOfInputDatasetLabeledCopy := int32(maxPercentageOfInputDatasetLabeledCopy0)
			f8.MaxPercentageOfInputDatasetLabeled = &maxPercentageOfInputDatasetLabeledCopy
		}
		res.StoppingConditions = f8
	}
	if r.ko.Spec.Tags != nil {
		f9 := []svcsdktypes.Tag{}
		for _, f9iter := range r.ko.Spec.Tags {
			f9elem := &svcsdktypes.Tag{}
			if f9iter.Key != nil {
				f9elem.Key = f9iter.Key
			}
			if f9iter.Value != nil {
				f9elem.Value = f9iter.Value
			}
			f9 = append(f9, *f9elem)
		}
		res.Tags = f9
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (*resource, error) {
	return nil, ackerr.NewTerminalError(ackerr.NotImplemented)
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.StopLabelingJobOutput
	_ = resp
	resp, err = rm.sdkapi.StopLabelingJob(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "StopLabelingJob", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.StopLabelingJobInput, error) {
	res := &svcsdk.StopLabelingJobInput{}

	if r.ko.Spec.LabelingJobName != nil {
		res.LabelingJobName = r.ko.Spec.LabelingJobName
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.LabelingJob,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	// No terminal_errors specified for this resource in generator config
	return false
}
