// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package model_package

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/sagemaker"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/sagemaker-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.SageMaker{}
	_ = &svcapitypes.ModelPackage{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}
	// If ModelPackageName not set after newRequestPayload, attempt to use ARN
	// This is because versioned modelpackage uses ARN not name
	if input.ModelPackageName == nil {
		arn := r.Identifiers().ARN()
		if arn == nil {
			return nil, ackerr.NotFound
		}
		input.SetModelPackageName(string(*arn))
	}

	var resp *svcsdk.DescribeModelPackageOutput
	resp, err = rm.sdkapi.DescribeModelPackageWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "DescribeModelPackage", err)
	if err != nil {
		if awsErr, ok := ackerr.AWSError(err); ok && awsErr.Code() == "ValidationException" && strings.HasSuffix(awsErr.Message(), "does not exist.") {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.AdditionalInferenceSpecifications != nil {
		f0 := []*svcapitypes.AdditionalInferenceSpecificationDefinition{}
		for _, f0iter := range resp.AdditionalInferenceSpecifications {
			f0elem := &svcapitypes.AdditionalInferenceSpecificationDefinition{}
			if f0iter.Containers != nil {
				f0elemf0 := []*svcapitypes.ModelPackageContainerDefinition{}
				for _, f0elemf0iter := range f0iter.Containers {
					f0elemf0elem := &svcapitypes.ModelPackageContainerDefinition{}
					if f0elemf0iter.ContainerHostname != nil {
						f0elemf0elem.ContainerHostname = f0elemf0iter.ContainerHostname
					}
					if f0elemf0iter.Environment != nil {
						f0elemf0elemf1 := map[string]*string{}
						for f0elemf0elemf1key, f0elemf0elemf1valiter := range f0elemf0iter.Environment {
							var f0elemf0elemf1val string
							f0elemf0elemf1val = *f0elemf0elemf1valiter
							f0elemf0elemf1[f0elemf0elemf1key] = &f0elemf0elemf1val
						}
						f0elemf0elem.Environment = f0elemf0elemf1
					}
					if f0elemf0iter.Framework != nil {
						f0elemf0elem.Framework = f0elemf0iter.Framework
					}
					if f0elemf0iter.FrameworkVersion != nil {
						f0elemf0elem.FrameworkVersion = f0elemf0iter.FrameworkVersion
					}
					if f0elemf0iter.Image != nil {
						f0elemf0elem.Image = f0elemf0iter.Image
					}
					if f0elemf0iter.ImageDigest != nil {
						f0elemf0elem.ImageDigest = f0elemf0iter.ImageDigest
					}
					if f0elemf0iter.ModelDataUrl != nil {
						f0elemf0elem.ModelDataURL = f0elemf0iter.ModelDataUrl
					}
					if f0elemf0iter.ModelInput != nil {
						f0elemf0elemf7 := &svcapitypes.ModelInput{}
						if f0elemf0iter.ModelInput.DataInputConfig != nil {
							f0elemf0elemf7.DataInputConfig = f0elemf0iter.ModelInput.DataInputConfig
						}
						f0elemf0elem.ModelInput = f0elemf0elemf7
					}
					if f0elemf0iter.NearestModelName != nil {
						f0elemf0elem.NearestModelName = f0elemf0iter.NearestModelName
					}
					if f0elemf0iter.ProductId != nil {
						f0elemf0elem.ProductID = f0elemf0iter.ProductId
					}
					f0elemf0 = append(f0elemf0, f0elemf0elem)
				}
				f0elem.Containers = f0elemf0
			}
			if f0iter.Description != nil {
				f0elem.Description = f0iter.Description
			}
			if f0iter.Name != nil {
				f0elem.Name = f0iter.Name
			}
			if f0iter.SupportedContentTypes != nil {
				f0elemf3 := []*string{}
				for _, f0elemf3iter := range f0iter.SupportedContentTypes {
					var f0elemf3elem string
					f0elemf3elem = *f0elemf3iter
					f0elemf3 = append(f0elemf3, &f0elemf3elem)
				}
				f0elem.SupportedContentTypes = f0elemf3
			}
			if f0iter.SupportedRealtimeInferenceInstanceTypes != nil {
				f0elemf4 := []*string{}
				for _, f0elemf4iter := range f0iter.SupportedRealtimeInferenceInstanceTypes {
					var f0elemf4elem string
					f0elemf4elem = *f0elemf4iter
					f0elemf4 = append(f0elemf4, &f0elemf4elem)
				}
				f0elem.SupportedRealtimeInferenceInstanceTypes = f0elemf4
			}
			if f0iter.SupportedResponseMIMETypes != nil {
				f0elemf5 := []*string{}
				for _, f0elemf5iter := range f0iter.SupportedResponseMIMETypes {
					var f0elemf5elem string
					f0elemf5elem = *f0elemf5iter
					f0elemf5 = append(f0elemf5, &f0elemf5elem)
				}
				f0elem.SupportedResponseMIMETypes = f0elemf5
			}
			if f0iter.SupportedTransformInstanceTypes != nil {
				f0elemf6 := []*string{}
				for _, f0elemf6iter := range f0iter.SupportedTransformInstanceTypes {
					var f0elemf6elem string
					f0elemf6elem = *f0elemf6iter
					f0elemf6 = append(f0elemf6, &f0elemf6elem)
				}
				f0elem.SupportedTransformInstanceTypes = f0elemf6
			}
			f0 = append(f0, f0elem)
		}
		ko.Spec.AdditionalInferenceSpecifications = f0
	} else {
		ko.Spec.AdditionalInferenceSpecifications = nil
	}
	if resp.ApprovalDescription != nil {
		ko.Spec.ApprovalDescription = resp.ApprovalDescription
	} else {
		ko.Spec.ApprovalDescription = nil
	}
	if resp.CertifyForMarketplace != nil {
		ko.Spec.CertifyForMarketplace = resp.CertifyForMarketplace
	} else {
		ko.Spec.CertifyForMarketplace = nil
	}
	if resp.CreationTime != nil {
		ko.Status.CreationTime = &metav1.Time{*resp.CreationTime}
	} else {
		ko.Status.CreationTime = nil
	}
	if resp.CustomerMetadataProperties != nil {
		f5 := map[string]*string{}
		for f5key, f5valiter := range resp.CustomerMetadataProperties {
			var f5val string
			f5val = *f5valiter
			f5[f5key] = &f5val
		}
		ko.Spec.CustomerMetadataProperties = f5
	} else {
		ko.Spec.CustomerMetadataProperties = nil
	}
	if resp.Domain != nil {
		ko.Spec.Domain = resp.Domain
	} else {
		ko.Spec.Domain = nil
	}
	if resp.DriftCheckBaselines != nil {
		f7 := &svcapitypes.DriftCheckBaselines{}
		if resp.DriftCheckBaselines.Bias != nil {
			f7f0 := &svcapitypes.DriftCheckBias{}
			if resp.DriftCheckBaselines.Bias.ConfigFile != nil {
				f7f0f0 := &svcapitypes.FileSource{}
				if resp.DriftCheckBaselines.Bias.ConfigFile.ContentDigest != nil {
					f7f0f0.ContentDigest = resp.DriftCheckBaselines.Bias.ConfigFile.ContentDigest
				}
				if resp.DriftCheckBaselines.Bias.ConfigFile.ContentType != nil {
					f7f0f0.ContentType = resp.DriftCheckBaselines.Bias.ConfigFile.ContentType
				}
				if resp.DriftCheckBaselines.Bias.ConfigFile.S3Uri != nil {
					f7f0f0.S3URI = resp.DriftCheckBaselines.Bias.ConfigFile.S3Uri
				}
				f7f0.ConfigFile = f7f0f0
			}
			if resp.DriftCheckBaselines.Bias.PostTrainingConstraints != nil {
				f7f0f1 := &svcapitypes.MetricsSource{}
				if resp.DriftCheckBaselines.Bias.PostTrainingConstraints.ContentDigest != nil {
					f7f0f1.ContentDigest = resp.DriftCheckBaselines.Bias.PostTrainingConstraints.ContentDigest
				}
				if resp.DriftCheckBaselines.Bias.PostTrainingConstraints.ContentType != nil {
					f7f0f1.ContentType = resp.DriftCheckBaselines.Bias.PostTrainingConstraints.ContentType
				}
				if resp.DriftCheckBaselines.Bias.PostTrainingConstraints.S3Uri != nil {
					f7f0f1.S3URI = resp.DriftCheckBaselines.Bias.PostTrainingConstraints.S3Uri
				}
				f7f0.PostTrainingConstraints = f7f0f1
			}
			if resp.DriftCheckBaselines.Bias.PreTrainingConstraints != nil {
				f7f0f2 := &svcapitypes.MetricsSource{}
				if resp.DriftCheckBaselines.Bias.PreTrainingConstraints.ContentDigest != nil {
					f7f0f2.ContentDigest = resp.DriftCheckBaselines.Bias.PreTrainingConstraints.ContentDigest
				}
				if resp.DriftCheckBaselines.Bias.PreTrainingConstraints.ContentType != nil {
					f7f0f2.ContentType = resp.DriftCheckBaselines.Bias.PreTrainingConstraints.ContentType
				}
				if resp.DriftCheckBaselines.Bias.PreTrainingConstraints.S3Uri != nil {
					f7f0f2.S3URI = resp.DriftCheckBaselines.Bias.PreTrainingConstraints.S3Uri
				}
				f7f0.PreTrainingConstraints = f7f0f2
			}
			f7.Bias = f7f0
		}
		if resp.DriftCheckBaselines.Explainability != nil {
			f7f1 := &svcapitypes.DriftCheckExplainability{}
			if resp.DriftCheckBaselines.Explainability.ConfigFile != nil {
				f7f1f0 := &svcapitypes.FileSource{}
				if resp.DriftCheckBaselines.Explainability.ConfigFile.ContentDigest != nil {
					f7f1f0.ContentDigest = resp.DriftCheckBaselines.Explainability.ConfigFile.ContentDigest
				}
				if resp.DriftCheckBaselines.Explainability.ConfigFile.ContentType != nil {
					f7f1f0.ContentType = resp.DriftCheckBaselines.Explainability.ConfigFile.ContentType
				}
				if resp.DriftCheckBaselines.Explainability.ConfigFile.S3Uri != nil {
					f7f1f0.S3URI = resp.DriftCheckBaselines.Explainability.ConfigFile.S3Uri
				}
				f7f1.ConfigFile = f7f1f0
			}
			if resp.DriftCheckBaselines.Explainability.Constraints != nil {
				f7f1f1 := &svcapitypes.MetricsSource{}
				if resp.DriftCheckBaselines.Explainability.Constraints.ContentDigest != nil {
					f7f1f1.ContentDigest = resp.DriftCheckBaselines.Explainability.Constraints.ContentDigest
				}
				if resp.DriftCheckBaselines.Explainability.Constraints.ContentType != nil {
					f7f1f1.ContentType = resp.DriftCheckBaselines.Explainability.Constraints.ContentType
				}
				if resp.DriftCheckBaselines.Explainability.Constraints.S3Uri != nil {
					f7f1f1.S3URI = resp.DriftCheckBaselines.Explainability.Constraints.S3Uri
				}
				f7f1.Constraints = f7f1f1
			}
			f7.Explainability = f7f1
		}
		if resp.DriftCheckBaselines.ModelDataQuality != nil {
			f7f2 := &svcapitypes.DriftCheckModelDataQuality{}
			if resp.DriftCheckBaselines.ModelDataQuality.Constraints != nil {
				f7f2f0 := &svcapitypes.MetricsSource{}
				if resp.DriftCheckBaselines.ModelDataQuality.Constraints.ContentDigest != nil {
					f7f2f0.ContentDigest = resp.DriftCheckBaselines.ModelDataQuality.Constraints.ContentDigest
				}
				if resp.DriftCheckBaselines.ModelDataQuality.Constraints.ContentType != nil {
					f7f2f0.ContentType = resp.DriftCheckBaselines.ModelDataQuality.Constraints.ContentType
				}
				if resp.DriftCheckBaselines.ModelDataQuality.Constraints.S3Uri != nil {
					f7f2f0.S3URI = resp.DriftCheckBaselines.ModelDataQuality.Constraints.S3Uri
				}
				f7f2.Constraints = f7f2f0
			}
			if resp.DriftCheckBaselines.ModelDataQuality.Statistics != nil {
				f7f2f1 := &svcapitypes.MetricsSource{}
				if resp.DriftCheckBaselines.ModelDataQuality.Statistics.ContentDigest != nil {
					f7f2f1.ContentDigest = resp.DriftCheckBaselines.ModelDataQuality.Statistics.ContentDigest
				}
				if resp.DriftCheckBaselines.ModelDataQuality.Statistics.ContentType != nil {
					f7f2f1.ContentType = resp.DriftCheckBaselines.ModelDataQuality.Statistics.ContentType
				}
				if resp.DriftCheckBaselines.ModelDataQuality.Statistics.S3Uri != nil {
					f7f2f1.S3URI = resp.DriftCheckBaselines.ModelDataQuality.Statistics.S3Uri
				}
				f7f2.Statistics = f7f2f1
			}
			f7.ModelDataQuality = f7f2
		}
		if resp.DriftCheckBaselines.ModelQuality != nil {
			f7f3 := &svcapitypes.DriftCheckModelQuality{}
			if resp.DriftCheckBaselines.ModelQuality.Constraints != nil {
				f7f3f0 := &svcapitypes.MetricsSource{}
				if resp.DriftCheckBaselines.ModelQuality.Constraints.ContentDigest != nil {
					f7f3f0.ContentDigest = resp.DriftCheckBaselines.ModelQuality.Constraints.ContentDigest
				}
				if resp.DriftCheckBaselines.ModelQuality.Constraints.ContentType != nil {
					f7f3f0.ContentType = resp.DriftCheckBaselines.ModelQuality.Constraints.ContentType
				}
				if resp.DriftCheckBaselines.ModelQuality.Constraints.S3Uri != nil {
					f7f3f0.S3URI = resp.DriftCheckBaselines.ModelQuality.Constraints.S3Uri
				}
				f7f3.Constraints = f7f3f0
			}
			if resp.DriftCheckBaselines.ModelQuality.Statistics != nil {
				f7f3f1 := &svcapitypes.MetricsSource{}
				if resp.DriftCheckBaselines.ModelQuality.Statistics.ContentDigest != nil {
					f7f3f1.ContentDigest = resp.DriftCheckBaselines.ModelQuality.Statistics.ContentDigest
				}
				if resp.DriftCheckBaselines.ModelQuality.Statistics.ContentType != nil {
					f7f3f1.ContentType = resp.DriftCheckBaselines.ModelQuality.Statistics.ContentType
				}
				if resp.DriftCheckBaselines.ModelQuality.Statistics.S3Uri != nil {
					f7f3f1.S3URI = resp.DriftCheckBaselines.ModelQuality.Statistics.S3Uri
				}
				f7f3.Statistics = f7f3f1
			}
			f7.ModelQuality = f7f3
		}
		ko.Spec.DriftCheckBaselines = f7
	} else {
		ko.Spec.DriftCheckBaselines = nil
	}
	if resp.InferenceSpecification != nil {
		f8 := &svcapitypes.InferenceSpecification{}
		if resp.InferenceSpecification.Containers != nil {
			f8f0 := []*svcapitypes.ModelPackageContainerDefinition{}
			for _, f8f0iter := range resp.InferenceSpecification.Containers {
				f8f0elem := &svcapitypes.ModelPackageContainerDefinition{}
				if f8f0iter.ContainerHostname != nil {
					f8f0elem.ContainerHostname = f8f0iter.ContainerHostname
				}
				if f8f0iter.Environment != nil {
					f8f0elemf1 := map[string]*string{}
					for f8f0elemf1key, f8f0elemf1valiter := range f8f0iter.Environment {
						var f8f0elemf1val string
						f8f0elemf1val = *f8f0elemf1valiter
						f8f0elemf1[f8f0elemf1key] = &f8f0elemf1val
					}
					f8f0elem.Environment = f8f0elemf1
				}
				if f8f0iter.Framework != nil {
					f8f0elem.Framework = f8f0iter.Framework
				}
				if f8f0iter.FrameworkVersion != nil {
					f8f0elem.FrameworkVersion = f8f0iter.FrameworkVersion
				}
				if f8f0iter.Image != nil {
					f8f0elem.Image = f8f0iter.Image
				}
				if f8f0iter.ImageDigest != nil {
					f8f0elem.ImageDigest = f8f0iter.ImageDigest
				}
				if f8f0iter.ModelDataUrl != nil {
					f8f0elem.ModelDataURL = f8f0iter.ModelDataUrl
				}
				if f8f0iter.ModelInput != nil {
					f8f0elemf7 := &svcapitypes.ModelInput{}
					if f8f0iter.ModelInput.DataInputConfig != nil {
						f8f0elemf7.DataInputConfig = f8f0iter.ModelInput.DataInputConfig
					}
					f8f0elem.ModelInput = f8f0elemf7
				}
				if f8f0iter.NearestModelName != nil {
					f8f0elem.NearestModelName = f8f0iter.NearestModelName
				}
				if f8f0iter.ProductId != nil {
					f8f0elem.ProductID = f8f0iter.ProductId
				}
				f8f0 = append(f8f0, f8f0elem)
			}
			f8.Containers = f8f0
		}
		if resp.InferenceSpecification.SupportedContentTypes != nil {
			f8f1 := []*string{}
			for _, f8f1iter := range resp.InferenceSpecification.SupportedContentTypes {
				var f8f1elem string
				f8f1elem = *f8f1iter
				f8f1 = append(f8f1, &f8f1elem)
			}
			f8.SupportedContentTypes = f8f1
		}
		if resp.InferenceSpecification.SupportedRealtimeInferenceInstanceTypes != nil {
			f8f2 := []*string{}
			for _, f8f2iter := range resp.InferenceSpecification.SupportedRealtimeInferenceInstanceTypes {
				var f8f2elem string
				f8f2elem = *f8f2iter
				f8f2 = append(f8f2, &f8f2elem)
			}
			f8.SupportedRealtimeInferenceInstanceTypes = f8f2
		}
		if resp.InferenceSpecification.SupportedResponseMIMETypes != nil {
			f8f3 := []*string{}
			for _, f8f3iter := range resp.InferenceSpecification.SupportedResponseMIMETypes {
				var f8f3elem string
				f8f3elem = *f8f3iter
				f8f3 = append(f8f3, &f8f3elem)
			}
			f8.SupportedResponseMIMETypes = f8f3
		}
		if resp.InferenceSpecification.SupportedTransformInstanceTypes != nil {
			f8f4 := []*string{}
			for _, f8f4iter := range resp.InferenceSpecification.SupportedTransformInstanceTypes {
				var f8f4elem string
				f8f4elem = *f8f4iter
				f8f4 = append(f8f4, &f8f4elem)
			}
			f8.SupportedTransformInstanceTypes = f8f4
		}
		ko.Spec.InferenceSpecification = f8
	} else {
		ko.Spec.InferenceSpecification = nil
	}
	if resp.LastModifiedTime != nil {
		ko.Status.LastModifiedTime = &metav1.Time{*resp.LastModifiedTime}
	} else {
		ko.Status.LastModifiedTime = nil
	}
	if resp.MetadataProperties != nil {
		f11 := &svcapitypes.MetadataProperties{}
		if resp.MetadataProperties.CommitId != nil {
			f11.CommitID = resp.MetadataProperties.CommitId
		}
		if resp.MetadataProperties.GeneratedBy != nil {
			f11.GeneratedBy = resp.MetadataProperties.GeneratedBy
		}
		if resp.MetadataProperties.ProjectId != nil {
			f11.ProjectID = resp.MetadataProperties.ProjectId
		}
		if resp.MetadataProperties.Repository != nil {
			f11.Repository = resp.MetadataProperties.Repository
		}
		ko.Spec.MetadataProperties = f11
	} else {
		ko.Spec.MetadataProperties = nil
	}
	if resp.ModelApprovalStatus != nil {
		ko.Spec.ModelApprovalStatus = resp.ModelApprovalStatus
	} else {
		ko.Spec.ModelApprovalStatus = nil
	}
	if resp.ModelMetrics != nil {
		f13 := &svcapitypes.ModelMetrics{}
		if resp.ModelMetrics.Bias != nil {
			f13f0 := &svcapitypes.Bias{}
			if resp.ModelMetrics.Bias.PostTrainingReport != nil {
				f13f0f0 := &svcapitypes.MetricsSource{}
				if resp.ModelMetrics.Bias.PostTrainingReport.ContentDigest != nil {
					f13f0f0.ContentDigest = resp.ModelMetrics.Bias.PostTrainingReport.ContentDigest
				}
				if resp.ModelMetrics.Bias.PostTrainingReport.ContentType != nil {
					f13f0f0.ContentType = resp.ModelMetrics.Bias.PostTrainingReport.ContentType
				}
				if resp.ModelMetrics.Bias.PostTrainingReport.S3Uri != nil {
					f13f0f0.S3URI = resp.ModelMetrics.Bias.PostTrainingReport.S3Uri
				}
				f13f0.PostTrainingReport = f13f0f0
			}
			if resp.ModelMetrics.Bias.PreTrainingReport != nil {
				f13f0f1 := &svcapitypes.MetricsSource{}
				if resp.ModelMetrics.Bias.PreTrainingReport.ContentDigest != nil {
					f13f0f1.ContentDigest = resp.ModelMetrics.Bias.PreTrainingReport.ContentDigest
				}
				if resp.ModelMetrics.Bias.PreTrainingReport.ContentType != nil {
					f13f0f1.ContentType = resp.ModelMetrics.Bias.PreTrainingReport.ContentType
				}
				if resp.ModelMetrics.Bias.PreTrainingReport.S3Uri != nil {
					f13f0f1.S3URI = resp.ModelMetrics.Bias.PreTrainingReport.S3Uri
				}
				f13f0.PreTrainingReport = f13f0f1
			}
			if resp.ModelMetrics.Bias.Report != nil {
				f13f0f2 := &svcapitypes.MetricsSource{}
				if resp.ModelMetrics.Bias.Report.ContentDigest != nil {
					f13f0f2.ContentDigest = resp.ModelMetrics.Bias.Report.ContentDigest
				}
				if resp.ModelMetrics.Bias.Report.ContentType != nil {
					f13f0f2.ContentType = resp.ModelMetrics.Bias.Report.ContentType
				}
				if resp.ModelMetrics.Bias.Report.S3Uri != nil {
					f13f0f2.S3URI = resp.ModelMetrics.Bias.Report.S3Uri
				}
				f13f0.Report = f13f0f2
			}
			f13.Bias = f13f0
		}
		if resp.ModelMetrics.Explainability != nil {
			f13f1 := &svcapitypes.Explainability{}
			if resp.ModelMetrics.Explainability.Report != nil {
				f13f1f0 := &svcapitypes.MetricsSource{}
				if resp.ModelMetrics.Explainability.Report.ContentDigest != nil {
					f13f1f0.ContentDigest = resp.ModelMetrics.Explainability.Report.ContentDigest
				}
				if resp.ModelMetrics.Explainability.Report.ContentType != nil {
					f13f1f0.ContentType = resp.ModelMetrics.Explainability.Report.ContentType
				}
				if resp.ModelMetrics.Explainability.Report.S3Uri != nil {
					f13f1f0.S3URI = resp.ModelMetrics.Explainability.Report.S3Uri
				}
				f13f1.Report = f13f1f0
			}
			f13.Explainability = f13f1
		}
		if resp.ModelMetrics.ModelDataQuality != nil {
			f13f2 := &svcapitypes.ModelDataQuality{}
			if resp.ModelMetrics.ModelDataQuality.Constraints != nil {
				f13f2f0 := &svcapitypes.MetricsSource{}
				if resp.ModelMetrics.ModelDataQuality.Constraints.ContentDigest != nil {
					f13f2f0.ContentDigest = resp.ModelMetrics.ModelDataQuality.Constraints.ContentDigest
				}
				if resp.ModelMetrics.ModelDataQuality.Constraints.ContentType != nil {
					f13f2f0.ContentType = resp.ModelMetrics.ModelDataQuality.Constraints.ContentType
				}
				if resp.ModelMetrics.ModelDataQuality.Constraints.S3Uri != nil {
					f13f2f0.S3URI = resp.ModelMetrics.ModelDataQuality.Constraints.S3Uri
				}
				f13f2.Constraints = f13f2f0
			}
			if resp.ModelMetrics.ModelDataQuality.Statistics != nil {
				f13f2f1 := &svcapitypes.MetricsSource{}
				if resp.ModelMetrics.ModelDataQuality.Statistics.ContentDigest != nil {
					f13f2f1.ContentDigest = resp.ModelMetrics.ModelDataQuality.Statistics.ContentDigest
				}
				if resp.ModelMetrics.ModelDataQuality.Statistics.ContentType != nil {
					f13f2f1.ContentType = resp.ModelMetrics.ModelDataQuality.Statistics.ContentType
				}
				if resp.ModelMetrics.ModelDataQuality.Statistics.S3Uri != nil {
					f13f2f1.S3URI = resp.ModelMetrics.ModelDataQuality.Statistics.S3Uri
				}
				f13f2.Statistics = f13f2f1
			}
			f13.ModelDataQuality = f13f2
		}
		if resp.ModelMetrics.ModelQuality != nil {
			f13f3 := &svcapitypes.ModelQuality{}
			if resp.ModelMetrics.ModelQuality.Constraints != nil {
				f13f3f0 := &svcapitypes.MetricsSource{}
				if resp.ModelMetrics.ModelQuality.Constraints.ContentDigest != nil {
					f13f3f0.ContentDigest = resp.ModelMetrics.ModelQuality.Constraints.ContentDigest
				}
				if resp.ModelMetrics.ModelQuality.Constraints.ContentType != nil {
					f13f3f0.ContentType = resp.ModelMetrics.ModelQuality.Constraints.ContentType
				}
				if resp.ModelMetrics.ModelQuality.Constraints.S3Uri != nil {
					f13f3f0.S3URI = resp.ModelMetrics.ModelQuality.Constraints.S3Uri
				}
				f13f3.Constraints = f13f3f0
			}
			if resp.ModelMetrics.ModelQuality.Statistics != nil {
				f13f3f1 := &svcapitypes.MetricsSource{}
				if resp.ModelMetrics.ModelQuality.Statistics.ContentDigest != nil {
					f13f3f1.ContentDigest = resp.ModelMetrics.ModelQuality.Statistics.ContentDigest
				}
				if resp.ModelMetrics.ModelQuality.Statistics.ContentType != nil {
					f13f3f1.ContentType = resp.ModelMetrics.ModelQuality.Statistics.ContentType
				}
				if resp.ModelMetrics.ModelQuality.Statistics.S3Uri != nil {
					f13f3f1.S3URI = resp.ModelMetrics.ModelQuality.Statistics.S3Uri
				}
				f13f3.Statistics = f13f3f1
			}
			f13.ModelQuality = f13f3
		}
		ko.Spec.ModelMetrics = f13
	} else {
		ko.Spec.ModelMetrics = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.ModelPackageArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.ModelPackageArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.ModelPackageDescription != nil {
		ko.Spec.ModelPackageDescription = resp.ModelPackageDescription
	} else {
		ko.Spec.ModelPackageDescription = nil
	}
	if resp.ModelPackageGroupName != nil {
		ko.Spec.ModelPackageGroupName = resp.ModelPackageGroupName
	} else {
		ko.Spec.ModelPackageGroupName = nil
	}
	if resp.ModelPackageName != nil {
		ko.Spec.ModelPackageName = resp.ModelPackageName
	} else {
		ko.Spec.ModelPackageName = nil
	}
	if resp.ModelPackageStatus != nil {
		ko.Status.ModelPackageStatus = resp.ModelPackageStatus
	} else {
		ko.Status.ModelPackageStatus = nil
	}
	if resp.ModelPackageStatusDetails != nil {
		f19 := &svcapitypes.ModelPackageStatusDetails{}
		if resp.ModelPackageStatusDetails.ImageScanStatuses != nil {
			f19f0 := []*svcapitypes.ModelPackageStatusItem{}
			for _, f19f0iter := range resp.ModelPackageStatusDetails.ImageScanStatuses {
				f19f0elem := &svcapitypes.ModelPackageStatusItem{}
				if f19f0iter.FailureReason != nil {
					f19f0elem.FailureReason = f19f0iter.FailureReason
				}
				if f19f0iter.Name != nil {
					f19f0elem.Name = f19f0iter.Name
				}
				if f19f0iter.Status != nil {
					f19f0elem.Status = f19f0iter.Status
				}
				f19f0 = append(f19f0, f19f0elem)
			}
			f19.ImageScanStatuses = f19f0
		}
		if resp.ModelPackageStatusDetails.ValidationStatuses != nil {
			f19f1 := []*svcapitypes.ModelPackageStatusItem{}
			for _, f19f1iter := range resp.ModelPackageStatusDetails.ValidationStatuses {
				f19f1elem := &svcapitypes.ModelPackageStatusItem{}
				if f19f1iter.FailureReason != nil {
					f19f1elem.FailureReason = f19f1iter.FailureReason
				}
				if f19f1iter.Name != nil {
					f19f1elem.Name = f19f1iter.Name
				}
				if f19f1iter.Status != nil {
					f19f1elem.Status = f19f1iter.Status
				}
				f19f1 = append(f19f1, f19f1elem)
			}
			f19.ValidationStatuses = f19f1
		}
		ko.Status.ModelPackageStatusDetails = f19
	} else {
		ko.Status.ModelPackageStatusDetails = nil
	}
	if resp.SamplePayloadUrl != nil {
		ko.Spec.SamplePayloadURL = resp.SamplePayloadUrl
	} else {
		ko.Spec.SamplePayloadURL = nil
	}
	if resp.SourceAlgorithmSpecification != nil {
		f22 := &svcapitypes.SourceAlgorithmSpecification{}
		if resp.SourceAlgorithmSpecification.SourceAlgorithms != nil {
			f22f0 := []*svcapitypes.SourceAlgorithm{}
			for _, f22f0iter := range resp.SourceAlgorithmSpecification.SourceAlgorithms {
				f22f0elem := &svcapitypes.SourceAlgorithm{}
				if f22f0iter.AlgorithmName != nil {
					f22f0elem.AlgorithmName = f22f0iter.AlgorithmName
				}
				if f22f0iter.ModelDataUrl != nil {
					f22f0elem.ModelDataURL = f22f0iter.ModelDataUrl
				}
				f22f0 = append(f22f0, f22f0elem)
			}
			f22.SourceAlgorithms = f22f0
		}
		ko.Spec.SourceAlgorithmSpecification = f22
	} else {
		ko.Spec.SourceAlgorithmSpecification = nil
	}
	if resp.Task != nil {
		ko.Spec.Task = resp.Task
	} else {
		ko.Spec.Task = nil
	}
	if resp.ValidationSpecification != nil {
		f24 := &svcapitypes.ModelPackageValidationSpecification{}
		if resp.ValidationSpecification.ValidationProfiles != nil {
			f24f0 := []*svcapitypes.ModelPackageValidationProfile{}
			for _, f24f0iter := range resp.ValidationSpecification.ValidationProfiles {
				f24f0elem := &svcapitypes.ModelPackageValidationProfile{}
				if f24f0iter.ProfileName != nil {
					f24f0elem.ProfileName = f24f0iter.ProfileName
				}
				if f24f0iter.TransformJobDefinition != nil {
					f24f0elemf1 := &svcapitypes.TransformJobDefinition{}
					if f24f0iter.TransformJobDefinition.BatchStrategy != nil {
						f24f0elemf1.BatchStrategy = f24f0iter.TransformJobDefinition.BatchStrategy
					}
					if f24f0iter.TransformJobDefinition.Environment != nil {
						f24f0elemf1f1 := map[string]*string{}
						for f24f0elemf1f1key, f24f0elemf1f1valiter := range f24f0iter.TransformJobDefinition.Environment {
							var f24f0elemf1f1val string
							f24f0elemf1f1val = *f24f0elemf1f1valiter
							f24f0elemf1f1[f24f0elemf1f1key] = &f24f0elemf1f1val
						}
						f24f0elemf1.Environment = f24f0elemf1f1
					}
					if f24f0iter.TransformJobDefinition.MaxConcurrentTransforms != nil {
						f24f0elemf1.MaxConcurrentTransforms = f24f0iter.TransformJobDefinition.MaxConcurrentTransforms
					}
					if f24f0iter.TransformJobDefinition.MaxPayloadInMB != nil {
						f24f0elemf1.MaxPayloadInMB = f24f0iter.TransformJobDefinition.MaxPayloadInMB
					}
					if f24f0iter.TransformJobDefinition.TransformInput != nil {
						f24f0elemf1f4 := &svcapitypes.TransformInput{}
						if f24f0iter.TransformJobDefinition.TransformInput.CompressionType != nil {
							f24f0elemf1f4.CompressionType = f24f0iter.TransformJobDefinition.TransformInput.CompressionType
						}
						if f24f0iter.TransformJobDefinition.TransformInput.ContentType != nil {
							f24f0elemf1f4.ContentType = f24f0iter.TransformJobDefinition.TransformInput.ContentType
						}
						if f24f0iter.TransformJobDefinition.TransformInput.DataSource != nil {
							f24f0elemf1f4f2 := &svcapitypes.TransformDataSource{}
							if f24f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource != nil {
								f24f0elemf1f4f2f0 := &svcapitypes.TransformS3DataSource{}
								if f24f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource.S3DataType != nil {
									f24f0elemf1f4f2f0.S3DataType = f24f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource.S3DataType
								}
								if f24f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource.S3Uri != nil {
									f24f0elemf1f4f2f0.S3URI = f24f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource.S3Uri
								}
								f24f0elemf1f4f2.S3DataSource = f24f0elemf1f4f2f0
							}
							f24f0elemf1f4.DataSource = f24f0elemf1f4f2
						}
						if f24f0iter.TransformJobDefinition.TransformInput.SplitType != nil {
							f24f0elemf1f4.SplitType = f24f0iter.TransformJobDefinition.TransformInput.SplitType
						}
						f24f0elemf1.TransformInput = f24f0elemf1f4
					}
					if f24f0iter.TransformJobDefinition.TransformOutput != nil {
						f24f0elemf1f5 := &svcapitypes.TransformOutput{}
						if f24f0iter.TransformJobDefinition.TransformOutput.Accept != nil {
							f24f0elemf1f5.Accept = f24f0iter.TransformJobDefinition.TransformOutput.Accept
						}
						if f24f0iter.TransformJobDefinition.TransformOutput.AssembleWith != nil {
							f24f0elemf1f5.AssembleWith = f24f0iter.TransformJobDefinition.TransformOutput.AssembleWith
						}
						if f24f0iter.TransformJobDefinition.TransformOutput.KmsKeyId != nil {
							f24f0elemf1f5.KMSKeyID = f24f0iter.TransformJobDefinition.TransformOutput.KmsKeyId
						}
						if f24f0iter.TransformJobDefinition.TransformOutput.S3OutputPath != nil {
							f24f0elemf1f5.S3OutputPath = f24f0iter.TransformJobDefinition.TransformOutput.S3OutputPath
						}
						f24f0elemf1.TransformOutput = f24f0elemf1f5
					}
					if f24f0iter.TransformJobDefinition.TransformResources != nil {
						f24f0elemf1f6 := &svcapitypes.TransformResources{}
						if f24f0iter.TransformJobDefinition.TransformResources.InstanceCount != nil {
							f24f0elemf1f6.InstanceCount = f24f0iter.TransformJobDefinition.TransformResources.InstanceCount
						}
						if f24f0iter.TransformJobDefinition.TransformResources.InstanceType != nil {
							f24f0elemf1f6.InstanceType = f24f0iter.TransformJobDefinition.TransformResources.InstanceType
						}
						if f24f0iter.TransformJobDefinition.TransformResources.VolumeKmsKeyId != nil {
							f24f0elemf1f6.VolumeKMSKeyID = f24f0iter.TransformJobDefinition.TransformResources.VolumeKmsKeyId
						}
						f24f0elemf1.TransformResources = f24f0elemf1f6
					}
					f24f0elem.TransformJobDefinition = f24f0elemf1
				}
				f24f0 = append(f24f0, f24f0elem)
			}
			f24.ValidationProfiles = f24f0
		}
		if resp.ValidationSpecification.ValidationRole != nil {
			f24.ValidationRole = resp.ValidationSpecification.ValidationRole
		}
		ko.Spec.ValidationSpecification = f24
	} else {
		ko.Spec.ValidationSpecification = nil
	}

	rm.setStatusDefaults(ko)
	rm.customSetOutput(&resource{ko})
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return rm.customCheckRequiredFieldsMissingMethod(r)
}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.DescribeModelPackageInput, error) {
	res := &svcsdk.DescribeModelPackageInput{}

	if r.ko.Spec.ModelPackageName != nil {
		res.SetModelPackageName(*r.ko.Spec.ModelPackageName)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateModelPackageOutput
	_ = resp
	resp, err = rm.sdkapi.CreateModelPackageWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateModelPackage", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.ModelPackageArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.ModelPackageArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateModelPackageInput, error) {
	res := &svcsdk.CreateModelPackageInput{}

	if r.ko.Spec.AdditionalInferenceSpecifications != nil {
		f0 := []*svcsdk.AdditionalInferenceSpecificationDefinition{}
		for _, f0iter := range r.ko.Spec.AdditionalInferenceSpecifications {
			f0elem := &svcsdk.AdditionalInferenceSpecificationDefinition{}
			if f0iter.Containers != nil {
				f0elemf0 := []*svcsdk.ModelPackageContainerDefinition{}
				for _, f0elemf0iter := range f0iter.Containers {
					f0elemf0elem := &svcsdk.ModelPackageContainerDefinition{}
					if f0elemf0iter.ContainerHostname != nil {
						f0elemf0elem.SetContainerHostname(*f0elemf0iter.ContainerHostname)
					}
					if f0elemf0iter.Environment != nil {
						f0elemf0elemf1 := map[string]*string{}
						for f0elemf0elemf1key, f0elemf0elemf1valiter := range f0elemf0iter.Environment {
							var f0elemf0elemf1val string
							f0elemf0elemf1val = *f0elemf0elemf1valiter
							f0elemf0elemf1[f0elemf0elemf1key] = &f0elemf0elemf1val
						}
						f0elemf0elem.SetEnvironment(f0elemf0elemf1)
					}
					if f0elemf0iter.Framework != nil {
						f0elemf0elem.SetFramework(*f0elemf0iter.Framework)
					}
					if f0elemf0iter.FrameworkVersion != nil {
						f0elemf0elem.SetFrameworkVersion(*f0elemf0iter.FrameworkVersion)
					}
					if f0elemf0iter.Image != nil {
						f0elemf0elem.SetImage(*f0elemf0iter.Image)
					}
					if f0elemf0iter.ImageDigest != nil {
						f0elemf0elem.SetImageDigest(*f0elemf0iter.ImageDigest)
					}
					if f0elemf0iter.ModelDataURL != nil {
						f0elemf0elem.SetModelDataUrl(*f0elemf0iter.ModelDataURL)
					}
					if f0elemf0iter.ModelInput != nil {
						f0elemf0elemf7 := &svcsdk.ModelInput_{}
						if f0elemf0iter.ModelInput.DataInputConfig != nil {
							f0elemf0elemf7.SetDataInputConfig(*f0elemf0iter.ModelInput.DataInputConfig)
						}
						f0elemf0elem.SetModelInput(f0elemf0elemf7)
					}
					if f0elemf0iter.NearestModelName != nil {
						f0elemf0elem.SetNearestModelName(*f0elemf0iter.NearestModelName)
					}
					if f0elemf0iter.ProductID != nil {
						f0elemf0elem.SetProductId(*f0elemf0iter.ProductID)
					}
					f0elemf0 = append(f0elemf0, f0elemf0elem)
				}
				f0elem.SetContainers(f0elemf0)
			}
			if f0iter.Description != nil {
				f0elem.SetDescription(*f0iter.Description)
			}
			if f0iter.Name != nil {
				f0elem.SetName(*f0iter.Name)
			}
			if f0iter.SupportedContentTypes != nil {
				f0elemf3 := []*string{}
				for _, f0elemf3iter := range f0iter.SupportedContentTypes {
					var f0elemf3elem string
					f0elemf3elem = *f0elemf3iter
					f0elemf3 = append(f0elemf3, &f0elemf3elem)
				}
				f0elem.SetSupportedContentTypes(f0elemf3)
			}
			if f0iter.SupportedRealtimeInferenceInstanceTypes != nil {
				f0elemf4 := []*string{}
				for _, f0elemf4iter := range f0iter.SupportedRealtimeInferenceInstanceTypes {
					var f0elemf4elem string
					f0elemf4elem = *f0elemf4iter
					f0elemf4 = append(f0elemf4, &f0elemf4elem)
				}
				f0elem.SetSupportedRealtimeInferenceInstanceTypes(f0elemf4)
			}
			if f0iter.SupportedResponseMIMETypes != nil {
				f0elemf5 := []*string{}
				for _, f0elemf5iter := range f0iter.SupportedResponseMIMETypes {
					var f0elemf5elem string
					f0elemf5elem = *f0elemf5iter
					f0elemf5 = append(f0elemf5, &f0elemf5elem)
				}
				f0elem.SetSupportedResponseMIMETypes(f0elemf5)
			}
			if f0iter.SupportedTransformInstanceTypes != nil {
				f0elemf6 := []*string{}
				for _, f0elemf6iter := range f0iter.SupportedTransformInstanceTypes {
					var f0elemf6elem string
					f0elemf6elem = *f0elemf6iter
					f0elemf6 = append(f0elemf6, &f0elemf6elem)
				}
				f0elem.SetSupportedTransformInstanceTypes(f0elemf6)
			}
			f0 = append(f0, f0elem)
		}
		res.SetAdditionalInferenceSpecifications(f0)
	}
	if r.ko.Spec.CertifyForMarketplace != nil {
		res.SetCertifyForMarketplace(*r.ko.Spec.CertifyForMarketplace)
	}
	if r.ko.Spec.ClientToken != nil {
		res.SetClientToken(*r.ko.Spec.ClientToken)
	}
	if r.ko.Spec.CustomerMetadataProperties != nil {
		f3 := map[string]*string{}
		for f3key, f3valiter := range r.ko.Spec.CustomerMetadataProperties {
			var f3val string
			f3val = *f3valiter
			f3[f3key] = &f3val
		}
		res.SetCustomerMetadataProperties(f3)
	}
	if r.ko.Spec.Domain != nil {
		res.SetDomain(*r.ko.Spec.Domain)
	}
	if r.ko.Spec.DriftCheckBaselines != nil {
		f5 := &svcsdk.DriftCheckBaselines{}
		if r.ko.Spec.DriftCheckBaselines.Bias != nil {
			f5f0 := &svcsdk.DriftCheckBias{}
			if r.ko.Spec.DriftCheckBaselines.Bias.ConfigFile != nil {
				f5f0f0 := &svcsdk.FileSource{}
				if r.ko.Spec.DriftCheckBaselines.Bias.ConfigFile.ContentDigest != nil {
					f5f0f0.SetContentDigest(*r.ko.Spec.DriftCheckBaselines.Bias.ConfigFile.ContentDigest)
				}
				if r.ko.Spec.DriftCheckBaselines.Bias.ConfigFile.ContentType != nil {
					f5f0f0.SetContentType(*r.ko.Spec.DriftCheckBaselines.Bias.ConfigFile.ContentType)
				}
				if r.ko.Spec.DriftCheckBaselines.Bias.ConfigFile.S3URI != nil {
					f5f0f0.SetS3Uri(*r.ko.Spec.DriftCheckBaselines.Bias.ConfigFile.S3URI)
				}
				f5f0.SetConfigFile(f5f0f0)
			}
			if r.ko.Spec.DriftCheckBaselines.Bias.PostTrainingConstraints != nil {
				f5f0f1 := &svcsdk.MetricsSource{}
				if r.ko.Spec.DriftCheckBaselines.Bias.PostTrainingConstraints.ContentDigest != nil {
					f5f0f1.SetContentDigest(*r.ko.Spec.DriftCheckBaselines.Bias.PostTrainingConstraints.ContentDigest)
				}
				if r.ko.Spec.DriftCheckBaselines.Bias.PostTrainingConstraints.ContentType != nil {
					f5f0f1.SetContentType(*r.ko.Spec.DriftCheckBaselines.Bias.PostTrainingConstraints.ContentType)
				}
				if r.ko.Spec.DriftCheckBaselines.Bias.PostTrainingConstraints.S3URI != nil {
					f5f0f1.SetS3Uri(*r.ko.Spec.DriftCheckBaselines.Bias.PostTrainingConstraints.S3URI)
				}
				f5f0.SetPostTrainingConstraints(f5f0f1)
			}
			if r.ko.Spec.DriftCheckBaselines.Bias.PreTrainingConstraints != nil {
				f5f0f2 := &svcsdk.MetricsSource{}
				if r.ko.Spec.DriftCheckBaselines.Bias.PreTrainingConstraints.ContentDigest != nil {
					f5f0f2.SetContentDigest(*r.ko.Spec.DriftCheckBaselines.Bias.PreTrainingConstraints.ContentDigest)
				}
				if r.ko.Spec.DriftCheckBaselines.Bias.PreTrainingConstraints.ContentType != nil {
					f5f0f2.SetContentType(*r.ko.Spec.DriftCheckBaselines.Bias.PreTrainingConstraints.ContentType)
				}
				if r.ko.Spec.DriftCheckBaselines.Bias.PreTrainingConstraints.S3URI != nil {
					f5f0f2.SetS3Uri(*r.ko.Spec.DriftCheckBaselines.Bias.PreTrainingConstraints.S3URI)
				}
				f5f0.SetPreTrainingConstraints(f5f0f2)
			}
			f5.SetBias(f5f0)
		}
		if r.ko.Spec.DriftCheckBaselines.Explainability != nil {
			f5f1 := &svcsdk.DriftCheckExplainability{}
			if r.ko.Spec.DriftCheckBaselines.Explainability.ConfigFile != nil {
				f5f1f0 := &svcsdk.FileSource{}
				if r.ko.Spec.DriftCheckBaselines.Explainability.ConfigFile.ContentDigest != nil {
					f5f1f0.SetContentDigest(*r.ko.Spec.DriftCheckBaselines.Explainability.ConfigFile.ContentDigest)
				}
				if r.ko.Spec.DriftCheckBaselines.Explainability.ConfigFile.ContentType != nil {
					f5f1f0.SetContentType(*r.ko.Spec.DriftCheckBaselines.Explainability.ConfigFile.ContentType)
				}
				if r.ko.Spec.DriftCheckBaselines.Explainability.ConfigFile.S3URI != nil {
					f5f1f0.SetS3Uri(*r.ko.Spec.DriftCheckBaselines.Explainability.ConfigFile.S3URI)
				}
				f5f1.SetConfigFile(f5f1f0)
			}
			if r.ko.Spec.DriftCheckBaselines.Explainability.Constraints != nil {
				f5f1f1 := &svcsdk.MetricsSource{}
				if r.ko.Spec.DriftCheckBaselines.Explainability.Constraints.ContentDigest != nil {
					f5f1f1.SetContentDigest(*r.ko.Spec.DriftCheckBaselines.Explainability.Constraints.ContentDigest)
				}
				if r.ko.Spec.DriftCheckBaselines.Explainability.Constraints.ContentType != nil {
					f5f1f1.SetContentType(*r.ko.Spec.DriftCheckBaselines.Explainability.Constraints.ContentType)
				}
				if r.ko.Spec.DriftCheckBaselines.Explainability.Constraints.S3URI != nil {
					f5f1f1.SetS3Uri(*r.ko.Spec.DriftCheckBaselines.Explainability.Constraints.S3URI)
				}
				f5f1.SetConstraints(f5f1f1)
			}
			f5.SetExplainability(f5f1)
		}
		if r.ko.Spec.DriftCheckBaselines.ModelDataQuality != nil {
			f5f2 := &svcsdk.DriftCheckModelDataQuality{}
			if r.ko.Spec.DriftCheckBaselines.ModelDataQuality.Constraints != nil {
				f5f2f0 := &svcsdk.MetricsSource{}
				if r.ko.Spec.DriftCheckBaselines.ModelDataQuality.Constraints.ContentDigest != nil {
					f5f2f0.SetContentDigest(*r.ko.Spec.DriftCheckBaselines.ModelDataQuality.Constraints.ContentDigest)
				}
				if r.ko.Spec.DriftCheckBaselines.ModelDataQuality.Constraints.ContentType != nil {
					f5f2f0.SetContentType(*r.ko.Spec.DriftCheckBaselines.ModelDataQuality.Constraints.ContentType)
				}
				if r.ko.Spec.DriftCheckBaselines.ModelDataQuality.Constraints.S3URI != nil {
					f5f2f0.SetS3Uri(*r.ko.Spec.DriftCheckBaselines.ModelDataQuality.Constraints.S3URI)
				}
				f5f2.SetConstraints(f5f2f0)
			}
			if r.ko.Spec.DriftCheckBaselines.ModelDataQuality.Statistics != nil {
				f5f2f1 := &svcsdk.MetricsSource{}
				if r.ko.Spec.DriftCheckBaselines.ModelDataQuality.Statistics.ContentDigest != nil {
					f5f2f1.SetContentDigest(*r.ko.Spec.DriftCheckBaselines.ModelDataQuality.Statistics.ContentDigest)
				}
				if r.ko.Spec.DriftCheckBaselines.ModelDataQuality.Statistics.ContentType != nil {
					f5f2f1.SetContentType(*r.ko.Spec.DriftCheckBaselines.ModelDataQuality.Statistics.ContentType)
				}
				if r.ko.Spec.DriftCheckBaselines.ModelDataQuality.Statistics.S3URI != nil {
					f5f2f1.SetS3Uri(*r.ko.Spec.DriftCheckBaselines.ModelDataQuality.Statistics.S3URI)
				}
				f5f2.SetStatistics(f5f2f1)
			}
			f5.SetModelDataQuality(f5f2)
		}
		if r.ko.Spec.DriftCheckBaselines.ModelQuality != nil {
			f5f3 := &svcsdk.DriftCheckModelQuality{}
			if r.ko.Spec.DriftCheckBaselines.ModelQuality.Constraints != nil {
				f5f3f0 := &svcsdk.MetricsSource{}
				if r.ko.Spec.DriftCheckBaselines.ModelQuality.Constraints.ContentDigest != nil {
					f5f3f0.SetContentDigest(*r.ko.Spec.DriftCheckBaselines.ModelQuality.Constraints.ContentDigest)
				}
				if r.ko.Spec.DriftCheckBaselines.ModelQuality.Constraints.ContentType != nil {
					f5f3f0.SetContentType(*r.ko.Spec.DriftCheckBaselines.ModelQuality.Constraints.ContentType)
				}
				if r.ko.Spec.DriftCheckBaselines.ModelQuality.Constraints.S3URI != nil {
					f5f3f0.SetS3Uri(*r.ko.Spec.DriftCheckBaselines.ModelQuality.Constraints.S3URI)
				}
				f5f3.SetConstraints(f5f3f0)
			}
			if r.ko.Spec.DriftCheckBaselines.ModelQuality.Statistics != nil {
				f5f3f1 := &svcsdk.MetricsSource{}
				if r.ko.Spec.DriftCheckBaselines.ModelQuality.Statistics.ContentDigest != nil {
					f5f3f1.SetContentDigest(*r.ko.Spec.DriftCheckBaselines.ModelQuality.Statistics.ContentDigest)
				}
				if r.ko.Spec.DriftCheckBaselines.ModelQuality.Statistics.ContentType != nil {
					f5f3f1.SetContentType(*r.ko.Spec.DriftCheckBaselines.ModelQuality.Statistics.ContentType)
				}
				if r.ko.Spec.DriftCheckBaselines.ModelQuality.Statistics.S3URI != nil {
					f5f3f1.SetS3Uri(*r.ko.Spec.DriftCheckBaselines.ModelQuality.Statistics.S3URI)
				}
				f5f3.SetStatistics(f5f3f1)
			}
			f5.SetModelQuality(f5f3)
		}
		res.SetDriftCheckBaselines(f5)
	}
	if r.ko.Spec.InferenceSpecification != nil {
		f6 := &svcsdk.InferenceSpecification{}
		if r.ko.Spec.InferenceSpecification.Containers != nil {
			f6f0 := []*svcsdk.ModelPackageContainerDefinition{}
			for _, f6f0iter := range r.ko.Spec.InferenceSpecification.Containers {
				f6f0elem := &svcsdk.ModelPackageContainerDefinition{}
				if f6f0iter.ContainerHostname != nil {
					f6f0elem.SetContainerHostname(*f6f0iter.ContainerHostname)
				}
				if f6f0iter.Environment != nil {
					f6f0elemf1 := map[string]*string{}
					for f6f0elemf1key, f6f0elemf1valiter := range f6f0iter.Environment {
						var f6f0elemf1val string
						f6f0elemf1val = *f6f0elemf1valiter
						f6f0elemf1[f6f0elemf1key] = &f6f0elemf1val
					}
					f6f0elem.SetEnvironment(f6f0elemf1)
				}
				if f6f0iter.Framework != nil {
					f6f0elem.SetFramework(*f6f0iter.Framework)
				}
				if f6f0iter.FrameworkVersion != nil {
					f6f0elem.SetFrameworkVersion(*f6f0iter.FrameworkVersion)
				}
				if f6f0iter.Image != nil {
					f6f0elem.SetImage(*f6f0iter.Image)
				}
				if f6f0iter.ImageDigest != nil {
					f6f0elem.SetImageDigest(*f6f0iter.ImageDigest)
				}
				if f6f0iter.ModelDataURL != nil {
					f6f0elem.SetModelDataUrl(*f6f0iter.ModelDataURL)
				}
				if f6f0iter.ModelInput != nil {
					f6f0elemf7 := &svcsdk.ModelInput_{}
					if f6f0iter.ModelInput.DataInputConfig != nil {
						f6f0elemf7.SetDataInputConfig(*f6f0iter.ModelInput.DataInputConfig)
					}
					f6f0elem.SetModelInput(f6f0elemf7)
				}
				if f6f0iter.NearestModelName != nil {
					f6f0elem.SetNearestModelName(*f6f0iter.NearestModelName)
				}
				if f6f0iter.ProductID != nil {
					f6f0elem.SetProductId(*f6f0iter.ProductID)
				}
				f6f0 = append(f6f0, f6f0elem)
			}
			f6.SetContainers(f6f0)
		}
		if r.ko.Spec.InferenceSpecification.SupportedContentTypes != nil {
			f6f1 := []*string{}
			for _, f6f1iter := range r.ko.Spec.InferenceSpecification.SupportedContentTypes {
				var f6f1elem string
				f6f1elem = *f6f1iter
				f6f1 = append(f6f1, &f6f1elem)
			}
			f6.SetSupportedContentTypes(f6f1)
		}
		if r.ko.Spec.InferenceSpecification.SupportedRealtimeInferenceInstanceTypes != nil {
			f6f2 := []*string{}
			for _, f6f2iter := range r.ko.Spec.InferenceSpecification.SupportedRealtimeInferenceInstanceTypes {
				var f6f2elem string
				f6f2elem = *f6f2iter
				f6f2 = append(f6f2, &f6f2elem)
			}
			f6.SetSupportedRealtimeInferenceInstanceTypes(f6f2)
		}
		if r.ko.Spec.InferenceSpecification.SupportedResponseMIMETypes != nil {
			f6f3 := []*string{}
			for _, f6f3iter := range r.ko.Spec.InferenceSpecification.SupportedResponseMIMETypes {
				var f6f3elem string
				f6f3elem = *f6f3iter
				f6f3 = append(f6f3, &f6f3elem)
			}
			f6.SetSupportedResponseMIMETypes(f6f3)
		}
		if r.ko.Spec.InferenceSpecification.SupportedTransformInstanceTypes != nil {
			f6f4 := []*string{}
			for _, f6f4iter := range r.ko.Spec.InferenceSpecification.SupportedTransformInstanceTypes {
				var f6f4elem string
				f6f4elem = *f6f4iter
				f6f4 = append(f6f4, &f6f4elem)
			}
			f6.SetSupportedTransformInstanceTypes(f6f4)
		}
		res.SetInferenceSpecification(f6)
	}
	if r.ko.Spec.MetadataProperties != nil {
		f7 := &svcsdk.MetadataProperties{}
		if r.ko.Spec.MetadataProperties.CommitID != nil {
			f7.SetCommitId(*r.ko.Spec.MetadataProperties.CommitID)
		}
		if r.ko.Spec.MetadataProperties.GeneratedBy != nil {
			f7.SetGeneratedBy(*r.ko.Spec.MetadataProperties.GeneratedBy)
		}
		if r.ko.Spec.MetadataProperties.ProjectID != nil {
			f7.SetProjectId(*r.ko.Spec.MetadataProperties.ProjectID)
		}
		if r.ko.Spec.MetadataProperties.Repository != nil {
			f7.SetRepository(*r.ko.Spec.MetadataProperties.Repository)
		}
		res.SetMetadataProperties(f7)
	}
	if r.ko.Spec.ModelApprovalStatus != nil {
		res.SetModelApprovalStatus(*r.ko.Spec.ModelApprovalStatus)
	}
	if r.ko.Spec.ModelMetrics != nil {
		f9 := &svcsdk.ModelMetrics{}
		if r.ko.Spec.ModelMetrics.Bias != nil {
			f9f0 := &svcsdk.Bias{}
			if r.ko.Spec.ModelMetrics.Bias.PostTrainingReport != nil {
				f9f0f0 := &svcsdk.MetricsSource{}
				if r.ko.Spec.ModelMetrics.Bias.PostTrainingReport.ContentDigest != nil {
					f9f0f0.SetContentDigest(*r.ko.Spec.ModelMetrics.Bias.PostTrainingReport.ContentDigest)
				}
				if r.ko.Spec.ModelMetrics.Bias.PostTrainingReport.ContentType != nil {
					f9f0f0.SetContentType(*r.ko.Spec.ModelMetrics.Bias.PostTrainingReport.ContentType)
				}
				if r.ko.Spec.ModelMetrics.Bias.PostTrainingReport.S3URI != nil {
					f9f0f0.SetS3Uri(*r.ko.Spec.ModelMetrics.Bias.PostTrainingReport.S3URI)
				}
				f9f0.SetPostTrainingReport(f9f0f0)
			}
			if r.ko.Spec.ModelMetrics.Bias.PreTrainingReport != nil {
				f9f0f1 := &svcsdk.MetricsSource{}
				if r.ko.Spec.ModelMetrics.Bias.PreTrainingReport.ContentDigest != nil {
					f9f0f1.SetContentDigest(*r.ko.Spec.ModelMetrics.Bias.PreTrainingReport.ContentDigest)
				}
				if r.ko.Spec.ModelMetrics.Bias.PreTrainingReport.ContentType != nil {
					f9f0f1.SetContentType(*r.ko.Spec.ModelMetrics.Bias.PreTrainingReport.ContentType)
				}
				if r.ko.Spec.ModelMetrics.Bias.PreTrainingReport.S3URI != nil {
					f9f0f1.SetS3Uri(*r.ko.Spec.ModelMetrics.Bias.PreTrainingReport.S3URI)
				}
				f9f0.SetPreTrainingReport(f9f0f1)
			}
			if r.ko.Spec.ModelMetrics.Bias.Report != nil {
				f9f0f2 := &svcsdk.MetricsSource{}
				if r.ko.Spec.ModelMetrics.Bias.Report.ContentDigest != nil {
					f9f0f2.SetContentDigest(*r.ko.Spec.ModelMetrics.Bias.Report.ContentDigest)
				}
				if r.ko.Spec.ModelMetrics.Bias.Report.ContentType != nil {
					f9f0f2.SetContentType(*r.ko.Spec.ModelMetrics.Bias.Report.ContentType)
				}
				if r.ko.Spec.ModelMetrics.Bias.Report.S3URI != nil {
					f9f0f2.SetS3Uri(*r.ko.Spec.ModelMetrics.Bias.Report.S3URI)
				}
				f9f0.SetReport(f9f0f2)
			}
			f9.SetBias(f9f0)
		}
		if r.ko.Spec.ModelMetrics.Explainability != nil {
			f9f1 := &svcsdk.Explainability{}
			if r.ko.Spec.ModelMetrics.Explainability.Report != nil {
				f9f1f0 := &svcsdk.MetricsSource{}
				if r.ko.Spec.ModelMetrics.Explainability.Report.ContentDigest != nil {
					f9f1f0.SetContentDigest(*r.ko.Spec.ModelMetrics.Explainability.Report.ContentDigest)
				}
				if r.ko.Spec.ModelMetrics.Explainability.Report.ContentType != nil {
					f9f1f0.SetContentType(*r.ko.Spec.ModelMetrics.Explainability.Report.ContentType)
				}
				if r.ko.Spec.ModelMetrics.Explainability.Report.S3URI != nil {
					f9f1f0.SetS3Uri(*r.ko.Spec.ModelMetrics.Explainability.Report.S3URI)
				}
				f9f1.SetReport(f9f1f0)
			}
			f9.SetExplainability(f9f1)
		}
		if r.ko.Spec.ModelMetrics.ModelDataQuality != nil {
			f9f2 := &svcsdk.ModelDataQuality{}
			if r.ko.Spec.ModelMetrics.ModelDataQuality.Constraints != nil {
				f9f2f0 := &svcsdk.MetricsSource{}
				if r.ko.Spec.ModelMetrics.ModelDataQuality.Constraints.ContentDigest != nil {
					f9f2f0.SetContentDigest(*r.ko.Spec.ModelMetrics.ModelDataQuality.Constraints.ContentDigest)
				}
				if r.ko.Spec.ModelMetrics.ModelDataQuality.Constraints.ContentType != nil {
					f9f2f0.SetContentType(*r.ko.Spec.ModelMetrics.ModelDataQuality.Constraints.ContentType)
				}
				if r.ko.Spec.ModelMetrics.ModelDataQuality.Constraints.S3URI != nil {
					f9f2f0.SetS3Uri(*r.ko.Spec.ModelMetrics.ModelDataQuality.Constraints.S3URI)
				}
				f9f2.SetConstraints(f9f2f0)
			}
			if r.ko.Spec.ModelMetrics.ModelDataQuality.Statistics != nil {
				f9f2f1 := &svcsdk.MetricsSource{}
				if r.ko.Spec.ModelMetrics.ModelDataQuality.Statistics.ContentDigest != nil {
					f9f2f1.SetContentDigest(*r.ko.Spec.ModelMetrics.ModelDataQuality.Statistics.ContentDigest)
				}
				if r.ko.Spec.ModelMetrics.ModelDataQuality.Statistics.ContentType != nil {
					f9f2f1.SetContentType(*r.ko.Spec.ModelMetrics.ModelDataQuality.Statistics.ContentType)
				}
				if r.ko.Spec.ModelMetrics.ModelDataQuality.Statistics.S3URI != nil {
					f9f2f1.SetS3Uri(*r.ko.Spec.ModelMetrics.ModelDataQuality.Statistics.S3URI)
				}
				f9f2.SetStatistics(f9f2f1)
			}
			f9.SetModelDataQuality(f9f2)
		}
		if r.ko.Spec.ModelMetrics.ModelQuality != nil {
			f9f3 := &svcsdk.ModelQuality{}
			if r.ko.Spec.ModelMetrics.ModelQuality.Constraints != nil {
				f9f3f0 := &svcsdk.MetricsSource{}
				if r.ko.Spec.ModelMetrics.ModelQuality.Constraints.ContentDigest != nil {
					f9f3f0.SetContentDigest(*r.ko.Spec.ModelMetrics.ModelQuality.Constraints.ContentDigest)
				}
				if r.ko.Spec.ModelMetrics.ModelQuality.Constraints.ContentType != nil {
					f9f3f0.SetContentType(*r.ko.Spec.ModelMetrics.ModelQuality.Constraints.ContentType)
				}
				if r.ko.Spec.ModelMetrics.ModelQuality.Constraints.S3URI != nil {
					f9f3f0.SetS3Uri(*r.ko.Spec.ModelMetrics.ModelQuality.Constraints.S3URI)
				}
				f9f3.SetConstraints(f9f3f0)
			}
			if r.ko.Spec.ModelMetrics.ModelQuality.Statistics != nil {
				f9f3f1 := &svcsdk.MetricsSource{}
				if r.ko.Spec.ModelMetrics.ModelQuality.Statistics.ContentDigest != nil {
					f9f3f1.SetContentDigest(*r.ko.Spec.ModelMetrics.ModelQuality.Statistics.ContentDigest)
				}
				if r.ko.Spec.ModelMetrics.ModelQuality.Statistics.ContentType != nil {
					f9f3f1.SetContentType(*r.ko.Spec.ModelMetrics.ModelQuality.Statistics.ContentType)
				}
				if r.ko.Spec.ModelMetrics.ModelQuality.Statistics.S3URI != nil {
					f9f3f1.SetS3Uri(*r.ko.Spec.ModelMetrics.ModelQuality.Statistics.S3URI)
				}
				f9f3.SetStatistics(f9f3f1)
			}
			f9.SetModelQuality(f9f3)
		}
		res.SetModelMetrics(f9)
	}
	if r.ko.Spec.ModelPackageDescription != nil {
		res.SetModelPackageDescription(*r.ko.Spec.ModelPackageDescription)
	}
	if r.ko.Spec.ModelPackageGroupName != nil {
		res.SetModelPackageGroupName(*r.ko.Spec.ModelPackageGroupName)
	}
	if r.ko.Spec.ModelPackageName != nil {
		res.SetModelPackageName(*r.ko.Spec.ModelPackageName)
	}
	if r.ko.Spec.SamplePayloadURL != nil {
		res.SetSamplePayloadUrl(*r.ko.Spec.SamplePayloadURL)
	}
	if r.ko.Spec.SourceAlgorithmSpecification != nil {
		f14 := &svcsdk.SourceAlgorithmSpecification{}
		if r.ko.Spec.SourceAlgorithmSpecification.SourceAlgorithms != nil {
			f14f0 := []*svcsdk.SourceAlgorithm{}
			for _, f14f0iter := range r.ko.Spec.SourceAlgorithmSpecification.SourceAlgorithms {
				f14f0elem := &svcsdk.SourceAlgorithm{}
				if f14f0iter.AlgorithmName != nil {
					f14f0elem.SetAlgorithmName(*f14f0iter.AlgorithmName)
				}
				if f14f0iter.ModelDataURL != nil {
					f14f0elem.SetModelDataUrl(*f14f0iter.ModelDataURL)
				}
				f14f0 = append(f14f0, f14f0elem)
			}
			f14.SetSourceAlgorithms(f14f0)
		}
		res.SetSourceAlgorithmSpecification(f14)
	}
	if r.ko.Spec.Tags != nil {
		f15 := []*svcsdk.Tag{}
		for _, f15iter := range r.ko.Spec.Tags {
			f15elem := &svcsdk.Tag{}
			if f15iter.Key != nil {
				f15elem.SetKey(*f15iter.Key)
			}
			if f15iter.Value != nil {
				f15elem.SetValue(*f15iter.Value)
			}
			f15 = append(f15, f15elem)
		}
		res.SetTags(f15)
	}
	if r.ko.Spec.Task != nil {
		res.SetTask(*r.ko.Spec.Task)
	}
	if r.ko.Spec.ValidationSpecification != nil {
		f17 := &svcsdk.ModelPackageValidationSpecification{}
		if r.ko.Spec.ValidationSpecification.ValidationProfiles != nil {
			f17f0 := []*svcsdk.ModelPackageValidationProfile{}
			for _, f17f0iter := range r.ko.Spec.ValidationSpecification.ValidationProfiles {
				f17f0elem := &svcsdk.ModelPackageValidationProfile{}
				if f17f0iter.ProfileName != nil {
					f17f0elem.SetProfileName(*f17f0iter.ProfileName)
				}
				if f17f0iter.TransformJobDefinition != nil {
					f17f0elemf1 := &svcsdk.TransformJobDefinition{}
					if f17f0iter.TransformJobDefinition.BatchStrategy != nil {
						f17f0elemf1.SetBatchStrategy(*f17f0iter.TransformJobDefinition.BatchStrategy)
					}
					if f17f0iter.TransformJobDefinition.Environment != nil {
						f17f0elemf1f1 := map[string]*string{}
						for f17f0elemf1f1key, f17f0elemf1f1valiter := range f17f0iter.TransformJobDefinition.Environment {
							var f17f0elemf1f1val string
							f17f0elemf1f1val = *f17f0elemf1f1valiter
							f17f0elemf1f1[f17f0elemf1f1key] = &f17f0elemf1f1val
						}
						f17f0elemf1.SetEnvironment(f17f0elemf1f1)
					}
					if f17f0iter.TransformJobDefinition.MaxConcurrentTransforms != nil {
						f17f0elemf1.SetMaxConcurrentTransforms(*f17f0iter.TransformJobDefinition.MaxConcurrentTransforms)
					}
					if f17f0iter.TransformJobDefinition.MaxPayloadInMB != nil {
						f17f0elemf1.SetMaxPayloadInMB(*f17f0iter.TransformJobDefinition.MaxPayloadInMB)
					}
					if f17f0iter.TransformJobDefinition.TransformInput != nil {
						f17f0elemf1f4 := &svcsdk.TransformInput{}
						if f17f0iter.TransformJobDefinition.TransformInput.CompressionType != nil {
							f17f0elemf1f4.SetCompressionType(*f17f0iter.TransformJobDefinition.TransformInput.CompressionType)
						}
						if f17f0iter.TransformJobDefinition.TransformInput.ContentType != nil {
							f17f0elemf1f4.SetContentType(*f17f0iter.TransformJobDefinition.TransformInput.ContentType)
						}
						if f17f0iter.TransformJobDefinition.TransformInput.DataSource != nil {
							f17f0elemf1f4f2 := &svcsdk.TransformDataSource{}
							if f17f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource != nil {
								f17f0elemf1f4f2f0 := &svcsdk.TransformS3DataSource{}
								if f17f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource.S3DataType != nil {
									f17f0elemf1f4f2f0.SetS3DataType(*f17f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource.S3DataType)
								}
								if f17f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource.S3URI != nil {
									f17f0elemf1f4f2f0.SetS3Uri(*f17f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource.S3URI)
								}
								f17f0elemf1f4f2.SetS3DataSource(f17f0elemf1f4f2f0)
							}
							f17f0elemf1f4.SetDataSource(f17f0elemf1f4f2)
						}
						if f17f0iter.TransformJobDefinition.TransformInput.SplitType != nil {
							f17f0elemf1f4.SetSplitType(*f17f0iter.TransformJobDefinition.TransformInput.SplitType)
						}
						f17f0elemf1.SetTransformInput(f17f0elemf1f4)
					}
					if f17f0iter.TransformJobDefinition.TransformOutput != nil {
						f17f0elemf1f5 := &svcsdk.TransformOutput{}
						if f17f0iter.TransformJobDefinition.TransformOutput.Accept != nil {
							f17f0elemf1f5.SetAccept(*f17f0iter.TransformJobDefinition.TransformOutput.Accept)
						}
						if f17f0iter.TransformJobDefinition.TransformOutput.AssembleWith != nil {
							f17f0elemf1f5.SetAssembleWith(*f17f0iter.TransformJobDefinition.TransformOutput.AssembleWith)
						}
						if f17f0iter.TransformJobDefinition.TransformOutput.KMSKeyID != nil {
							f17f0elemf1f5.SetKmsKeyId(*f17f0iter.TransformJobDefinition.TransformOutput.KMSKeyID)
						}
						if f17f0iter.TransformJobDefinition.TransformOutput.S3OutputPath != nil {
							f17f0elemf1f5.SetS3OutputPath(*f17f0iter.TransformJobDefinition.TransformOutput.S3OutputPath)
						}
						f17f0elemf1.SetTransformOutput(f17f0elemf1f5)
					}
					if f17f0iter.TransformJobDefinition.TransformResources != nil {
						f17f0elemf1f6 := &svcsdk.TransformResources{}
						if f17f0iter.TransformJobDefinition.TransformResources.InstanceCount != nil {
							f17f0elemf1f6.SetInstanceCount(*f17f0iter.TransformJobDefinition.TransformResources.InstanceCount)
						}
						if f17f0iter.TransformJobDefinition.TransformResources.InstanceType != nil {
							f17f0elemf1f6.SetInstanceType(*f17f0iter.TransformJobDefinition.TransformResources.InstanceType)
						}
						if f17f0iter.TransformJobDefinition.TransformResources.VolumeKMSKeyID != nil {
							f17f0elemf1f6.SetVolumeKmsKeyId(*f17f0iter.TransformJobDefinition.TransformResources.VolumeKMSKeyID)
						}
						f17f0elemf1.SetTransformResources(f17f0elemf1f6)
					}
					f17f0elem.SetTransformJobDefinition(f17f0elemf1)
				}
				f17f0 = append(f17f0, f17f0elem)
			}
			f17.SetValidationProfiles(f17f0)
		}
		if r.ko.Spec.ValidationSpecification.ValidationRole != nil {
			f17.SetValidationRole(*r.ko.Spec.ValidationSpecification.ValidationRole)
		}
		res.SetValidationSpecification(f17)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	if err = rm.requeueUntilCanModify(ctx, latest); err != nil {
		return nil, err
	}
	input, err := rm.newUpdateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.UpdateModelPackageOutput
	_ = resp
	resp, err = rm.sdkapi.UpdateModelPackageWithContext(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdateModelPackage", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.ModelPackageArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.ModelPackageArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	rm.setStatusDefaults(ko)
	rm.customSetOutput(&resource{ko})
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.UpdateModelPackageInput, error) {
	res := &svcsdk.UpdateModelPackageInput{}

	if r.ko.Spec.ApprovalDescription != nil {
		res.SetApprovalDescription(*r.ko.Spec.ApprovalDescription)
	}
	if r.ko.Spec.CustomerMetadataProperties != nil {
		f2 := map[string]*string{}
		for f2key, f2valiter := range r.ko.Spec.CustomerMetadataProperties {
			var f2val string
			f2val = *f2valiter
			f2[f2key] = &f2val
		}
		res.SetCustomerMetadataProperties(f2)
	}
	if r.ko.Spec.ModelApprovalStatus != nil {
		res.SetModelApprovalStatus(*r.ko.Spec.ModelApprovalStatus)
	}
	if r.ko.Status.ACKResourceMetadata != nil && r.ko.Status.ACKResourceMetadata.ARN != nil {
		res.SetModelPackageArn(string(*r.ko.Status.ACKResourceMetadata.ARN))
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	if err = rm.requeueUntilCanModify(ctx, r); err != nil {
		return r, err
	}

	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	// If ModelPackageName not set after newRequestPayload, attempt to use ARN
	// This is because versioned modelpackage uses ARN not name
	if input.ModelPackageName == nil {
		arn := r.Identifiers().ARN()
		if arn == nil {
			return nil, ackerr.NotFound
		}
		input.SetModelPackageName(string(*arn))
	}
	var resp *svcsdk.DeleteModelPackageOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteModelPackageWithContext(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteModelPackage", err)

	if err == nil {
		if observed, err := rm.sdkFind(ctx, r); err != ackerr.NotFound {
			if err != nil {
				return nil, err
			}
			r.SetStatus(observed)
			return r, requeueWaitWhileDeleting
		}
	}

	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteModelPackageInput, error) {
	res := &svcsdk.DeleteModelPackageInput{}

	if r.ko.Spec.ModelPackageName != nil {
		res.SetModelPackageName(*r.ko.Spec.ModelPackageName)
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.ModelPackage,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	// custom update conditions
	customUpdate := rm.CustomUpdateConditions(ko, r, err)
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil || customUpdate {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}
	awsErr, ok := ackerr.AWSError(err)
	if !ok {
		return false
	}
	switch awsErr.Code() {
	case "InvalidParameterCombination",
		"InvalidParameterValue",
		"MissingParameter",
		"ConflictException":
		return true
	default:
		return false
	}
}
