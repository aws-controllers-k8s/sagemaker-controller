// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package model_package

import (
	"context"
	"errors"
	"fmt"
	"math"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go-v2/aws"
	svcsdk "github.com/aws/aws-sdk-go-v2/service/sagemaker"
	svcsdktypes "github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
	smithy "github.com/aws/smithy-go"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/sagemaker-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &svcsdk.Client{}
	_ = &svcapitypes.ModelPackage{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
	_ = &aws.Config{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}
	// If ModelPackageName not set after newRequestPayload, attempt to use ARN
	// This is because versioned modelpackage uses ARN not name
	if input.ModelPackageName == nil {
		arn := r.Identifiers().ARN()
		if arn == nil {
			return nil, ackerr.NotFound
		}
		input.ModelPackageName = aws.String(string(*arn))
	}

	var resp *svcsdk.DescribeModelPackageOutput
	resp, err = rm.sdkapi.DescribeModelPackage(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "DescribeModelPackage", err)
	if err != nil {
		var awsErr smithy.APIError
		if errors.As(err, &awsErr) && awsErr.ErrorCode() == "ValidationException" && strings.HasSuffix(awsErr.ErrorMessage(), "does not exist.") {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.AdditionalInferenceSpecifications != nil {
		f0 := []*svcapitypes.AdditionalInferenceSpecificationDefinition{}
		for _, f0iter := range resp.AdditionalInferenceSpecifications {
			f0elem := &svcapitypes.AdditionalInferenceSpecificationDefinition{}
			if f0iter.Containers != nil {
				f0elemf0 := []*svcapitypes.ModelPackageContainerDefinition{}
				for _, f0elemf0iter := range f0iter.Containers {
					f0elemf0elem := &svcapitypes.ModelPackageContainerDefinition{}
					if f0elemf0iter.AdditionalS3DataSource != nil {
						f0elemf0elemf0 := &svcapitypes.AdditionalS3DataSource{}
						if f0elemf0iter.AdditionalS3DataSource.CompressionType != "" {
							f0elemf0elemf0.CompressionType = aws.String(string(f0elemf0iter.AdditionalS3DataSource.CompressionType))
						}
						if f0elemf0iter.AdditionalS3DataSource.S3DataType != "" {
							f0elemf0elemf0.S3DataType = aws.String(string(f0elemf0iter.AdditionalS3DataSource.S3DataType))
						}
						if f0elemf0iter.AdditionalS3DataSource.S3Uri != nil {
							f0elemf0elemf0.S3URI = f0elemf0iter.AdditionalS3DataSource.S3Uri
						}
						f0elemf0elem.AdditionalS3DataSource = f0elemf0elemf0
					}
					if f0elemf0iter.ContainerHostname != nil {
						f0elemf0elem.ContainerHostname = f0elemf0iter.ContainerHostname
					}
					if f0elemf0iter.Environment != nil {
						f0elemf0elem.Environment = aws.StringMap(f0elemf0iter.Environment)
					}
					if f0elemf0iter.Framework != nil {
						f0elemf0elem.Framework = f0elemf0iter.Framework
					}
					if f0elemf0iter.FrameworkVersion != nil {
						f0elemf0elem.FrameworkVersion = f0elemf0iter.FrameworkVersion
					}
					if f0elemf0iter.Image != nil {
						f0elemf0elem.Image = f0elemf0iter.Image
					}
					if f0elemf0iter.ImageDigest != nil {
						f0elemf0elem.ImageDigest = f0elemf0iter.ImageDigest
					}
					if f0elemf0iter.ModelDataUrl != nil {
						f0elemf0elem.ModelDataURL = f0elemf0iter.ModelDataUrl
					}
					if f0elemf0iter.ModelInput != nil {
						f0elemf0elemf8 := &svcapitypes.ModelInput{}
						if f0elemf0iter.ModelInput.DataInputConfig != nil {
							f0elemf0elemf8.DataInputConfig = f0elemf0iter.ModelInput.DataInputConfig
						}
						f0elemf0elem.ModelInput = f0elemf0elemf8
					}
					if f0elemf0iter.NearestModelName != nil {
						f0elemf0elem.NearestModelName = f0elemf0iter.NearestModelName
					}
					if f0elemf0iter.ProductId != nil {
						f0elemf0elem.ProductID = f0elemf0iter.ProductId
					}
					f0elemf0 = append(f0elemf0, f0elemf0elem)
				}
				f0elem.Containers = f0elemf0
			}
			if f0iter.Description != nil {
				f0elem.Description = f0iter.Description
			}
			if f0iter.Name != nil {
				f0elem.Name = f0iter.Name
			}
			if f0iter.SupportedContentTypes != nil {
				f0elem.SupportedContentTypes = aws.StringSlice(f0iter.SupportedContentTypes)
			}
			if f0iter.SupportedRealtimeInferenceInstanceTypes != nil {
				f0elemf4 := []*string{}
				for _, f0elemf4iter := range f0iter.SupportedRealtimeInferenceInstanceTypes {
					var f0elemf4elem *string
					f0elemf4elem = aws.String(string(f0elemf4iter))
					f0elemf4 = append(f0elemf4, f0elemf4elem)
				}
				f0elem.SupportedRealtimeInferenceInstanceTypes = f0elemf4
			}
			if f0iter.SupportedResponseMIMETypes != nil {
				f0elem.SupportedResponseMIMETypes = aws.StringSlice(f0iter.SupportedResponseMIMETypes)
			}
			if f0iter.SupportedTransformInstanceTypes != nil {
				f0elemf6 := []*string{}
				for _, f0elemf6iter := range f0iter.SupportedTransformInstanceTypes {
					var f0elemf6elem *string
					f0elemf6elem = aws.String(string(f0elemf6iter))
					f0elemf6 = append(f0elemf6, f0elemf6elem)
				}
				f0elem.SupportedTransformInstanceTypes = f0elemf6
			}
			f0 = append(f0, f0elem)
		}
		ko.Spec.AdditionalInferenceSpecifications = f0
	} else {
		ko.Spec.AdditionalInferenceSpecifications = nil
	}
	if resp.ApprovalDescription != nil {
		ko.Spec.ApprovalDescription = resp.ApprovalDescription
	} else {
		ko.Spec.ApprovalDescription = nil
	}
	if resp.CertifyForMarketplace != nil {
		ko.Spec.CertifyForMarketplace = resp.CertifyForMarketplace
	} else {
		ko.Spec.CertifyForMarketplace = nil
	}
	if resp.CreationTime != nil {
		ko.Status.CreationTime = &metav1.Time{*resp.CreationTime}
	} else {
		ko.Status.CreationTime = nil
	}
	if resp.CustomerMetadataProperties != nil {
		ko.Spec.CustomerMetadataProperties = aws.StringMap(resp.CustomerMetadataProperties)
	} else {
		ko.Spec.CustomerMetadataProperties = nil
	}
	if resp.Domain != nil {
		ko.Spec.Domain = resp.Domain
	} else {
		ko.Spec.Domain = nil
	}
	if resp.DriftCheckBaselines != nil {
		f7 := &svcapitypes.DriftCheckBaselines{}
		if resp.DriftCheckBaselines.Bias != nil {
			f7f0 := &svcapitypes.DriftCheckBias{}
			if resp.DriftCheckBaselines.Bias.ConfigFile != nil {
				f7f0f0 := &svcapitypes.FileSource{}
				if resp.DriftCheckBaselines.Bias.ConfigFile.ContentDigest != nil {
					f7f0f0.ContentDigest = resp.DriftCheckBaselines.Bias.ConfigFile.ContentDigest
				}
				if resp.DriftCheckBaselines.Bias.ConfigFile.ContentType != nil {
					f7f0f0.ContentType = resp.DriftCheckBaselines.Bias.ConfigFile.ContentType
				}
				if resp.DriftCheckBaselines.Bias.ConfigFile.S3Uri != nil {
					f7f0f0.S3URI = resp.DriftCheckBaselines.Bias.ConfigFile.S3Uri
				}
				f7f0.ConfigFile = f7f0f0
			}
			if resp.DriftCheckBaselines.Bias.PostTrainingConstraints != nil {
				f7f0f1 := &svcapitypes.MetricsSource{}
				if resp.DriftCheckBaselines.Bias.PostTrainingConstraints.ContentDigest != nil {
					f7f0f1.ContentDigest = resp.DriftCheckBaselines.Bias.PostTrainingConstraints.ContentDigest
				}
				if resp.DriftCheckBaselines.Bias.PostTrainingConstraints.ContentType != nil {
					f7f0f1.ContentType = resp.DriftCheckBaselines.Bias.PostTrainingConstraints.ContentType
				}
				if resp.DriftCheckBaselines.Bias.PostTrainingConstraints.S3Uri != nil {
					f7f0f1.S3URI = resp.DriftCheckBaselines.Bias.PostTrainingConstraints.S3Uri
				}
				f7f0.PostTrainingConstraints = f7f0f1
			}
			if resp.DriftCheckBaselines.Bias.PreTrainingConstraints != nil {
				f7f0f2 := &svcapitypes.MetricsSource{}
				if resp.DriftCheckBaselines.Bias.PreTrainingConstraints.ContentDigest != nil {
					f7f0f2.ContentDigest = resp.DriftCheckBaselines.Bias.PreTrainingConstraints.ContentDigest
				}
				if resp.DriftCheckBaselines.Bias.PreTrainingConstraints.ContentType != nil {
					f7f0f2.ContentType = resp.DriftCheckBaselines.Bias.PreTrainingConstraints.ContentType
				}
				if resp.DriftCheckBaselines.Bias.PreTrainingConstraints.S3Uri != nil {
					f7f0f2.S3URI = resp.DriftCheckBaselines.Bias.PreTrainingConstraints.S3Uri
				}
				f7f0.PreTrainingConstraints = f7f0f2
			}
			f7.Bias = f7f0
		}
		if resp.DriftCheckBaselines.Explainability != nil {
			f7f1 := &svcapitypes.DriftCheckExplainability{}
			if resp.DriftCheckBaselines.Explainability.ConfigFile != nil {
				f7f1f0 := &svcapitypes.FileSource{}
				if resp.DriftCheckBaselines.Explainability.ConfigFile.ContentDigest != nil {
					f7f1f0.ContentDigest = resp.DriftCheckBaselines.Explainability.ConfigFile.ContentDigest
				}
				if resp.DriftCheckBaselines.Explainability.ConfigFile.ContentType != nil {
					f7f1f0.ContentType = resp.DriftCheckBaselines.Explainability.ConfigFile.ContentType
				}
				if resp.DriftCheckBaselines.Explainability.ConfigFile.S3Uri != nil {
					f7f1f0.S3URI = resp.DriftCheckBaselines.Explainability.ConfigFile.S3Uri
				}
				f7f1.ConfigFile = f7f1f0
			}
			if resp.DriftCheckBaselines.Explainability.Constraints != nil {
				f7f1f1 := &svcapitypes.MetricsSource{}
				if resp.DriftCheckBaselines.Explainability.Constraints.ContentDigest != nil {
					f7f1f1.ContentDigest = resp.DriftCheckBaselines.Explainability.Constraints.ContentDigest
				}
				if resp.DriftCheckBaselines.Explainability.Constraints.ContentType != nil {
					f7f1f1.ContentType = resp.DriftCheckBaselines.Explainability.Constraints.ContentType
				}
				if resp.DriftCheckBaselines.Explainability.Constraints.S3Uri != nil {
					f7f1f1.S3URI = resp.DriftCheckBaselines.Explainability.Constraints.S3Uri
				}
				f7f1.Constraints = f7f1f1
			}
			f7.Explainability = f7f1
		}
		if resp.DriftCheckBaselines.ModelDataQuality != nil {
			f7f2 := &svcapitypes.DriftCheckModelDataQuality{}
			if resp.DriftCheckBaselines.ModelDataQuality.Constraints != nil {
				f7f2f0 := &svcapitypes.MetricsSource{}
				if resp.DriftCheckBaselines.ModelDataQuality.Constraints.ContentDigest != nil {
					f7f2f0.ContentDigest = resp.DriftCheckBaselines.ModelDataQuality.Constraints.ContentDigest
				}
				if resp.DriftCheckBaselines.ModelDataQuality.Constraints.ContentType != nil {
					f7f2f0.ContentType = resp.DriftCheckBaselines.ModelDataQuality.Constraints.ContentType
				}
				if resp.DriftCheckBaselines.ModelDataQuality.Constraints.S3Uri != nil {
					f7f2f0.S3URI = resp.DriftCheckBaselines.ModelDataQuality.Constraints.S3Uri
				}
				f7f2.Constraints = f7f2f0
			}
			if resp.DriftCheckBaselines.ModelDataQuality.Statistics != nil {
				f7f2f1 := &svcapitypes.MetricsSource{}
				if resp.DriftCheckBaselines.ModelDataQuality.Statistics.ContentDigest != nil {
					f7f2f1.ContentDigest = resp.DriftCheckBaselines.ModelDataQuality.Statistics.ContentDigest
				}
				if resp.DriftCheckBaselines.ModelDataQuality.Statistics.ContentType != nil {
					f7f2f1.ContentType = resp.DriftCheckBaselines.ModelDataQuality.Statistics.ContentType
				}
				if resp.DriftCheckBaselines.ModelDataQuality.Statistics.S3Uri != nil {
					f7f2f1.S3URI = resp.DriftCheckBaselines.ModelDataQuality.Statistics.S3Uri
				}
				f7f2.Statistics = f7f2f1
			}
			f7.ModelDataQuality = f7f2
		}
		if resp.DriftCheckBaselines.ModelQuality != nil {
			f7f3 := &svcapitypes.DriftCheckModelQuality{}
			if resp.DriftCheckBaselines.ModelQuality.Constraints != nil {
				f7f3f0 := &svcapitypes.MetricsSource{}
				if resp.DriftCheckBaselines.ModelQuality.Constraints.ContentDigest != nil {
					f7f3f0.ContentDigest = resp.DriftCheckBaselines.ModelQuality.Constraints.ContentDigest
				}
				if resp.DriftCheckBaselines.ModelQuality.Constraints.ContentType != nil {
					f7f3f0.ContentType = resp.DriftCheckBaselines.ModelQuality.Constraints.ContentType
				}
				if resp.DriftCheckBaselines.ModelQuality.Constraints.S3Uri != nil {
					f7f3f0.S3URI = resp.DriftCheckBaselines.ModelQuality.Constraints.S3Uri
				}
				f7f3.Constraints = f7f3f0
			}
			if resp.DriftCheckBaselines.ModelQuality.Statistics != nil {
				f7f3f1 := &svcapitypes.MetricsSource{}
				if resp.DriftCheckBaselines.ModelQuality.Statistics.ContentDigest != nil {
					f7f3f1.ContentDigest = resp.DriftCheckBaselines.ModelQuality.Statistics.ContentDigest
				}
				if resp.DriftCheckBaselines.ModelQuality.Statistics.ContentType != nil {
					f7f3f1.ContentType = resp.DriftCheckBaselines.ModelQuality.Statistics.ContentType
				}
				if resp.DriftCheckBaselines.ModelQuality.Statistics.S3Uri != nil {
					f7f3f1.S3URI = resp.DriftCheckBaselines.ModelQuality.Statistics.S3Uri
				}
				f7f3.Statistics = f7f3f1
			}
			f7.ModelQuality = f7f3
		}
		ko.Spec.DriftCheckBaselines = f7
	} else {
		ko.Spec.DriftCheckBaselines = nil
	}
	if resp.InferenceSpecification != nil {
		f8 := &svcapitypes.InferenceSpecification{}
		if resp.InferenceSpecification.Containers != nil {
			f8f0 := []*svcapitypes.ModelPackageContainerDefinition{}
			for _, f8f0iter := range resp.InferenceSpecification.Containers {
				f8f0elem := &svcapitypes.ModelPackageContainerDefinition{}
				if f8f0iter.AdditionalS3DataSource != nil {
					f8f0elemf0 := &svcapitypes.AdditionalS3DataSource{}
					if f8f0iter.AdditionalS3DataSource.CompressionType != "" {
						f8f0elemf0.CompressionType = aws.String(string(f8f0iter.AdditionalS3DataSource.CompressionType))
					}
					if f8f0iter.AdditionalS3DataSource.S3DataType != "" {
						f8f0elemf0.S3DataType = aws.String(string(f8f0iter.AdditionalS3DataSource.S3DataType))
					}
					if f8f0iter.AdditionalS3DataSource.S3Uri != nil {
						f8f0elemf0.S3URI = f8f0iter.AdditionalS3DataSource.S3Uri
					}
					f8f0elem.AdditionalS3DataSource = f8f0elemf0
				}
				if f8f0iter.ContainerHostname != nil {
					f8f0elem.ContainerHostname = f8f0iter.ContainerHostname
				}
				if f8f0iter.Environment != nil {
					f8f0elem.Environment = aws.StringMap(f8f0iter.Environment)
				}
				if f8f0iter.Framework != nil {
					f8f0elem.Framework = f8f0iter.Framework
				}
				if f8f0iter.FrameworkVersion != nil {
					f8f0elem.FrameworkVersion = f8f0iter.FrameworkVersion
				}
				if f8f0iter.Image != nil {
					f8f0elem.Image = f8f0iter.Image
				}
				if f8f0iter.ImageDigest != nil {
					f8f0elem.ImageDigest = f8f0iter.ImageDigest
				}
				if f8f0iter.ModelDataUrl != nil {
					f8f0elem.ModelDataURL = f8f0iter.ModelDataUrl
				}
				if f8f0iter.ModelInput != nil {
					f8f0elemf8 := &svcapitypes.ModelInput{}
					if f8f0iter.ModelInput.DataInputConfig != nil {
						f8f0elemf8.DataInputConfig = f8f0iter.ModelInput.DataInputConfig
					}
					f8f0elem.ModelInput = f8f0elemf8
				}
				if f8f0iter.NearestModelName != nil {
					f8f0elem.NearestModelName = f8f0iter.NearestModelName
				}
				if f8f0iter.ProductId != nil {
					f8f0elem.ProductID = f8f0iter.ProductId
				}
				f8f0 = append(f8f0, f8f0elem)
			}
			f8.Containers = f8f0
		}
		if resp.InferenceSpecification.SupportedContentTypes != nil {
			f8.SupportedContentTypes = aws.StringSlice(resp.InferenceSpecification.SupportedContentTypes)
		}
		if resp.InferenceSpecification.SupportedRealtimeInferenceInstanceTypes != nil {
			f8f2 := []*string{}
			for _, f8f2iter := range resp.InferenceSpecification.SupportedRealtimeInferenceInstanceTypes {
				var f8f2elem *string
				f8f2elem = aws.String(string(f8f2iter))
				f8f2 = append(f8f2, f8f2elem)
			}
			f8.SupportedRealtimeInferenceInstanceTypes = f8f2
		}
		if resp.InferenceSpecification.SupportedResponseMIMETypes != nil {
			f8.SupportedResponseMIMETypes = aws.StringSlice(resp.InferenceSpecification.SupportedResponseMIMETypes)
		}
		if resp.InferenceSpecification.SupportedTransformInstanceTypes != nil {
			f8f4 := []*string{}
			for _, f8f4iter := range resp.InferenceSpecification.SupportedTransformInstanceTypes {
				var f8f4elem *string
				f8f4elem = aws.String(string(f8f4iter))
				f8f4 = append(f8f4, f8f4elem)
			}
			f8.SupportedTransformInstanceTypes = f8f4
		}
		ko.Spec.InferenceSpecification = f8
	} else {
		ko.Spec.InferenceSpecification = nil
	}
	if resp.LastModifiedTime != nil {
		ko.Status.LastModifiedTime = &metav1.Time{*resp.LastModifiedTime}
	} else {
		ko.Status.LastModifiedTime = nil
	}
	if resp.MetadataProperties != nil {
		f11 := &svcapitypes.MetadataProperties{}
		if resp.MetadataProperties.CommitId != nil {
			f11.CommitID = resp.MetadataProperties.CommitId
		}
		if resp.MetadataProperties.GeneratedBy != nil {
			f11.GeneratedBy = resp.MetadataProperties.GeneratedBy
		}
		if resp.MetadataProperties.ProjectId != nil {
			f11.ProjectID = resp.MetadataProperties.ProjectId
		}
		if resp.MetadataProperties.Repository != nil {
			f11.Repository = resp.MetadataProperties.Repository
		}
		ko.Spec.MetadataProperties = f11
	} else {
		ko.Spec.MetadataProperties = nil
	}
	if resp.ModelApprovalStatus != "" {
		ko.Spec.ModelApprovalStatus = aws.String(string(resp.ModelApprovalStatus))
	} else {
		ko.Spec.ModelApprovalStatus = nil
	}
	if resp.ModelMetrics != nil {
		f15 := &svcapitypes.ModelMetrics{}
		if resp.ModelMetrics.Bias != nil {
			f15f0 := &svcapitypes.Bias{}
			if resp.ModelMetrics.Bias.PostTrainingReport != nil {
				f15f0f0 := &svcapitypes.MetricsSource{}
				if resp.ModelMetrics.Bias.PostTrainingReport.ContentDigest != nil {
					f15f0f0.ContentDigest = resp.ModelMetrics.Bias.PostTrainingReport.ContentDigest
				}
				if resp.ModelMetrics.Bias.PostTrainingReport.ContentType != nil {
					f15f0f0.ContentType = resp.ModelMetrics.Bias.PostTrainingReport.ContentType
				}
				if resp.ModelMetrics.Bias.PostTrainingReport.S3Uri != nil {
					f15f0f0.S3URI = resp.ModelMetrics.Bias.PostTrainingReport.S3Uri
				}
				f15f0.PostTrainingReport = f15f0f0
			}
			if resp.ModelMetrics.Bias.PreTrainingReport != nil {
				f15f0f1 := &svcapitypes.MetricsSource{}
				if resp.ModelMetrics.Bias.PreTrainingReport.ContentDigest != nil {
					f15f0f1.ContentDigest = resp.ModelMetrics.Bias.PreTrainingReport.ContentDigest
				}
				if resp.ModelMetrics.Bias.PreTrainingReport.ContentType != nil {
					f15f0f1.ContentType = resp.ModelMetrics.Bias.PreTrainingReport.ContentType
				}
				if resp.ModelMetrics.Bias.PreTrainingReport.S3Uri != nil {
					f15f0f1.S3URI = resp.ModelMetrics.Bias.PreTrainingReport.S3Uri
				}
				f15f0.PreTrainingReport = f15f0f1
			}
			if resp.ModelMetrics.Bias.Report != nil {
				f15f0f2 := &svcapitypes.MetricsSource{}
				if resp.ModelMetrics.Bias.Report.ContentDigest != nil {
					f15f0f2.ContentDigest = resp.ModelMetrics.Bias.Report.ContentDigest
				}
				if resp.ModelMetrics.Bias.Report.ContentType != nil {
					f15f0f2.ContentType = resp.ModelMetrics.Bias.Report.ContentType
				}
				if resp.ModelMetrics.Bias.Report.S3Uri != nil {
					f15f0f2.S3URI = resp.ModelMetrics.Bias.Report.S3Uri
				}
				f15f0.Report = f15f0f2
			}
			f15.Bias = f15f0
		}
		if resp.ModelMetrics.Explainability != nil {
			f15f1 := &svcapitypes.Explainability{}
			if resp.ModelMetrics.Explainability.Report != nil {
				f15f1f0 := &svcapitypes.MetricsSource{}
				if resp.ModelMetrics.Explainability.Report.ContentDigest != nil {
					f15f1f0.ContentDigest = resp.ModelMetrics.Explainability.Report.ContentDigest
				}
				if resp.ModelMetrics.Explainability.Report.ContentType != nil {
					f15f1f0.ContentType = resp.ModelMetrics.Explainability.Report.ContentType
				}
				if resp.ModelMetrics.Explainability.Report.S3Uri != nil {
					f15f1f0.S3URI = resp.ModelMetrics.Explainability.Report.S3Uri
				}
				f15f1.Report = f15f1f0
			}
			f15.Explainability = f15f1
		}
		if resp.ModelMetrics.ModelDataQuality != nil {
			f15f2 := &svcapitypes.ModelDataQuality{}
			if resp.ModelMetrics.ModelDataQuality.Constraints != nil {
				f15f2f0 := &svcapitypes.MetricsSource{}
				if resp.ModelMetrics.ModelDataQuality.Constraints.ContentDigest != nil {
					f15f2f0.ContentDigest = resp.ModelMetrics.ModelDataQuality.Constraints.ContentDigest
				}
				if resp.ModelMetrics.ModelDataQuality.Constraints.ContentType != nil {
					f15f2f0.ContentType = resp.ModelMetrics.ModelDataQuality.Constraints.ContentType
				}
				if resp.ModelMetrics.ModelDataQuality.Constraints.S3Uri != nil {
					f15f2f0.S3URI = resp.ModelMetrics.ModelDataQuality.Constraints.S3Uri
				}
				f15f2.Constraints = f15f2f0
			}
			if resp.ModelMetrics.ModelDataQuality.Statistics != nil {
				f15f2f1 := &svcapitypes.MetricsSource{}
				if resp.ModelMetrics.ModelDataQuality.Statistics.ContentDigest != nil {
					f15f2f1.ContentDigest = resp.ModelMetrics.ModelDataQuality.Statistics.ContentDigest
				}
				if resp.ModelMetrics.ModelDataQuality.Statistics.ContentType != nil {
					f15f2f1.ContentType = resp.ModelMetrics.ModelDataQuality.Statistics.ContentType
				}
				if resp.ModelMetrics.ModelDataQuality.Statistics.S3Uri != nil {
					f15f2f1.S3URI = resp.ModelMetrics.ModelDataQuality.Statistics.S3Uri
				}
				f15f2.Statistics = f15f2f1
			}
			f15.ModelDataQuality = f15f2
		}
		if resp.ModelMetrics.ModelQuality != nil {
			f15f3 := &svcapitypes.ModelQuality{}
			if resp.ModelMetrics.ModelQuality.Constraints != nil {
				f15f3f0 := &svcapitypes.MetricsSource{}
				if resp.ModelMetrics.ModelQuality.Constraints.ContentDigest != nil {
					f15f3f0.ContentDigest = resp.ModelMetrics.ModelQuality.Constraints.ContentDigest
				}
				if resp.ModelMetrics.ModelQuality.Constraints.ContentType != nil {
					f15f3f0.ContentType = resp.ModelMetrics.ModelQuality.Constraints.ContentType
				}
				if resp.ModelMetrics.ModelQuality.Constraints.S3Uri != nil {
					f15f3f0.S3URI = resp.ModelMetrics.ModelQuality.Constraints.S3Uri
				}
				f15f3.Constraints = f15f3f0
			}
			if resp.ModelMetrics.ModelQuality.Statistics != nil {
				f15f3f1 := &svcapitypes.MetricsSource{}
				if resp.ModelMetrics.ModelQuality.Statistics.ContentDigest != nil {
					f15f3f1.ContentDigest = resp.ModelMetrics.ModelQuality.Statistics.ContentDigest
				}
				if resp.ModelMetrics.ModelQuality.Statistics.ContentType != nil {
					f15f3f1.ContentType = resp.ModelMetrics.ModelQuality.Statistics.ContentType
				}
				if resp.ModelMetrics.ModelQuality.Statistics.S3Uri != nil {
					f15f3f1.S3URI = resp.ModelMetrics.ModelQuality.Statistics.S3Uri
				}
				f15f3.Statistics = f15f3f1
			}
			f15.ModelQuality = f15f3
		}
		ko.Spec.ModelMetrics = f15
	} else {
		ko.Spec.ModelMetrics = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.ModelPackageArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.ModelPackageArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.ModelPackageDescription != nil {
		ko.Spec.ModelPackageDescription = resp.ModelPackageDescription
	} else {
		ko.Spec.ModelPackageDescription = nil
	}
	if resp.ModelPackageGroupName != nil {
		ko.Spec.ModelPackageGroupName = resp.ModelPackageGroupName
	} else {
		ko.Spec.ModelPackageGroupName = nil
	}
	if resp.ModelPackageName != nil {
		ko.Spec.ModelPackageName = resp.ModelPackageName
	} else {
		ko.Spec.ModelPackageName = nil
	}
	if resp.ModelPackageStatus != "" {
		ko.Status.ModelPackageStatus = aws.String(string(resp.ModelPackageStatus))
	} else {
		ko.Status.ModelPackageStatus = nil
	}
	if resp.ModelPackageStatusDetails != nil {
		f21 := &svcapitypes.ModelPackageStatusDetails{}
		if resp.ModelPackageStatusDetails.ImageScanStatuses != nil {
			f21f0 := []*svcapitypes.ModelPackageStatusItem{}
			for _, f21f0iter := range resp.ModelPackageStatusDetails.ImageScanStatuses {
				f21f0elem := &svcapitypes.ModelPackageStatusItem{}
				if f21f0iter.FailureReason != nil {
					f21f0elem.FailureReason = f21f0iter.FailureReason
				}
				if f21f0iter.Name != nil {
					f21f0elem.Name = f21f0iter.Name
				}
				if f21f0iter.Status != "" {
					f21f0elem.Status = aws.String(string(f21f0iter.Status))
				}
				f21f0 = append(f21f0, f21f0elem)
			}
			f21.ImageScanStatuses = f21f0
		}
		if resp.ModelPackageStatusDetails.ValidationStatuses != nil {
			f21f1 := []*svcapitypes.ModelPackageStatusItem{}
			for _, f21f1iter := range resp.ModelPackageStatusDetails.ValidationStatuses {
				f21f1elem := &svcapitypes.ModelPackageStatusItem{}
				if f21f1iter.FailureReason != nil {
					f21f1elem.FailureReason = f21f1iter.FailureReason
				}
				if f21f1iter.Name != nil {
					f21f1elem.Name = f21f1iter.Name
				}
				if f21f1iter.Status != "" {
					f21f1elem.Status = aws.String(string(f21f1iter.Status))
				}
				f21f1 = append(f21f1, f21f1elem)
			}
			f21.ValidationStatuses = f21f1
		}
		ko.Status.ModelPackageStatusDetails = f21
	} else {
		ko.Status.ModelPackageStatusDetails = nil
	}
	if resp.SamplePayloadUrl != nil {
		ko.Spec.SamplePayloadURL = resp.SamplePayloadUrl
	} else {
		ko.Spec.SamplePayloadURL = nil
	}
	if resp.SkipModelValidation != "" {
		ko.Spec.SkipModelValidation = aws.String(string(resp.SkipModelValidation))
	} else {
		ko.Spec.SkipModelValidation = nil
	}
	if resp.SourceAlgorithmSpecification != nil {
		f26 := &svcapitypes.SourceAlgorithmSpecification{}
		if resp.SourceAlgorithmSpecification.SourceAlgorithms != nil {
			f26f0 := []*svcapitypes.SourceAlgorithm{}
			for _, f26f0iter := range resp.SourceAlgorithmSpecification.SourceAlgorithms {
				f26f0elem := &svcapitypes.SourceAlgorithm{}
				if f26f0iter.AlgorithmName != nil {
					f26f0elem.AlgorithmName = f26f0iter.AlgorithmName
				}
				if f26f0iter.ModelDataUrl != nil {
					f26f0elem.ModelDataURL = f26f0iter.ModelDataUrl
				}
				f26f0 = append(f26f0, f26f0elem)
			}
			f26.SourceAlgorithms = f26f0
		}
		ko.Spec.SourceAlgorithmSpecification = f26
	} else {
		ko.Spec.SourceAlgorithmSpecification = nil
	}
	if resp.Task != nil {
		ko.Spec.Task = resp.Task
	} else {
		ko.Spec.Task = nil
	}
	if resp.ValidationSpecification != nil {
		f29 := &svcapitypes.ModelPackageValidationSpecification{}
		if resp.ValidationSpecification.ValidationProfiles != nil {
			f29f0 := []*svcapitypes.ModelPackageValidationProfile{}
			for _, f29f0iter := range resp.ValidationSpecification.ValidationProfiles {
				f29f0elem := &svcapitypes.ModelPackageValidationProfile{}
				if f29f0iter.ProfileName != nil {
					f29f0elem.ProfileName = f29f0iter.ProfileName
				}
				if f29f0iter.TransformJobDefinition != nil {
					f29f0elemf1 := &svcapitypes.TransformJobDefinition{}
					if f29f0iter.TransformJobDefinition.BatchStrategy != "" {
						f29f0elemf1.BatchStrategy = aws.String(string(f29f0iter.TransformJobDefinition.BatchStrategy))
					}
					if f29f0iter.TransformJobDefinition.Environment != nil {
						f29f0elemf1.Environment = aws.StringMap(f29f0iter.TransformJobDefinition.Environment)
					}
					if f29f0iter.TransformJobDefinition.MaxConcurrentTransforms != nil {
						maxConcurrentTransformsCopy := int64(*f29f0iter.TransformJobDefinition.MaxConcurrentTransforms)
						f29f0elemf1.MaxConcurrentTransforms = &maxConcurrentTransformsCopy
					}
					if f29f0iter.TransformJobDefinition.MaxPayloadInMB != nil {
						maxPayloadInMBCopy := int64(*f29f0iter.TransformJobDefinition.MaxPayloadInMB)
						f29f0elemf1.MaxPayloadInMB = &maxPayloadInMBCopy
					}
					if f29f0iter.TransformJobDefinition.TransformInput != nil {
						f29f0elemf1f4 := &svcapitypes.TransformInput{}
						if f29f0iter.TransformJobDefinition.TransformInput.CompressionType != "" {
							f29f0elemf1f4.CompressionType = aws.String(string(f29f0iter.TransformJobDefinition.TransformInput.CompressionType))
						}
						if f29f0iter.TransformJobDefinition.TransformInput.ContentType != nil {
							f29f0elemf1f4.ContentType = f29f0iter.TransformJobDefinition.TransformInput.ContentType
						}
						if f29f0iter.TransformJobDefinition.TransformInput.DataSource != nil {
							f29f0elemf1f4f2 := &svcapitypes.TransformDataSource{}
							if f29f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource != nil {
								f29f0elemf1f4f2f0 := &svcapitypes.TransformS3DataSource{}
								if f29f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource.S3DataType != "" {
									f29f0elemf1f4f2f0.S3DataType = aws.String(string(f29f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource.S3DataType))
								}
								if f29f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource.S3Uri != nil {
									f29f0elemf1f4f2f0.S3URI = f29f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource.S3Uri
								}
								f29f0elemf1f4f2.S3DataSource = f29f0elemf1f4f2f0
							}
							f29f0elemf1f4.DataSource = f29f0elemf1f4f2
						}
						if f29f0iter.TransformJobDefinition.TransformInput.SplitType != "" {
							f29f0elemf1f4.SplitType = aws.String(string(f29f0iter.TransformJobDefinition.TransformInput.SplitType))
						}
						f29f0elemf1.TransformInput = f29f0elemf1f4
					}
					if f29f0iter.TransformJobDefinition.TransformOutput != nil {
						f29f0elemf1f5 := &svcapitypes.TransformOutput{}
						if f29f0iter.TransformJobDefinition.TransformOutput.Accept != nil {
							f29f0elemf1f5.Accept = f29f0iter.TransformJobDefinition.TransformOutput.Accept
						}
						if f29f0iter.TransformJobDefinition.TransformOutput.AssembleWith != "" {
							f29f0elemf1f5.AssembleWith = aws.String(string(f29f0iter.TransformJobDefinition.TransformOutput.AssembleWith))
						}
						if f29f0iter.TransformJobDefinition.TransformOutput.KmsKeyId != nil {
							f29f0elemf1f5.KMSKeyID = f29f0iter.TransformJobDefinition.TransformOutput.KmsKeyId
						}
						if f29f0iter.TransformJobDefinition.TransformOutput.S3OutputPath != nil {
							f29f0elemf1f5.S3OutputPath = f29f0iter.TransformJobDefinition.TransformOutput.S3OutputPath
						}
						f29f0elemf1.TransformOutput = f29f0elemf1f5
					}
					if f29f0iter.TransformJobDefinition.TransformResources != nil {
						f29f0elemf1f6 := &svcapitypes.TransformResources{}
						if f29f0iter.TransformJobDefinition.TransformResources.InstanceCount != nil {
							instanceCountCopy := int64(*f29f0iter.TransformJobDefinition.TransformResources.InstanceCount)
							f29f0elemf1f6.InstanceCount = &instanceCountCopy
						}
						if f29f0iter.TransformJobDefinition.TransformResources.InstanceType != "" {
							f29f0elemf1f6.InstanceType = aws.String(string(f29f0iter.TransformJobDefinition.TransformResources.InstanceType))
						}
						if f29f0iter.TransformJobDefinition.TransformResources.VolumeKmsKeyId != nil {
							f29f0elemf1f6.VolumeKMSKeyID = f29f0iter.TransformJobDefinition.TransformResources.VolumeKmsKeyId
						}
						f29f0elemf1.TransformResources = f29f0elemf1f6
					}
					f29f0elem.TransformJobDefinition = f29f0elemf1
				}
				f29f0 = append(f29f0, f29f0elem)
			}
			f29.ValidationProfiles = f29f0
		}
		if resp.ValidationSpecification.ValidationRole != nil {
			f29.ValidationRole = resp.ValidationSpecification.ValidationRole
		}
		ko.Spec.ValidationSpecification = f29
	} else {
		ko.Spec.ValidationSpecification = nil
	}

	rm.setStatusDefaults(ko)
	rm.customSetOutput(&resource{ko})
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return rm.customCheckRequiredFieldsMissingMethod(r)
}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.DescribeModelPackageInput, error) {
	res := &svcsdk.DescribeModelPackageInput{}

	if r.ko.Spec.ModelPackageName != nil {
		res.ModelPackageName = r.ko.Spec.ModelPackageName
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateModelPackageOutput
	_ = resp
	resp, err = rm.sdkapi.CreateModelPackage(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateModelPackage", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.ModelPackageArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.ModelPackageArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateModelPackageInput, error) {
	res := &svcsdk.CreateModelPackageInput{}

	if r.ko.Spec.AdditionalInferenceSpecifications != nil {
		f0 := []svcsdktypes.AdditionalInferenceSpecificationDefinition{}
		for _, f0iter := range r.ko.Spec.AdditionalInferenceSpecifications {
			f0elem := &svcsdktypes.AdditionalInferenceSpecificationDefinition{}
			if f0iter.Containers != nil {
				f0elemf0 := []svcsdktypes.ModelPackageContainerDefinition{}
				for _, f0elemf0iter := range f0iter.Containers {
					f0elemf0elem := &svcsdktypes.ModelPackageContainerDefinition{}
					if f0elemf0iter.AdditionalS3DataSource != nil {
						f0elemf0elemf0 := &svcsdktypes.AdditionalS3DataSource{}
						if f0elemf0iter.AdditionalS3DataSource.CompressionType != nil {
							f0elemf0elemf0.CompressionType = svcsdktypes.CompressionType(*f0elemf0iter.AdditionalS3DataSource.CompressionType)
						}
						if f0elemf0iter.AdditionalS3DataSource.S3DataType != nil {
							f0elemf0elemf0.S3DataType = svcsdktypes.AdditionalS3DataSourceDataType(*f0elemf0iter.AdditionalS3DataSource.S3DataType)
						}
						if f0elemf0iter.AdditionalS3DataSource.S3URI != nil {
							f0elemf0elemf0.S3Uri = f0elemf0iter.AdditionalS3DataSource.S3URI
						}
						f0elemf0elem.AdditionalS3DataSource = f0elemf0elemf0
					}
					if f0elemf0iter.ContainerHostname != nil {
						f0elemf0elem.ContainerHostname = f0elemf0iter.ContainerHostname
					}
					if f0elemf0iter.Environment != nil {
						f0elemf0elem.Environment = aws.ToStringMap(f0elemf0iter.Environment)
					}
					if f0elemf0iter.Framework != nil {
						f0elemf0elem.Framework = f0elemf0iter.Framework
					}
					if f0elemf0iter.FrameworkVersion != nil {
						f0elemf0elem.FrameworkVersion = f0elemf0iter.FrameworkVersion
					}
					if f0elemf0iter.Image != nil {
						f0elemf0elem.Image = f0elemf0iter.Image
					}
					if f0elemf0iter.ImageDigest != nil {
						f0elemf0elem.ImageDigest = f0elemf0iter.ImageDigest
					}
					if f0elemf0iter.ModelDataURL != nil {
						f0elemf0elem.ModelDataUrl = f0elemf0iter.ModelDataURL
					}
					if f0elemf0iter.ModelInput != nil {
						f0elemf0elemf8 := &svcsdktypes.ModelInput{}
						if f0elemf0iter.ModelInput.DataInputConfig != nil {
							f0elemf0elemf8.DataInputConfig = f0elemf0iter.ModelInput.DataInputConfig
						}
						f0elemf0elem.ModelInput = f0elemf0elemf8
					}
					if f0elemf0iter.NearestModelName != nil {
						f0elemf0elem.NearestModelName = f0elemf0iter.NearestModelName
					}
					if f0elemf0iter.ProductID != nil {
						f0elemf0elem.ProductId = f0elemf0iter.ProductID
					}
					f0elemf0 = append(f0elemf0, *f0elemf0elem)
				}
				f0elem.Containers = f0elemf0
			}
			if f0iter.Description != nil {
				f0elem.Description = f0iter.Description
			}
			if f0iter.Name != nil {
				f0elem.Name = f0iter.Name
			}
			if f0iter.SupportedContentTypes != nil {
				f0elem.SupportedContentTypes = aws.ToStringSlice(f0iter.SupportedContentTypes)
			}
			if f0iter.SupportedRealtimeInferenceInstanceTypes != nil {
				f0elemf4 := []svcsdktypes.ProductionVariantInstanceType{}
				for _, f0elemf4iter := range f0iter.SupportedRealtimeInferenceInstanceTypes {
					var f0elemf4elem string
					f0elemf4elem = string(*f0elemf4iter)
					f0elemf4 = append(f0elemf4, svcsdktypes.ProductionVariantInstanceType(f0elemf4elem))
				}
				f0elem.SupportedRealtimeInferenceInstanceTypes = f0elemf4
			}
			if f0iter.SupportedResponseMIMETypes != nil {
				f0elem.SupportedResponseMIMETypes = aws.ToStringSlice(f0iter.SupportedResponseMIMETypes)
			}
			if f0iter.SupportedTransformInstanceTypes != nil {
				f0elemf6 := []svcsdktypes.TransformInstanceType{}
				for _, f0elemf6iter := range f0iter.SupportedTransformInstanceTypes {
					var f0elemf6elem string
					f0elemf6elem = string(*f0elemf6iter)
					f0elemf6 = append(f0elemf6, svcsdktypes.TransformInstanceType(f0elemf6elem))
				}
				f0elem.SupportedTransformInstanceTypes = f0elemf6
			}
			f0 = append(f0, *f0elem)
		}
		res.AdditionalInferenceSpecifications = f0
	}
	if r.ko.Spec.CertifyForMarketplace != nil {
		res.CertifyForMarketplace = r.ko.Spec.CertifyForMarketplace
	}
	if r.ko.Spec.ClientToken != nil {
		res.ClientToken = r.ko.Spec.ClientToken
	}
	if r.ko.Spec.CustomerMetadataProperties != nil {
		res.CustomerMetadataProperties = aws.ToStringMap(r.ko.Spec.CustomerMetadataProperties)
	}
	if r.ko.Spec.Domain != nil {
		res.Domain = r.ko.Spec.Domain
	}
	if r.ko.Spec.DriftCheckBaselines != nil {
		f5 := &svcsdktypes.DriftCheckBaselines{}
		if r.ko.Spec.DriftCheckBaselines.Bias != nil {
			f5f0 := &svcsdktypes.DriftCheckBias{}
			if r.ko.Spec.DriftCheckBaselines.Bias.ConfigFile != nil {
				f5f0f0 := &svcsdktypes.FileSource{}
				if r.ko.Spec.DriftCheckBaselines.Bias.ConfigFile.ContentDigest != nil {
					f5f0f0.ContentDigest = r.ko.Spec.DriftCheckBaselines.Bias.ConfigFile.ContentDigest
				}
				if r.ko.Spec.DriftCheckBaselines.Bias.ConfigFile.ContentType != nil {
					f5f0f0.ContentType = r.ko.Spec.DriftCheckBaselines.Bias.ConfigFile.ContentType
				}
				if r.ko.Spec.DriftCheckBaselines.Bias.ConfigFile.S3URI != nil {
					f5f0f0.S3Uri = r.ko.Spec.DriftCheckBaselines.Bias.ConfigFile.S3URI
				}
				f5f0.ConfigFile = f5f0f0
			}
			if r.ko.Spec.DriftCheckBaselines.Bias.PostTrainingConstraints != nil {
				f5f0f1 := &svcsdktypes.MetricsSource{}
				if r.ko.Spec.DriftCheckBaselines.Bias.PostTrainingConstraints.ContentDigest != nil {
					f5f0f1.ContentDigest = r.ko.Spec.DriftCheckBaselines.Bias.PostTrainingConstraints.ContentDigest
				}
				if r.ko.Spec.DriftCheckBaselines.Bias.PostTrainingConstraints.ContentType != nil {
					f5f0f1.ContentType = r.ko.Spec.DriftCheckBaselines.Bias.PostTrainingConstraints.ContentType
				}
				if r.ko.Spec.DriftCheckBaselines.Bias.PostTrainingConstraints.S3URI != nil {
					f5f0f1.S3Uri = r.ko.Spec.DriftCheckBaselines.Bias.PostTrainingConstraints.S3URI
				}
				f5f0.PostTrainingConstraints = f5f0f1
			}
			if r.ko.Spec.DriftCheckBaselines.Bias.PreTrainingConstraints != nil {
				f5f0f2 := &svcsdktypes.MetricsSource{}
				if r.ko.Spec.DriftCheckBaselines.Bias.PreTrainingConstraints.ContentDigest != nil {
					f5f0f2.ContentDigest = r.ko.Spec.DriftCheckBaselines.Bias.PreTrainingConstraints.ContentDigest
				}
				if r.ko.Spec.DriftCheckBaselines.Bias.PreTrainingConstraints.ContentType != nil {
					f5f0f2.ContentType = r.ko.Spec.DriftCheckBaselines.Bias.PreTrainingConstraints.ContentType
				}
				if r.ko.Spec.DriftCheckBaselines.Bias.PreTrainingConstraints.S3URI != nil {
					f5f0f2.S3Uri = r.ko.Spec.DriftCheckBaselines.Bias.PreTrainingConstraints.S3URI
				}
				f5f0.PreTrainingConstraints = f5f0f2
			}
			f5.Bias = f5f0
		}
		if r.ko.Spec.DriftCheckBaselines.Explainability != nil {
			f5f1 := &svcsdktypes.DriftCheckExplainability{}
			if r.ko.Spec.DriftCheckBaselines.Explainability.ConfigFile != nil {
				f5f1f0 := &svcsdktypes.FileSource{}
				if r.ko.Spec.DriftCheckBaselines.Explainability.ConfigFile.ContentDigest != nil {
					f5f1f0.ContentDigest = r.ko.Spec.DriftCheckBaselines.Explainability.ConfigFile.ContentDigest
				}
				if r.ko.Spec.DriftCheckBaselines.Explainability.ConfigFile.ContentType != nil {
					f5f1f0.ContentType = r.ko.Spec.DriftCheckBaselines.Explainability.ConfigFile.ContentType
				}
				if r.ko.Spec.DriftCheckBaselines.Explainability.ConfigFile.S3URI != nil {
					f5f1f0.S3Uri = r.ko.Spec.DriftCheckBaselines.Explainability.ConfigFile.S3URI
				}
				f5f1.ConfigFile = f5f1f0
			}
			if r.ko.Spec.DriftCheckBaselines.Explainability.Constraints != nil {
				f5f1f1 := &svcsdktypes.MetricsSource{}
				if r.ko.Spec.DriftCheckBaselines.Explainability.Constraints.ContentDigest != nil {
					f5f1f1.ContentDigest = r.ko.Spec.DriftCheckBaselines.Explainability.Constraints.ContentDigest
				}
				if r.ko.Spec.DriftCheckBaselines.Explainability.Constraints.ContentType != nil {
					f5f1f1.ContentType = r.ko.Spec.DriftCheckBaselines.Explainability.Constraints.ContentType
				}
				if r.ko.Spec.DriftCheckBaselines.Explainability.Constraints.S3URI != nil {
					f5f1f1.S3Uri = r.ko.Spec.DriftCheckBaselines.Explainability.Constraints.S3URI
				}
				f5f1.Constraints = f5f1f1
			}
			f5.Explainability = f5f1
		}
		if r.ko.Spec.DriftCheckBaselines.ModelDataQuality != nil {
			f5f2 := &svcsdktypes.DriftCheckModelDataQuality{}
			if r.ko.Spec.DriftCheckBaselines.ModelDataQuality.Constraints != nil {
				f5f2f0 := &svcsdktypes.MetricsSource{}
				if r.ko.Spec.DriftCheckBaselines.ModelDataQuality.Constraints.ContentDigest != nil {
					f5f2f0.ContentDigest = r.ko.Spec.DriftCheckBaselines.ModelDataQuality.Constraints.ContentDigest
				}
				if r.ko.Spec.DriftCheckBaselines.ModelDataQuality.Constraints.ContentType != nil {
					f5f2f0.ContentType = r.ko.Spec.DriftCheckBaselines.ModelDataQuality.Constraints.ContentType
				}
				if r.ko.Spec.DriftCheckBaselines.ModelDataQuality.Constraints.S3URI != nil {
					f5f2f0.S3Uri = r.ko.Spec.DriftCheckBaselines.ModelDataQuality.Constraints.S3URI
				}
				f5f2.Constraints = f5f2f0
			}
			if r.ko.Spec.DriftCheckBaselines.ModelDataQuality.Statistics != nil {
				f5f2f1 := &svcsdktypes.MetricsSource{}
				if r.ko.Spec.DriftCheckBaselines.ModelDataQuality.Statistics.ContentDigest != nil {
					f5f2f1.ContentDigest = r.ko.Spec.DriftCheckBaselines.ModelDataQuality.Statistics.ContentDigest
				}
				if r.ko.Spec.DriftCheckBaselines.ModelDataQuality.Statistics.ContentType != nil {
					f5f2f1.ContentType = r.ko.Spec.DriftCheckBaselines.ModelDataQuality.Statistics.ContentType
				}
				if r.ko.Spec.DriftCheckBaselines.ModelDataQuality.Statistics.S3URI != nil {
					f5f2f1.S3Uri = r.ko.Spec.DriftCheckBaselines.ModelDataQuality.Statistics.S3URI
				}
				f5f2.Statistics = f5f2f1
			}
			f5.ModelDataQuality = f5f2
		}
		if r.ko.Spec.DriftCheckBaselines.ModelQuality != nil {
			f5f3 := &svcsdktypes.DriftCheckModelQuality{}
			if r.ko.Spec.DriftCheckBaselines.ModelQuality.Constraints != nil {
				f5f3f0 := &svcsdktypes.MetricsSource{}
				if r.ko.Spec.DriftCheckBaselines.ModelQuality.Constraints.ContentDigest != nil {
					f5f3f0.ContentDigest = r.ko.Spec.DriftCheckBaselines.ModelQuality.Constraints.ContentDigest
				}
				if r.ko.Spec.DriftCheckBaselines.ModelQuality.Constraints.ContentType != nil {
					f5f3f0.ContentType = r.ko.Spec.DriftCheckBaselines.ModelQuality.Constraints.ContentType
				}
				if r.ko.Spec.DriftCheckBaselines.ModelQuality.Constraints.S3URI != nil {
					f5f3f0.S3Uri = r.ko.Spec.DriftCheckBaselines.ModelQuality.Constraints.S3URI
				}
				f5f3.Constraints = f5f3f0
			}
			if r.ko.Spec.DriftCheckBaselines.ModelQuality.Statistics != nil {
				f5f3f1 := &svcsdktypes.MetricsSource{}
				if r.ko.Spec.DriftCheckBaselines.ModelQuality.Statistics.ContentDigest != nil {
					f5f3f1.ContentDigest = r.ko.Spec.DriftCheckBaselines.ModelQuality.Statistics.ContentDigest
				}
				if r.ko.Spec.DriftCheckBaselines.ModelQuality.Statistics.ContentType != nil {
					f5f3f1.ContentType = r.ko.Spec.DriftCheckBaselines.ModelQuality.Statistics.ContentType
				}
				if r.ko.Spec.DriftCheckBaselines.ModelQuality.Statistics.S3URI != nil {
					f5f3f1.S3Uri = r.ko.Spec.DriftCheckBaselines.ModelQuality.Statistics.S3URI
				}
				f5f3.Statistics = f5f3f1
			}
			f5.ModelQuality = f5f3
		}
		res.DriftCheckBaselines = f5
	}
	if r.ko.Spec.InferenceSpecification != nil {
		f6 := &svcsdktypes.InferenceSpecification{}
		if r.ko.Spec.InferenceSpecification.Containers != nil {
			f6f0 := []svcsdktypes.ModelPackageContainerDefinition{}
			for _, f6f0iter := range r.ko.Spec.InferenceSpecification.Containers {
				f6f0elem := &svcsdktypes.ModelPackageContainerDefinition{}
				if f6f0iter.AdditionalS3DataSource != nil {
					f6f0elemf0 := &svcsdktypes.AdditionalS3DataSource{}
					if f6f0iter.AdditionalS3DataSource.CompressionType != nil {
						f6f0elemf0.CompressionType = svcsdktypes.CompressionType(*f6f0iter.AdditionalS3DataSource.CompressionType)
					}
					if f6f0iter.AdditionalS3DataSource.S3DataType != nil {
						f6f0elemf0.S3DataType = svcsdktypes.AdditionalS3DataSourceDataType(*f6f0iter.AdditionalS3DataSource.S3DataType)
					}
					if f6f0iter.AdditionalS3DataSource.S3URI != nil {
						f6f0elemf0.S3Uri = f6f0iter.AdditionalS3DataSource.S3URI
					}
					f6f0elem.AdditionalS3DataSource = f6f0elemf0
				}
				if f6f0iter.ContainerHostname != nil {
					f6f0elem.ContainerHostname = f6f0iter.ContainerHostname
				}
				if f6f0iter.Environment != nil {
					f6f0elem.Environment = aws.ToStringMap(f6f0iter.Environment)
				}
				if f6f0iter.Framework != nil {
					f6f0elem.Framework = f6f0iter.Framework
				}
				if f6f0iter.FrameworkVersion != nil {
					f6f0elem.FrameworkVersion = f6f0iter.FrameworkVersion
				}
				if f6f0iter.Image != nil {
					f6f0elem.Image = f6f0iter.Image
				}
				if f6f0iter.ImageDigest != nil {
					f6f0elem.ImageDigest = f6f0iter.ImageDigest
				}
				if f6f0iter.ModelDataURL != nil {
					f6f0elem.ModelDataUrl = f6f0iter.ModelDataURL
				}
				if f6f0iter.ModelInput != nil {
					f6f0elemf8 := &svcsdktypes.ModelInput{}
					if f6f0iter.ModelInput.DataInputConfig != nil {
						f6f0elemf8.DataInputConfig = f6f0iter.ModelInput.DataInputConfig
					}
					f6f0elem.ModelInput = f6f0elemf8
				}
				if f6f0iter.NearestModelName != nil {
					f6f0elem.NearestModelName = f6f0iter.NearestModelName
				}
				if f6f0iter.ProductID != nil {
					f6f0elem.ProductId = f6f0iter.ProductID
				}
				f6f0 = append(f6f0, *f6f0elem)
			}
			f6.Containers = f6f0
		}
		if r.ko.Spec.InferenceSpecification.SupportedContentTypes != nil {
			f6.SupportedContentTypes = aws.ToStringSlice(r.ko.Spec.InferenceSpecification.SupportedContentTypes)
		}
		if r.ko.Spec.InferenceSpecification.SupportedRealtimeInferenceInstanceTypes != nil {
			f6f2 := []svcsdktypes.ProductionVariantInstanceType{}
			for _, f6f2iter := range r.ko.Spec.InferenceSpecification.SupportedRealtimeInferenceInstanceTypes {
				var f6f2elem string
				f6f2elem = string(*f6f2iter)
				f6f2 = append(f6f2, svcsdktypes.ProductionVariantInstanceType(f6f2elem))
			}
			f6.SupportedRealtimeInferenceInstanceTypes = f6f2
		}
		if r.ko.Spec.InferenceSpecification.SupportedResponseMIMETypes != nil {
			f6.SupportedResponseMIMETypes = aws.ToStringSlice(r.ko.Spec.InferenceSpecification.SupportedResponseMIMETypes)
		}
		if r.ko.Spec.InferenceSpecification.SupportedTransformInstanceTypes != nil {
			f6f4 := []svcsdktypes.TransformInstanceType{}
			for _, f6f4iter := range r.ko.Spec.InferenceSpecification.SupportedTransformInstanceTypes {
				var f6f4elem string
				f6f4elem = string(*f6f4iter)
				f6f4 = append(f6f4, svcsdktypes.TransformInstanceType(f6f4elem))
			}
			f6.SupportedTransformInstanceTypes = f6f4
		}
		res.InferenceSpecification = f6
	}
	if r.ko.Spec.MetadataProperties != nil {
		f7 := &svcsdktypes.MetadataProperties{}
		if r.ko.Spec.MetadataProperties.CommitID != nil {
			f7.CommitId = r.ko.Spec.MetadataProperties.CommitID
		}
		if r.ko.Spec.MetadataProperties.GeneratedBy != nil {
			f7.GeneratedBy = r.ko.Spec.MetadataProperties.GeneratedBy
		}
		if r.ko.Spec.MetadataProperties.ProjectID != nil {
			f7.ProjectId = r.ko.Spec.MetadataProperties.ProjectID
		}
		if r.ko.Spec.MetadataProperties.Repository != nil {
			f7.Repository = r.ko.Spec.MetadataProperties.Repository
		}
		res.MetadataProperties = f7
	}
	if r.ko.Spec.ModelApprovalStatus != nil {
		res.ModelApprovalStatus = svcsdktypes.ModelApprovalStatus(*r.ko.Spec.ModelApprovalStatus)
	}
	if r.ko.Spec.ModelMetrics != nil {
		f9 := &svcsdktypes.ModelMetrics{}
		if r.ko.Spec.ModelMetrics.Bias != nil {
			f9f0 := &svcsdktypes.Bias{}
			if r.ko.Spec.ModelMetrics.Bias.PostTrainingReport != nil {
				f9f0f0 := &svcsdktypes.MetricsSource{}
				if r.ko.Spec.ModelMetrics.Bias.PostTrainingReport.ContentDigest != nil {
					f9f0f0.ContentDigest = r.ko.Spec.ModelMetrics.Bias.PostTrainingReport.ContentDigest
				}
				if r.ko.Spec.ModelMetrics.Bias.PostTrainingReport.ContentType != nil {
					f9f0f0.ContentType = r.ko.Spec.ModelMetrics.Bias.PostTrainingReport.ContentType
				}
				if r.ko.Spec.ModelMetrics.Bias.PostTrainingReport.S3URI != nil {
					f9f0f0.S3Uri = r.ko.Spec.ModelMetrics.Bias.PostTrainingReport.S3URI
				}
				f9f0.PostTrainingReport = f9f0f0
			}
			if r.ko.Spec.ModelMetrics.Bias.PreTrainingReport != nil {
				f9f0f1 := &svcsdktypes.MetricsSource{}
				if r.ko.Spec.ModelMetrics.Bias.PreTrainingReport.ContentDigest != nil {
					f9f0f1.ContentDigest = r.ko.Spec.ModelMetrics.Bias.PreTrainingReport.ContentDigest
				}
				if r.ko.Spec.ModelMetrics.Bias.PreTrainingReport.ContentType != nil {
					f9f0f1.ContentType = r.ko.Spec.ModelMetrics.Bias.PreTrainingReport.ContentType
				}
				if r.ko.Spec.ModelMetrics.Bias.PreTrainingReport.S3URI != nil {
					f9f0f1.S3Uri = r.ko.Spec.ModelMetrics.Bias.PreTrainingReport.S3URI
				}
				f9f0.PreTrainingReport = f9f0f1
			}
			if r.ko.Spec.ModelMetrics.Bias.Report != nil {
				f9f0f2 := &svcsdktypes.MetricsSource{}
				if r.ko.Spec.ModelMetrics.Bias.Report.ContentDigest != nil {
					f9f0f2.ContentDigest = r.ko.Spec.ModelMetrics.Bias.Report.ContentDigest
				}
				if r.ko.Spec.ModelMetrics.Bias.Report.ContentType != nil {
					f9f0f2.ContentType = r.ko.Spec.ModelMetrics.Bias.Report.ContentType
				}
				if r.ko.Spec.ModelMetrics.Bias.Report.S3URI != nil {
					f9f0f2.S3Uri = r.ko.Spec.ModelMetrics.Bias.Report.S3URI
				}
				f9f0.Report = f9f0f2
			}
			f9.Bias = f9f0
		}
		if r.ko.Spec.ModelMetrics.Explainability != nil {
			f9f1 := &svcsdktypes.Explainability{}
			if r.ko.Spec.ModelMetrics.Explainability.Report != nil {
				f9f1f0 := &svcsdktypes.MetricsSource{}
				if r.ko.Spec.ModelMetrics.Explainability.Report.ContentDigest != nil {
					f9f1f0.ContentDigest = r.ko.Spec.ModelMetrics.Explainability.Report.ContentDigest
				}
				if r.ko.Spec.ModelMetrics.Explainability.Report.ContentType != nil {
					f9f1f0.ContentType = r.ko.Spec.ModelMetrics.Explainability.Report.ContentType
				}
				if r.ko.Spec.ModelMetrics.Explainability.Report.S3URI != nil {
					f9f1f0.S3Uri = r.ko.Spec.ModelMetrics.Explainability.Report.S3URI
				}
				f9f1.Report = f9f1f0
			}
			f9.Explainability = f9f1
		}
		if r.ko.Spec.ModelMetrics.ModelDataQuality != nil {
			f9f2 := &svcsdktypes.ModelDataQuality{}
			if r.ko.Spec.ModelMetrics.ModelDataQuality.Constraints != nil {
				f9f2f0 := &svcsdktypes.MetricsSource{}
				if r.ko.Spec.ModelMetrics.ModelDataQuality.Constraints.ContentDigest != nil {
					f9f2f0.ContentDigest = r.ko.Spec.ModelMetrics.ModelDataQuality.Constraints.ContentDigest
				}
				if r.ko.Spec.ModelMetrics.ModelDataQuality.Constraints.ContentType != nil {
					f9f2f0.ContentType = r.ko.Spec.ModelMetrics.ModelDataQuality.Constraints.ContentType
				}
				if r.ko.Spec.ModelMetrics.ModelDataQuality.Constraints.S3URI != nil {
					f9f2f0.S3Uri = r.ko.Spec.ModelMetrics.ModelDataQuality.Constraints.S3URI
				}
				f9f2.Constraints = f9f2f0
			}
			if r.ko.Spec.ModelMetrics.ModelDataQuality.Statistics != nil {
				f9f2f1 := &svcsdktypes.MetricsSource{}
				if r.ko.Spec.ModelMetrics.ModelDataQuality.Statistics.ContentDigest != nil {
					f9f2f1.ContentDigest = r.ko.Spec.ModelMetrics.ModelDataQuality.Statistics.ContentDigest
				}
				if r.ko.Spec.ModelMetrics.ModelDataQuality.Statistics.ContentType != nil {
					f9f2f1.ContentType = r.ko.Spec.ModelMetrics.ModelDataQuality.Statistics.ContentType
				}
				if r.ko.Spec.ModelMetrics.ModelDataQuality.Statistics.S3URI != nil {
					f9f2f1.S3Uri = r.ko.Spec.ModelMetrics.ModelDataQuality.Statistics.S3URI
				}
				f9f2.Statistics = f9f2f1
			}
			f9.ModelDataQuality = f9f2
		}
		if r.ko.Spec.ModelMetrics.ModelQuality != nil {
			f9f3 := &svcsdktypes.ModelQuality{}
			if r.ko.Spec.ModelMetrics.ModelQuality.Constraints != nil {
				f9f3f0 := &svcsdktypes.MetricsSource{}
				if r.ko.Spec.ModelMetrics.ModelQuality.Constraints.ContentDigest != nil {
					f9f3f0.ContentDigest = r.ko.Spec.ModelMetrics.ModelQuality.Constraints.ContentDigest
				}
				if r.ko.Spec.ModelMetrics.ModelQuality.Constraints.ContentType != nil {
					f9f3f0.ContentType = r.ko.Spec.ModelMetrics.ModelQuality.Constraints.ContentType
				}
				if r.ko.Spec.ModelMetrics.ModelQuality.Constraints.S3URI != nil {
					f9f3f0.S3Uri = r.ko.Spec.ModelMetrics.ModelQuality.Constraints.S3URI
				}
				f9f3.Constraints = f9f3f0
			}
			if r.ko.Spec.ModelMetrics.ModelQuality.Statistics != nil {
				f9f3f1 := &svcsdktypes.MetricsSource{}
				if r.ko.Spec.ModelMetrics.ModelQuality.Statistics.ContentDigest != nil {
					f9f3f1.ContentDigest = r.ko.Spec.ModelMetrics.ModelQuality.Statistics.ContentDigest
				}
				if r.ko.Spec.ModelMetrics.ModelQuality.Statistics.ContentType != nil {
					f9f3f1.ContentType = r.ko.Spec.ModelMetrics.ModelQuality.Statistics.ContentType
				}
				if r.ko.Spec.ModelMetrics.ModelQuality.Statistics.S3URI != nil {
					f9f3f1.S3Uri = r.ko.Spec.ModelMetrics.ModelQuality.Statistics.S3URI
				}
				f9f3.Statistics = f9f3f1
			}
			f9.ModelQuality = f9f3
		}
		res.ModelMetrics = f9
	}
	if r.ko.Spec.ModelPackageDescription != nil {
		res.ModelPackageDescription = r.ko.Spec.ModelPackageDescription
	}
	if r.ko.Spec.ModelPackageGroupName != nil {
		res.ModelPackageGroupName = r.ko.Spec.ModelPackageGroupName
	}
	if r.ko.Spec.ModelPackageName != nil {
		res.ModelPackageName = r.ko.Spec.ModelPackageName
	}
	if r.ko.Spec.SamplePayloadURL != nil {
		res.SamplePayloadUrl = r.ko.Spec.SamplePayloadURL
	}
	if r.ko.Spec.SkipModelValidation != nil {
		res.SkipModelValidation = svcsdktypes.SkipModelValidation(*r.ko.Spec.SkipModelValidation)
	}
	if r.ko.Spec.SourceAlgorithmSpecification != nil {
		f15 := &svcsdktypes.SourceAlgorithmSpecification{}
		if r.ko.Spec.SourceAlgorithmSpecification.SourceAlgorithms != nil {
			f15f0 := []svcsdktypes.SourceAlgorithm{}
			for _, f15f0iter := range r.ko.Spec.SourceAlgorithmSpecification.SourceAlgorithms {
				f15f0elem := &svcsdktypes.SourceAlgorithm{}
				if f15f0iter.AlgorithmName != nil {
					f15f0elem.AlgorithmName = f15f0iter.AlgorithmName
				}
				if f15f0iter.ModelDataURL != nil {
					f15f0elem.ModelDataUrl = f15f0iter.ModelDataURL
				}
				f15f0 = append(f15f0, *f15f0elem)
			}
			f15.SourceAlgorithms = f15f0
		}
		res.SourceAlgorithmSpecification = f15
	}
	if r.ko.Spec.Tags != nil {
		f16 := []svcsdktypes.Tag{}
		for _, f16iter := range r.ko.Spec.Tags {
			f16elem := &svcsdktypes.Tag{}
			if f16iter.Key != nil {
				f16elem.Key = f16iter.Key
			}
			if f16iter.Value != nil {
				f16elem.Value = f16iter.Value
			}
			f16 = append(f16, *f16elem)
		}
		res.Tags = f16
	}
	if r.ko.Spec.Task != nil {
		res.Task = r.ko.Spec.Task
	}
	if r.ko.Spec.ValidationSpecification != nil {
		f18 := &svcsdktypes.ModelPackageValidationSpecification{}
		if r.ko.Spec.ValidationSpecification.ValidationProfiles != nil {
			f18f0 := []svcsdktypes.ModelPackageValidationProfile{}
			for _, f18f0iter := range r.ko.Spec.ValidationSpecification.ValidationProfiles {
				f18f0elem := &svcsdktypes.ModelPackageValidationProfile{}
				if f18f0iter.ProfileName != nil {
					f18f0elem.ProfileName = f18f0iter.ProfileName
				}
				if f18f0iter.TransformJobDefinition != nil {
					f18f0elemf1 := &svcsdktypes.TransformJobDefinition{}
					if f18f0iter.TransformJobDefinition.BatchStrategy != nil {
						f18f0elemf1.BatchStrategy = svcsdktypes.BatchStrategy(*f18f0iter.TransformJobDefinition.BatchStrategy)
					}
					if f18f0iter.TransformJobDefinition.Environment != nil {
						f18f0elemf1.Environment = aws.ToStringMap(f18f0iter.TransformJobDefinition.Environment)
					}
					if f18f0iter.TransformJobDefinition.MaxConcurrentTransforms != nil {
						maxConcurrentTransformsCopy0 := *f18f0iter.TransformJobDefinition.MaxConcurrentTransforms
						if maxConcurrentTransformsCopy0 > math.MaxInt32 || maxConcurrentTransformsCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field MaxConcurrentTransforms is of type int32")
						}
						maxConcurrentTransformsCopy := int32(maxConcurrentTransformsCopy0)
						f18f0elemf1.MaxConcurrentTransforms = &maxConcurrentTransformsCopy
					}
					if f18f0iter.TransformJobDefinition.MaxPayloadInMB != nil {
						maxPayloadInMBCopy0 := *f18f0iter.TransformJobDefinition.MaxPayloadInMB
						if maxPayloadInMBCopy0 > math.MaxInt32 || maxPayloadInMBCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field MaxPayloadInMB is of type int32")
						}
						maxPayloadInMBCopy := int32(maxPayloadInMBCopy0)
						f18f0elemf1.MaxPayloadInMB = &maxPayloadInMBCopy
					}
					if f18f0iter.TransformJobDefinition.TransformInput != nil {
						f18f0elemf1f4 := &svcsdktypes.TransformInput{}
						if f18f0iter.TransformJobDefinition.TransformInput.CompressionType != nil {
							f18f0elemf1f4.CompressionType = svcsdktypes.CompressionType(*f18f0iter.TransformJobDefinition.TransformInput.CompressionType)
						}
						if f18f0iter.TransformJobDefinition.TransformInput.ContentType != nil {
							f18f0elemf1f4.ContentType = f18f0iter.TransformJobDefinition.TransformInput.ContentType
						}
						if f18f0iter.TransformJobDefinition.TransformInput.DataSource != nil {
							f18f0elemf1f4f2 := &svcsdktypes.TransformDataSource{}
							if f18f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource != nil {
								f18f0elemf1f4f2f0 := &svcsdktypes.TransformS3DataSource{}
								if f18f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource.S3DataType != nil {
									f18f0elemf1f4f2f0.S3DataType = svcsdktypes.S3DataType(*f18f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource.S3DataType)
								}
								if f18f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource.S3URI != nil {
									f18f0elemf1f4f2f0.S3Uri = f18f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource.S3URI
								}
								f18f0elemf1f4f2.S3DataSource = f18f0elemf1f4f2f0
							}
							f18f0elemf1f4.DataSource = f18f0elemf1f4f2
						}
						if f18f0iter.TransformJobDefinition.TransformInput.SplitType != nil {
							f18f0elemf1f4.SplitType = svcsdktypes.SplitType(*f18f0iter.TransformJobDefinition.TransformInput.SplitType)
						}
						f18f0elemf1.TransformInput = f18f0elemf1f4
					}
					if f18f0iter.TransformJobDefinition.TransformOutput != nil {
						f18f0elemf1f5 := &svcsdktypes.TransformOutput{}
						if f18f0iter.TransformJobDefinition.TransformOutput.Accept != nil {
							f18f0elemf1f5.Accept = f18f0iter.TransformJobDefinition.TransformOutput.Accept
						}
						if f18f0iter.TransformJobDefinition.TransformOutput.AssembleWith != nil {
							f18f0elemf1f5.AssembleWith = svcsdktypes.AssemblyType(*f18f0iter.TransformJobDefinition.TransformOutput.AssembleWith)
						}
						if f18f0iter.TransformJobDefinition.TransformOutput.KMSKeyID != nil {
							f18f0elemf1f5.KmsKeyId = f18f0iter.TransformJobDefinition.TransformOutput.KMSKeyID
						}
						if f18f0iter.TransformJobDefinition.TransformOutput.S3OutputPath != nil {
							f18f0elemf1f5.S3OutputPath = f18f0iter.TransformJobDefinition.TransformOutput.S3OutputPath
						}
						f18f0elemf1.TransformOutput = f18f0elemf1f5
					}
					if f18f0iter.TransformJobDefinition.TransformResources != nil {
						f18f0elemf1f6 := &svcsdktypes.TransformResources{}
						if f18f0iter.TransformJobDefinition.TransformResources.InstanceCount != nil {
							instanceCountCopy0 := *f18f0iter.TransformJobDefinition.TransformResources.InstanceCount
							if instanceCountCopy0 > math.MaxInt32 || instanceCountCopy0 < math.MinInt32 {
								return nil, fmt.Errorf("error: field InstanceCount is of type int32")
							}
							instanceCountCopy := int32(instanceCountCopy0)
							f18f0elemf1f6.InstanceCount = &instanceCountCopy
						}
						if f18f0iter.TransformJobDefinition.TransformResources.InstanceType != nil {
							f18f0elemf1f6.InstanceType = svcsdktypes.TransformInstanceType(*f18f0iter.TransformJobDefinition.TransformResources.InstanceType)
						}
						if f18f0iter.TransformJobDefinition.TransformResources.VolumeKMSKeyID != nil {
							f18f0elemf1f6.VolumeKmsKeyId = f18f0iter.TransformJobDefinition.TransformResources.VolumeKMSKeyID
						}
						f18f0elemf1.TransformResources = f18f0elemf1f6
					}
					f18f0elem.TransformJobDefinition = f18f0elemf1
				}
				f18f0 = append(f18f0, *f18f0elem)
			}
			f18.ValidationProfiles = f18f0
		}
		if r.ko.Spec.ValidationSpecification.ValidationRole != nil {
			f18.ValidationRole = r.ko.Spec.ValidationSpecification.ValidationRole
		}
		res.ValidationSpecification = f18
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	if err = rm.requeueUntilCanModify(ctx, latest); err != nil {
		return nil, err
	}
	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.UpdateModelPackageOutput
	_ = resp
	resp, err = rm.sdkapi.UpdateModelPackage(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdateModelPackage", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.ModelPackageArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.ModelPackageArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	rm.setStatusDefaults(ko)
	rm.customSetOutput(&resource{ko})
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.UpdateModelPackageInput, error) {
	res := &svcsdk.UpdateModelPackageInput{}

	if r.ko.Spec.ApprovalDescription != nil {
		res.ApprovalDescription = r.ko.Spec.ApprovalDescription
	}
	if r.ko.Spec.ClientToken != nil {
		res.ClientToken = r.ko.Spec.ClientToken
	}
	if r.ko.Spec.CustomerMetadataProperties != nil {
		res.CustomerMetadataProperties = aws.ToStringMap(r.ko.Spec.CustomerMetadataProperties)
	}
	if r.ko.Spec.ModelApprovalStatus != nil {
		res.ModelApprovalStatus = svcsdktypes.ModelApprovalStatus(*r.ko.Spec.ModelApprovalStatus)
	}
	if r.ko.Status.ACKResourceMetadata != nil && r.ko.Status.ACKResourceMetadata.ARN != nil {
		res.ModelPackageArn = (*string)(r.ko.Status.ACKResourceMetadata.ARN)
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	if err = rm.requeueUntilCanModify(ctx, r); err != nil {
		return r, err
	}

	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	// If ModelPackageName not set after newRequestPayload, attempt to use ARN
	// This is because versioned modelpackage uses ARN not name
	if input.ModelPackageName == nil {
		arn := r.Identifiers().ARN()
		if arn == nil {
			return nil, ackerr.NotFound
		}
		input.ModelPackageName = aws.String(string(*arn))
	}
	var resp *svcsdk.DeleteModelPackageOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteModelPackage(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteModelPackage", err)

	if err == nil {
		if observed, err := rm.sdkFind(ctx, r); err != ackerr.NotFound {
			if err != nil {
				return nil, err
			}
			r.SetStatus(observed)
			return r, requeueWaitWhileDeleting
		}
	}

	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteModelPackageInput, error) {
	res := &svcsdk.DeleteModelPackageInput{}

	if r.ko.Spec.ModelPackageName != nil {
		res.ModelPackageName = r.ko.Spec.ModelPackageName
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.ModelPackage,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	// custom update conditions
	customUpdate := rm.CustomUpdateConditions(ko, r, err)
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil || customUpdate {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}

	var terminalErr smithy.APIError
	if !errors.As(err, &terminalErr) {
		return false
	}
	switch terminalErr.ErrorCode() {
	case "InvalidParameterCombination",
		"InvalidParameterValue",
		"MissingParameter",
		"ConflictException":
		return true
	default:
		return false
	}
}
