// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package model_package

import (
	"context"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/sagemaker"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/sagemaker-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.SageMaker{}
	_ = &svcapitypes.ModelPackage{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer exit(err)
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}
	// If ModelPackageName not set after newRequestPayload, attempt to use ARN
	// This is because versioned modelpackage uses ARN not name
	if input.ModelPackageName == nil {
		arn := r.Identifiers().ARN()
		if arn == nil {
			return nil, ackerr.NotFound
		}
		input.SetModelPackageName(string(*arn))
	}

	var resp *svcsdk.DescribeModelPackageOutput
	resp, err = rm.sdkapi.DescribeModelPackageWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "DescribeModelPackage", err)
	if err != nil {
		if awsErr, ok := ackerr.AWSError(err); ok && awsErr.Code() == "ValidationException" && strings.HasSuffix(awsErr.Message(), "does not exist.") {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.ApprovalDescription != nil {
		ko.Spec.ApprovalDescription = resp.ApprovalDescription
	} else {
		ko.Spec.ApprovalDescription = nil
	}
	if resp.CertifyForMarketplace != nil {
		ko.Spec.CertifyForMarketplace = resp.CertifyForMarketplace
	} else {
		ko.Spec.CertifyForMarketplace = nil
	}
	if resp.CreationTime != nil {
		ko.Status.CreationTime = &metav1.Time{*resp.CreationTime}
	} else {
		ko.Status.CreationTime = nil
	}
	if resp.InferenceSpecification != nil {
		f4 := &svcapitypes.InferenceSpecification{}
		if resp.InferenceSpecification.Containers != nil {
			f4f0 := []*svcapitypes.ModelPackageContainerDefinition{}
			for _, f4f0iter := range resp.InferenceSpecification.Containers {
				f4f0elem := &svcapitypes.ModelPackageContainerDefinition{}
				if f4f0iter.ContainerHostname != nil {
					f4f0elem.ContainerHostname = f4f0iter.ContainerHostname
				}
				if f4f0iter.Image != nil {
					f4f0elem.Image = f4f0iter.Image
				}
				if f4f0iter.ImageDigest != nil {
					f4f0elem.ImageDigest = f4f0iter.ImageDigest
				}
				if f4f0iter.ModelDataUrl != nil {
					f4f0elem.ModelDataURL = f4f0iter.ModelDataUrl
				}
				if f4f0iter.ProductId != nil {
					f4f0elem.ProductID = f4f0iter.ProductId
				}
				f4f0 = append(f4f0, f4f0elem)
			}
			f4.Containers = f4f0
		}
		if resp.InferenceSpecification.SupportedContentTypes != nil {
			f4f1 := []*string{}
			for _, f4f1iter := range resp.InferenceSpecification.SupportedContentTypes {
				var f4f1elem string
				f4f1elem = *f4f1iter
				f4f1 = append(f4f1, &f4f1elem)
			}
			f4.SupportedContentTypes = f4f1
		}
		if resp.InferenceSpecification.SupportedRealtimeInferenceInstanceTypes != nil {
			f4f2 := []*string{}
			for _, f4f2iter := range resp.InferenceSpecification.SupportedRealtimeInferenceInstanceTypes {
				var f4f2elem string
				f4f2elem = *f4f2iter
				f4f2 = append(f4f2, &f4f2elem)
			}
			f4.SupportedRealtimeInferenceInstanceTypes = f4f2
		}
		if resp.InferenceSpecification.SupportedResponseMIMETypes != nil {
			f4f3 := []*string{}
			for _, f4f3iter := range resp.InferenceSpecification.SupportedResponseMIMETypes {
				var f4f3elem string
				f4f3elem = *f4f3iter
				f4f3 = append(f4f3, &f4f3elem)
			}
			f4.SupportedResponseMIMETypes = f4f3
		}
		if resp.InferenceSpecification.SupportedTransformInstanceTypes != nil {
			f4f4 := []*string{}
			for _, f4f4iter := range resp.InferenceSpecification.SupportedTransformInstanceTypes {
				var f4f4elem string
				f4f4elem = *f4f4iter
				f4f4 = append(f4f4, &f4f4elem)
			}
			f4.SupportedTransformInstanceTypes = f4f4
		}
		ko.Spec.InferenceSpecification = f4
	} else {
		ko.Spec.InferenceSpecification = nil
	}
	if resp.LastModifiedTime != nil {
		ko.Status.LastModifiedTime = &metav1.Time{*resp.LastModifiedTime}
	} else {
		ko.Status.LastModifiedTime = nil
	}
	if resp.MetadataProperties != nil {
		f7 := &svcapitypes.MetadataProperties{}
		if resp.MetadataProperties.CommitId != nil {
			f7.CommitID = resp.MetadataProperties.CommitId
		}
		if resp.MetadataProperties.GeneratedBy != nil {
			f7.GeneratedBy = resp.MetadataProperties.GeneratedBy
		}
		if resp.MetadataProperties.ProjectId != nil {
			f7.ProjectID = resp.MetadataProperties.ProjectId
		}
		if resp.MetadataProperties.Repository != nil {
			f7.Repository = resp.MetadataProperties.Repository
		}
		ko.Spec.MetadataProperties = f7
	} else {
		ko.Spec.MetadataProperties = nil
	}
	if resp.ModelApprovalStatus != nil {
		ko.Spec.ModelApprovalStatus = resp.ModelApprovalStatus
	} else {
		ko.Spec.ModelApprovalStatus = nil
	}
	if resp.ModelMetrics != nil {
		f9 := &svcapitypes.ModelMetrics{}
		if resp.ModelMetrics.Bias != nil {
			f9f0 := &svcapitypes.Bias{}
			if resp.ModelMetrics.Bias.Report != nil {
				f9f0f0 := &svcapitypes.MetricsSource{}
				if resp.ModelMetrics.Bias.Report.ContentDigest != nil {
					f9f0f0.ContentDigest = resp.ModelMetrics.Bias.Report.ContentDigest
				}
				if resp.ModelMetrics.Bias.Report.ContentType != nil {
					f9f0f0.ContentType = resp.ModelMetrics.Bias.Report.ContentType
				}
				if resp.ModelMetrics.Bias.Report.S3Uri != nil {
					f9f0f0.S3URI = resp.ModelMetrics.Bias.Report.S3Uri
				}
				f9f0.Report = f9f0f0
			}
			f9.Bias = f9f0
		}
		if resp.ModelMetrics.Explainability != nil {
			f9f1 := &svcapitypes.Explainability{}
			if resp.ModelMetrics.Explainability.Report != nil {
				f9f1f0 := &svcapitypes.MetricsSource{}
				if resp.ModelMetrics.Explainability.Report.ContentDigest != nil {
					f9f1f0.ContentDigest = resp.ModelMetrics.Explainability.Report.ContentDigest
				}
				if resp.ModelMetrics.Explainability.Report.ContentType != nil {
					f9f1f0.ContentType = resp.ModelMetrics.Explainability.Report.ContentType
				}
				if resp.ModelMetrics.Explainability.Report.S3Uri != nil {
					f9f1f0.S3URI = resp.ModelMetrics.Explainability.Report.S3Uri
				}
				f9f1.Report = f9f1f0
			}
			f9.Explainability = f9f1
		}
		if resp.ModelMetrics.ModelDataQuality != nil {
			f9f2 := &svcapitypes.ModelDataQuality{}
			if resp.ModelMetrics.ModelDataQuality.Constraints != nil {
				f9f2f0 := &svcapitypes.MetricsSource{}
				if resp.ModelMetrics.ModelDataQuality.Constraints.ContentDigest != nil {
					f9f2f0.ContentDigest = resp.ModelMetrics.ModelDataQuality.Constraints.ContentDigest
				}
				if resp.ModelMetrics.ModelDataQuality.Constraints.ContentType != nil {
					f9f2f0.ContentType = resp.ModelMetrics.ModelDataQuality.Constraints.ContentType
				}
				if resp.ModelMetrics.ModelDataQuality.Constraints.S3Uri != nil {
					f9f2f0.S3URI = resp.ModelMetrics.ModelDataQuality.Constraints.S3Uri
				}
				f9f2.Constraints = f9f2f0
			}
			if resp.ModelMetrics.ModelDataQuality.Statistics != nil {
				f9f2f1 := &svcapitypes.MetricsSource{}
				if resp.ModelMetrics.ModelDataQuality.Statistics.ContentDigest != nil {
					f9f2f1.ContentDigest = resp.ModelMetrics.ModelDataQuality.Statistics.ContentDigest
				}
				if resp.ModelMetrics.ModelDataQuality.Statistics.ContentType != nil {
					f9f2f1.ContentType = resp.ModelMetrics.ModelDataQuality.Statistics.ContentType
				}
				if resp.ModelMetrics.ModelDataQuality.Statistics.S3Uri != nil {
					f9f2f1.S3URI = resp.ModelMetrics.ModelDataQuality.Statistics.S3Uri
				}
				f9f2.Statistics = f9f2f1
			}
			f9.ModelDataQuality = f9f2
		}
		if resp.ModelMetrics.ModelQuality != nil {
			f9f3 := &svcapitypes.ModelQuality{}
			if resp.ModelMetrics.ModelQuality.Constraints != nil {
				f9f3f0 := &svcapitypes.MetricsSource{}
				if resp.ModelMetrics.ModelQuality.Constraints.ContentDigest != nil {
					f9f3f0.ContentDigest = resp.ModelMetrics.ModelQuality.Constraints.ContentDigest
				}
				if resp.ModelMetrics.ModelQuality.Constraints.ContentType != nil {
					f9f3f0.ContentType = resp.ModelMetrics.ModelQuality.Constraints.ContentType
				}
				if resp.ModelMetrics.ModelQuality.Constraints.S3Uri != nil {
					f9f3f0.S3URI = resp.ModelMetrics.ModelQuality.Constraints.S3Uri
				}
				f9f3.Constraints = f9f3f0
			}
			if resp.ModelMetrics.ModelQuality.Statistics != nil {
				f9f3f1 := &svcapitypes.MetricsSource{}
				if resp.ModelMetrics.ModelQuality.Statistics.ContentDigest != nil {
					f9f3f1.ContentDigest = resp.ModelMetrics.ModelQuality.Statistics.ContentDigest
				}
				if resp.ModelMetrics.ModelQuality.Statistics.ContentType != nil {
					f9f3f1.ContentType = resp.ModelMetrics.ModelQuality.Statistics.ContentType
				}
				if resp.ModelMetrics.ModelQuality.Statistics.S3Uri != nil {
					f9f3f1.S3URI = resp.ModelMetrics.ModelQuality.Statistics.S3Uri
				}
				f9f3.Statistics = f9f3f1
			}
			f9.ModelQuality = f9f3
		}
		ko.Spec.ModelMetrics = f9
	} else {
		ko.Spec.ModelMetrics = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.ModelPackageArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.ModelPackageArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.ModelPackageDescription != nil {
		ko.Spec.ModelPackageDescription = resp.ModelPackageDescription
	} else {
		ko.Spec.ModelPackageDescription = nil
	}
	if resp.ModelPackageGroupName != nil {
		ko.Spec.ModelPackageGroupName = resp.ModelPackageGroupName
	} else {
		ko.Spec.ModelPackageGroupName = nil
	}
	if resp.ModelPackageName != nil {
		ko.Spec.ModelPackageName = resp.ModelPackageName
	} else {
		ko.Spec.ModelPackageName = nil
	}
	if resp.ModelPackageStatus != nil {
		ko.Status.ModelPackageStatus = resp.ModelPackageStatus
	} else {
		ko.Status.ModelPackageStatus = nil
	}
	if resp.ModelPackageStatusDetails != nil {
		f15 := &svcapitypes.ModelPackageStatusDetails{}
		if resp.ModelPackageStatusDetails.ImageScanStatuses != nil {
			f15f0 := []*svcapitypes.ModelPackageStatusItem{}
			for _, f15f0iter := range resp.ModelPackageStatusDetails.ImageScanStatuses {
				f15f0elem := &svcapitypes.ModelPackageStatusItem{}
				if f15f0iter.FailureReason != nil {
					f15f0elem.FailureReason = f15f0iter.FailureReason
				}
				if f15f0iter.Name != nil {
					f15f0elem.Name = f15f0iter.Name
				}
				if f15f0iter.Status != nil {
					f15f0elem.Status = f15f0iter.Status
				}
				f15f0 = append(f15f0, f15f0elem)
			}
			f15.ImageScanStatuses = f15f0
		}
		if resp.ModelPackageStatusDetails.ValidationStatuses != nil {
			f15f1 := []*svcapitypes.ModelPackageStatusItem{}
			for _, f15f1iter := range resp.ModelPackageStatusDetails.ValidationStatuses {
				f15f1elem := &svcapitypes.ModelPackageStatusItem{}
				if f15f1iter.FailureReason != nil {
					f15f1elem.FailureReason = f15f1iter.FailureReason
				}
				if f15f1iter.Name != nil {
					f15f1elem.Name = f15f1iter.Name
				}
				if f15f1iter.Status != nil {
					f15f1elem.Status = f15f1iter.Status
				}
				f15f1 = append(f15f1, f15f1elem)
			}
			f15.ValidationStatuses = f15f1
		}
		ko.Status.ModelPackageStatusDetails = f15
	} else {
		ko.Status.ModelPackageStatusDetails = nil
	}
	if resp.SourceAlgorithmSpecification != nil {
		f17 := &svcapitypes.SourceAlgorithmSpecification{}
		if resp.SourceAlgorithmSpecification.SourceAlgorithms != nil {
			f17f0 := []*svcapitypes.SourceAlgorithm{}
			for _, f17f0iter := range resp.SourceAlgorithmSpecification.SourceAlgorithms {
				f17f0elem := &svcapitypes.SourceAlgorithm{}
				if f17f0iter.AlgorithmName != nil {
					f17f0elem.AlgorithmName = f17f0iter.AlgorithmName
				}
				if f17f0iter.ModelDataUrl != nil {
					f17f0elem.ModelDataURL = f17f0iter.ModelDataUrl
				}
				f17f0 = append(f17f0, f17f0elem)
			}
			f17.SourceAlgorithms = f17f0
		}
		ko.Spec.SourceAlgorithmSpecification = f17
	} else {
		ko.Spec.SourceAlgorithmSpecification = nil
	}
	if resp.ValidationSpecification != nil {
		f18 := &svcapitypes.ModelPackageValidationSpecification{}
		if resp.ValidationSpecification.ValidationProfiles != nil {
			f18f0 := []*svcapitypes.ModelPackageValidationProfile{}
			for _, f18f0iter := range resp.ValidationSpecification.ValidationProfiles {
				f18f0elem := &svcapitypes.ModelPackageValidationProfile{}
				if f18f0iter.ProfileName != nil {
					f18f0elem.ProfileName = f18f0iter.ProfileName
				}
				if f18f0iter.TransformJobDefinition != nil {
					f18f0elemf1 := &svcapitypes.TransformJobDefinition{}
					if f18f0iter.TransformJobDefinition.BatchStrategy != nil {
						f18f0elemf1.BatchStrategy = f18f0iter.TransformJobDefinition.BatchStrategy
					}
					if f18f0iter.TransformJobDefinition.Environment != nil {
						f18f0elemf1f1 := map[string]*string{}
						for f18f0elemf1f1key, f18f0elemf1f1valiter := range f18f0iter.TransformJobDefinition.Environment {
							var f18f0elemf1f1val string
							f18f0elemf1f1val = *f18f0elemf1f1valiter
							f18f0elemf1f1[f18f0elemf1f1key] = &f18f0elemf1f1val
						}
						f18f0elemf1.Environment = f18f0elemf1f1
					}
					if f18f0iter.TransformJobDefinition.MaxConcurrentTransforms != nil {
						f18f0elemf1.MaxConcurrentTransforms = f18f0iter.TransformJobDefinition.MaxConcurrentTransforms
					}
					if f18f0iter.TransformJobDefinition.MaxPayloadInMB != nil {
						f18f0elemf1.MaxPayloadInMB = f18f0iter.TransformJobDefinition.MaxPayloadInMB
					}
					if f18f0iter.TransformJobDefinition.TransformInput != nil {
						f18f0elemf1f4 := &svcapitypes.TransformInput{}
						if f18f0iter.TransformJobDefinition.TransformInput.CompressionType != nil {
							f18f0elemf1f4.CompressionType = f18f0iter.TransformJobDefinition.TransformInput.CompressionType
						}
						if f18f0iter.TransformJobDefinition.TransformInput.ContentType != nil {
							f18f0elemf1f4.ContentType = f18f0iter.TransformJobDefinition.TransformInput.ContentType
						}
						if f18f0iter.TransformJobDefinition.TransformInput.DataSource != nil {
							f18f0elemf1f4f2 := &svcapitypes.TransformDataSource{}
							if f18f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource != nil {
								f18f0elemf1f4f2f0 := &svcapitypes.TransformS3DataSource{}
								if f18f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource.S3DataType != nil {
									f18f0elemf1f4f2f0.S3DataType = f18f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource.S3DataType
								}
								if f18f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource.S3Uri != nil {
									f18f0elemf1f4f2f0.S3URI = f18f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource.S3Uri
								}
								f18f0elemf1f4f2.S3DataSource = f18f0elemf1f4f2f0
							}
							f18f0elemf1f4.DataSource = f18f0elemf1f4f2
						}
						if f18f0iter.TransformJobDefinition.TransformInput.SplitType != nil {
							f18f0elemf1f4.SplitType = f18f0iter.TransformJobDefinition.TransformInput.SplitType
						}
						f18f0elemf1.TransformInput = f18f0elemf1f4
					}
					if f18f0iter.TransformJobDefinition.TransformOutput != nil {
						f18f0elemf1f5 := &svcapitypes.TransformOutput{}
						if f18f0iter.TransformJobDefinition.TransformOutput.Accept != nil {
							f18f0elemf1f5.Accept = f18f0iter.TransformJobDefinition.TransformOutput.Accept
						}
						if f18f0iter.TransformJobDefinition.TransformOutput.AssembleWith != nil {
							f18f0elemf1f5.AssembleWith = f18f0iter.TransformJobDefinition.TransformOutput.AssembleWith
						}
						if f18f0iter.TransformJobDefinition.TransformOutput.KmsKeyId != nil {
							f18f0elemf1f5.KMSKeyID = f18f0iter.TransformJobDefinition.TransformOutput.KmsKeyId
						}
						if f18f0iter.TransformJobDefinition.TransformOutput.S3OutputPath != nil {
							f18f0elemf1f5.S3OutputPath = f18f0iter.TransformJobDefinition.TransformOutput.S3OutputPath
						}
						f18f0elemf1.TransformOutput = f18f0elemf1f5
					}
					if f18f0iter.TransformJobDefinition.TransformResources != nil {
						f18f0elemf1f6 := &svcapitypes.TransformResources{}
						if f18f0iter.TransformJobDefinition.TransformResources.InstanceCount != nil {
							f18f0elemf1f6.InstanceCount = f18f0iter.TransformJobDefinition.TransformResources.InstanceCount
						}
						if f18f0iter.TransformJobDefinition.TransformResources.InstanceType != nil {
							f18f0elemf1f6.InstanceType = f18f0iter.TransformJobDefinition.TransformResources.InstanceType
						}
						if f18f0iter.TransformJobDefinition.TransformResources.VolumeKmsKeyId != nil {
							f18f0elemf1f6.VolumeKMSKeyID = f18f0iter.TransformJobDefinition.TransformResources.VolumeKmsKeyId
						}
						f18f0elemf1.TransformResources = f18f0elemf1f6
					}
					f18f0elem.TransformJobDefinition = f18f0elemf1
				}
				f18f0 = append(f18f0, f18f0elem)
			}
			f18.ValidationProfiles = f18f0
		}
		if resp.ValidationSpecification.ValidationRole != nil {
			f18.ValidationRole = resp.ValidationSpecification.ValidationRole
		}
		ko.Spec.ValidationSpecification = f18
	} else {
		ko.Spec.ValidationSpecification = nil
	}

	rm.setStatusDefaults(ko)
	rm.customSetOutput(&resource{ko})
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return rm.customCheckRequiredFieldsMissingMethod(r)
}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.DescribeModelPackageInput, error) {
	res := &svcsdk.DescribeModelPackageInput{}

	if r.ko.Spec.ModelPackageName != nil {
		res.SetModelPackageName(*r.ko.Spec.ModelPackageName)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer exit(err)
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateModelPackageOutput
	_ = resp
	resp, err = rm.sdkapi.CreateModelPackageWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateModelPackage", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.ModelPackageArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.ModelPackageArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateModelPackageInput, error) {
	res := &svcsdk.CreateModelPackageInput{}

	if r.ko.Spec.CertifyForMarketplace != nil {
		res.SetCertifyForMarketplace(*r.ko.Spec.CertifyForMarketplace)
	}
	if r.ko.Spec.ClientToken != nil {
		res.SetClientToken(*r.ko.Spec.ClientToken)
	}
	if r.ko.Spec.InferenceSpecification != nil {
		f2 := &svcsdk.InferenceSpecification{}
		if r.ko.Spec.InferenceSpecification.Containers != nil {
			f2f0 := []*svcsdk.ModelPackageContainerDefinition{}
			for _, f2f0iter := range r.ko.Spec.InferenceSpecification.Containers {
				f2f0elem := &svcsdk.ModelPackageContainerDefinition{}
				if f2f0iter.ContainerHostname != nil {
					f2f0elem.SetContainerHostname(*f2f0iter.ContainerHostname)
				}
				if f2f0iter.Image != nil {
					f2f0elem.SetImage(*f2f0iter.Image)
				}
				if f2f0iter.ImageDigest != nil {
					f2f0elem.SetImageDigest(*f2f0iter.ImageDigest)
				}
				if f2f0iter.ModelDataURL != nil {
					f2f0elem.SetModelDataUrl(*f2f0iter.ModelDataURL)
				}
				if f2f0iter.ProductID != nil {
					f2f0elem.SetProductId(*f2f0iter.ProductID)
				}
				f2f0 = append(f2f0, f2f0elem)
			}
			f2.SetContainers(f2f0)
		}
		if r.ko.Spec.InferenceSpecification.SupportedContentTypes != nil {
			f2f1 := []*string{}
			for _, f2f1iter := range r.ko.Spec.InferenceSpecification.SupportedContentTypes {
				var f2f1elem string
				f2f1elem = *f2f1iter
				f2f1 = append(f2f1, &f2f1elem)
			}
			f2.SetSupportedContentTypes(f2f1)
		}
		if r.ko.Spec.InferenceSpecification.SupportedRealtimeInferenceInstanceTypes != nil {
			f2f2 := []*string{}
			for _, f2f2iter := range r.ko.Spec.InferenceSpecification.SupportedRealtimeInferenceInstanceTypes {
				var f2f2elem string
				f2f2elem = *f2f2iter
				f2f2 = append(f2f2, &f2f2elem)
			}
			f2.SetSupportedRealtimeInferenceInstanceTypes(f2f2)
		}
		if r.ko.Spec.InferenceSpecification.SupportedResponseMIMETypes != nil {
			f2f3 := []*string{}
			for _, f2f3iter := range r.ko.Spec.InferenceSpecification.SupportedResponseMIMETypes {
				var f2f3elem string
				f2f3elem = *f2f3iter
				f2f3 = append(f2f3, &f2f3elem)
			}
			f2.SetSupportedResponseMIMETypes(f2f3)
		}
		if r.ko.Spec.InferenceSpecification.SupportedTransformInstanceTypes != nil {
			f2f4 := []*string{}
			for _, f2f4iter := range r.ko.Spec.InferenceSpecification.SupportedTransformInstanceTypes {
				var f2f4elem string
				f2f4elem = *f2f4iter
				f2f4 = append(f2f4, &f2f4elem)
			}
			f2.SetSupportedTransformInstanceTypes(f2f4)
		}
		res.SetInferenceSpecification(f2)
	}
	if r.ko.Spec.MetadataProperties != nil {
		f3 := &svcsdk.MetadataProperties{}
		if r.ko.Spec.MetadataProperties.CommitID != nil {
			f3.SetCommitId(*r.ko.Spec.MetadataProperties.CommitID)
		}
		if r.ko.Spec.MetadataProperties.GeneratedBy != nil {
			f3.SetGeneratedBy(*r.ko.Spec.MetadataProperties.GeneratedBy)
		}
		if r.ko.Spec.MetadataProperties.ProjectID != nil {
			f3.SetProjectId(*r.ko.Spec.MetadataProperties.ProjectID)
		}
		if r.ko.Spec.MetadataProperties.Repository != nil {
			f3.SetRepository(*r.ko.Spec.MetadataProperties.Repository)
		}
		res.SetMetadataProperties(f3)
	}
	if r.ko.Spec.ModelApprovalStatus != nil {
		res.SetModelApprovalStatus(*r.ko.Spec.ModelApprovalStatus)
	}
	if r.ko.Spec.ModelMetrics != nil {
		f5 := &svcsdk.ModelMetrics{}
		if r.ko.Spec.ModelMetrics.Bias != nil {
			f5f0 := &svcsdk.Bias{}
			if r.ko.Spec.ModelMetrics.Bias.Report != nil {
				f5f0f0 := &svcsdk.MetricsSource{}
				if r.ko.Spec.ModelMetrics.Bias.Report.ContentDigest != nil {
					f5f0f0.SetContentDigest(*r.ko.Spec.ModelMetrics.Bias.Report.ContentDigest)
				}
				if r.ko.Spec.ModelMetrics.Bias.Report.ContentType != nil {
					f5f0f0.SetContentType(*r.ko.Spec.ModelMetrics.Bias.Report.ContentType)
				}
				if r.ko.Spec.ModelMetrics.Bias.Report.S3URI != nil {
					f5f0f0.SetS3Uri(*r.ko.Spec.ModelMetrics.Bias.Report.S3URI)
				}
				f5f0.SetReport(f5f0f0)
			}
			f5.SetBias(f5f0)
		}
		if r.ko.Spec.ModelMetrics.Explainability != nil {
			f5f1 := &svcsdk.Explainability{}
			if r.ko.Spec.ModelMetrics.Explainability.Report != nil {
				f5f1f0 := &svcsdk.MetricsSource{}
				if r.ko.Spec.ModelMetrics.Explainability.Report.ContentDigest != nil {
					f5f1f0.SetContentDigest(*r.ko.Spec.ModelMetrics.Explainability.Report.ContentDigest)
				}
				if r.ko.Spec.ModelMetrics.Explainability.Report.ContentType != nil {
					f5f1f0.SetContentType(*r.ko.Spec.ModelMetrics.Explainability.Report.ContentType)
				}
				if r.ko.Spec.ModelMetrics.Explainability.Report.S3URI != nil {
					f5f1f0.SetS3Uri(*r.ko.Spec.ModelMetrics.Explainability.Report.S3URI)
				}
				f5f1.SetReport(f5f1f0)
			}
			f5.SetExplainability(f5f1)
		}
		if r.ko.Spec.ModelMetrics.ModelDataQuality != nil {
			f5f2 := &svcsdk.ModelDataQuality{}
			if r.ko.Spec.ModelMetrics.ModelDataQuality.Constraints != nil {
				f5f2f0 := &svcsdk.MetricsSource{}
				if r.ko.Spec.ModelMetrics.ModelDataQuality.Constraints.ContentDigest != nil {
					f5f2f0.SetContentDigest(*r.ko.Spec.ModelMetrics.ModelDataQuality.Constraints.ContentDigest)
				}
				if r.ko.Spec.ModelMetrics.ModelDataQuality.Constraints.ContentType != nil {
					f5f2f0.SetContentType(*r.ko.Spec.ModelMetrics.ModelDataQuality.Constraints.ContentType)
				}
				if r.ko.Spec.ModelMetrics.ModelDataQuality.Constraints.S3URI != nil {
					f5f2f0.SetS3Uri(*r.ko.Spec.ModelMetrics.ModelDataQuality.Constraints.S3URI)
				}
				f5f2.SetConstraints(f5f2f0)
			}
			if r.ko.Spec.ModelMetrics.ModelDataQuality.Statistics != nil {
				f5f2f1 := &svcsdk.MetricsSource{}
				if r.ko.Spec.ModelMetrics.ModelDataQuality.Statistics.ContentDigest != nil {
					f5f2f1.SetContentDigest(*r.ko.Spec.ModelMetrics.ModelDataQuality.Statistics.ContentDigest)
				}
				if r.ko.Spec.ModelMetrics.ModelDataQuality.Statistics.ContentType != nil {
					f5f2f1.SetContentType(*r.ko.Spec.ModelMetrics.ModelDataQuality.Statistics.ContentType)
				}
				if r.ko.Spec.ModelMetrics.ModelDataQuality.Statistics.S3URI != nil {
					f5f2f1.SetS3Uri(*r.ko.Spec.ModelMetrics.ModelDataQuality.Statistics.S3URI)
				}
				f5f2.SetStatistics(f5f2f1)
			}
			f5.SetModelDataQuality(f5f2)
		}
		if r.ko.Spec.ModelMetrics.ModelQuality != nil {
			f5f3 := &svcsdk.ModelQuality{}
			if r.ko.Spec.ModelMetrics.ModelQuality.Constraints != nil {
				f5f3f0 := &svcsdk.MetricsSource{}
				if r.ko.Spec.ModelMetrics.ModelQuality.Constraints.ContentDigest != nil {
					f5f3f0.SetContentDigest(*r.ko.Spec.ModelMetrics.ModelQuality.Constraints.ContentDigest)
				}
				if r.ko.Spec.ModelMetrics.ModelQuality.Constraints.ContentType != nil {
					f5f3f0.SetContentType(*r.ko.Spec.ModelMetrics.ModelQuality.Constraints.ContentType)
				}
				if r.ko.Spec.ModelMetrics.ModelQuality.Constraints.S3URI != nil {
					f5f3f0.SetS3Uri(*r.ko.Spec.ModelMetrics.ModelQuality.Constraints.S3URI)
				}
				f5f3.SetConstraints(f5f3f0)
			}
			if r.ko.Spec.ModelMetrics.ModelQuality.Statistics != nil {
				f5f3f1 := &svcsdk.MetricsSource{}
				if r.ko.Spec.ModelMetrics.ModelQuality.Statistics.ContentDigest != nil {
					f5f3f1.SetContentDigest(*r.ko.Spec.ModelMetrics.ModelQuality.Statistics.ContentDigest)
				}
				if r.ko.Spec.ModelMetrics.ModelQuality.Statistics.ContentType != nil {
					f5f3f1.SetContentType(*r.ko.Spec.ModelMetrics.ModelQuality.Statistics.ContentType)
				}
				if r.ko.Spec.ModelMetrics.ModelQuality.Statistics.S3URI != nil {
					f5f3f1.SetS3Uri(*r.ko.Spec.ModelMetrics.ModelQuality.Statistics.S3URI)
				}
				f5f3.SetStatistics(f5f3f1)
			}
			f5.SetModelQuality(f5f3)
		}
		res.SetModelMetrics(f5)
	}
	if r.ko.Spec.ModelPackageDescription != nil {
		res.SetModelPackageDescription(*r.ko.Spec.ModelPackageDescription)
	}
	if r.ko.Spec.ModelPackageGroupName != nil {
		res.SetModelPackageGroupName(*r.ko.Spec.ModelPackageGroupName)
	}
	if r.ko.Spec.ModelPackageName != nil {
		res.SetModelPackageName(*r.ko.Spec.ModelPackageName)
	}
	if r.ko.Spec.SourceAlgorithmSpecification != nil {
		f9 := &svcsdk.SourceAlgorithmSpecification{}
		if r.ko.Spec.SourceAlgorithmSpecification.SourceAlgorithms != nil {
			f9f0 := []*svcsdk.SourceAlgorithm{}
			for _, f9f0iter := range r.ko.Spec.SourceAlgorithmSpecification.SourceAlgorithms {
				f9f0elem := &svcsdk.SourceAlgorithm{}
				if f9f0iter.AlgorithmName != nil {
					f9f0elem.SetAlgorithmName(*f9f0iter.AlgorithmName)
				}
				if f9f0iter.ModelDataURL != nil {
					f9f0elem.SetModelDataUrl(*f9f0iter.ModelDataURL)
				}
				f9f0 = append(f9f0, f9f0elem)
			}
			f9.SetSourceAlgorithms(f9f0)
		}
		res.SetSourceAlgorithmSpecification(f9)
	}
	if r.ko.Spec.Tags != nil {
		f10 := []*svcsdk.Tag{}
		for _, f10iter := range r.ko.Spec.Tags {
			f10elem := &svcsdk.Tag{}
			if f10iter.Key != nil {
				f10elem.SetKey(*f10iter.Key)
			}
			if f10iter.Value != nil {
				f10elem.SetValue(*f10iter.Value)
			}
			f10 = append(f10, f10elem)
		}
		res.SetTags(f10)
	}
	if r.ko.Spec.ValidationSpecification != nil {
		f11 := &svcsdk.ModelPackageValidationSpecification{}
		if r.ko.Spec.ValidationSpecification.ValidationProfiles != nil {
			f11f0 := []*svcsdk.ModelPackageValidationProfile{}
			for _, f11f0iter := range r.ko.Spec.ValidationSpecification.ValidationProfiles {
				f11f0elem := &svcsdk.ModelPackageValidationProfile{}
				if f11f0iter.ProfileName != nil {
					f11f0elem.SetProfileName(*f11f0iter.ProfileName)
				}
				if f11f0iter.TransformJobDefinition != nil {
					f11f0elemf1 := &svcsdk.TransformJobDefinition{}
					if f11f0iter.TransformJobDefinition.BatchStrategy != nil {
						f11f0elemf1.SetBatchStrategy(*f11f0iter.TransformJobDefinition.BatchStrategy)
					}
					if f11f0iter.TransformJobDefinition.Environment != nil {
						f11f0elemf1f1 := map[string]*string{}
						for f11f0elemf1f1key, f11f0elemf1f1valiter := range f11f0iter.TransformJobDefinition.Environment {
							var f11f0elemf1f1val string
							f11f0elemf1f1val = *f11f0elemf1f1valiter
							f11f0elemf1f1[f11f0elemf1f1key] = &f11f0elemf1f1val
						}
						f11f0elemf1.SetEnvironment(f11f0elemf1f1)
					}
					if f11f0iter.TransformJobDefinition.MaxConcurrentTransforms != nil {
						f11f0elemf1.SetMaxConcurrentTransforms(*f11f0iter.TransformJobDefinition.MaxConcurrentTransforms)
					}
					if f11f0iter.TransformJobDefinition.MaxPayloadInMB != nil {
						f11f0elemf1.SetMaxPayloadInMB(*f11f0iter.TransformJobDefinition.MaxPayloadInMB)
					}
					if f11f0iter.TransformJobDefinition.TransformInput != nil {
						f11f0elemf1f4 := &svcsdk.TransformInput{}
						if f11f0iter.TransformJobDefinition.TransformInput.CompressionType != nil {
							f11f0elemf1f4.SetCompressionType(*f11f0iter.TransformJobDefinition.TransformInput.CompressionType)
						}
						if f11f0iter.TransformJobDefinition.TransformInput.ContentType != nil {
							f11f0elemf1f4.SetContentType(*f11f0iter.TransformJobDefinition.TransformInput.ContentType)
						}
						if f11f0iter.TransformJobDefinition.TransformInput.DataSource != nil {
							f11f0elemf1f4f2 := &svcsdk.TransformDataSource{}
							if f11f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource != nil {
								f11f0elemf1f4f2f0 := &svcsdk.TransformS3DataSource{}
								if f11f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource.S3DataType != nil {
									f11f0elemf1f4f2f0.SetS3DataType(*f11f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource.S3DataType)
								}
								if f11f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource.S3URI != nil {
									f11f0elemf1f4f2f0.SetS3Uri(*f11f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource.S3URI)
								}
								f11f0elemf1f4f2.SetS3DataSource(f11f0elemf1f4f2f0)
							}
							f11f0elemf1f4.SetDataSource(f11f0elemf1f4f2)
						}
						if f11f0iter.TransformJobDefinition.TransformInput.SplitType != nil {
							f11f0elemf1f4.SetSplitType(*f11f0iter.TransformJobDefinition.TransformInput.SplitType)
						}
						f11f0elemf1.SetTransformInput(f11f0elemf1f4)
					}
					if f11f0iter.TransformJobDefinition.TransformOutput != nil {
						f11f0elemf1f5 := &svcsdk.TransformOutput{}
						if f11f0iter.TransformJobDefinition.TransformOutput.Accept != nil {
							f11f0elemf1f5.SetAccept(*f11f0iter.TransformJobDefinition.TransformOutput.Accept)
						}
						if f11f0iter.TransformJobDefinition.TransformOutput.AssembleWith != nil {
							f11f0elemf1f5.SetAssembleWith(*f11f0iter.TransformJobDefinition.TransformOutput.AssembleWith)
						}
						if f11f0iter.TransformJobDefinition.TransformOutput.KMSKeyID != nil {
							f11f0elemf1f5.SetKmsKeyId(*f11f0iter.TransformJobDefinition.TransformOutput.KMSKeyID)
						}
						if f11f0iter.TransformJobDefinition.TransformOutput.S3OutputPath != nil {
							f11f0elemf1f5.SetS3OutputPath(*f11f0iter.TransformJobDefinition.TransformOutput.S3OutputPath)
						}
						f11f0elemf1.SetTransformOutput(f11f0elemf1f5)
					}
					if f11f0iter.TransformJobDefinition.TransformResources != nil {
						f11f0elemf1f6 := &svcsdk.TransformResources{}
						if f11f0iter.TransformJobDefinition.TransformResources.InstanceCount != nil {
							f11f0elemf1f6.SetInstanceCount(*f11f0iter.TransformJobDefinition.TransformResources.InstanceCount)
						}
						if f11f0iter.TransformJobDefinition.TransformResources.InstanceType != nil {
							f11f0elemf1f6.SetInstanceType(*f11f0iter.TransformJobDefinition.TransformResources.InstanceType)
						}
						if f11f0iter.TransformJobDefinition.TransformResources.VolumeKMSKeyID != nil {
							f11f0elemf1f6.SetVolumeKmsKeyId(*f11f0iter.TransformJobDefinition.TransformResources.VolumeKMSKeyID)
						}
						f11f0elemf1.SetTransformResources(f11f0elemf1f6)
					}
					f11f0elem.SetTransformJobDefinition(f11f0elemf1)
				}
				f11f0 = append(f11f0, f11f0elem)
			}
			f11.SetValidationProfiles(f11f0)
		}
		if r.ko.Spec.ValidationSpecification.ValidationRole != nil {
			f11.SetValidationRole(*r.ko.Spec.ValidationSpecification.ValidationRole)
		}
		res.SetValidationSpecification(f11)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer exit(err)
	if err = rm.requeueUntilCanModify(ctx, latest); err != nil {
		return nil, err
	}
	input, err := rm.newUpdateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.UpdateModelPackageOutput
	_ = resp
	resp, err = rm.sdkapi.UpdateModelPackageWithContext(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdateModelPackage", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.ModelPackageArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.ModelPackageArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.UpdateModelPackageInput, error) {
	res := &svcsdk.UpdateModelPackageInput{}

	if r.ko.Spec.ApprovalDescription != nil {
		res.SetApprovalDescription(*r.ko.Spec.ApprovalDescription)
	}
	if r.ko.Spec.ModelApprovalStatus != nil {
		res.SetModelApprovalStatus(*r.ko.Spec.ModelApprovalStatus)
	}
	if r.ko.Status.ACKResourceMetadata != nil && r.ko.Status.ACKResourceMetadata.ARN != nil {
		res.SetModelPackageArn(string(*r.ko.Status.ACKResourceMetadata.ARN))
	} else {
		res.SetModelPackageArn(rm.ARNFromName(*r.ko.Spec.ModelPackageName))
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer exit(err)
	if err = rm.requeueUntilCanModify(ctx, r); err != nil {
		return r, err
	}

	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	// If ModelPackageName not set after newRequestPayload, attempt to use ARN
	// This is because versioned modelpackage uses ARN not name
	if input.ModelPackageName == nil {
		arn := r.Identifiers().ARN()
		if arn == nil {
			return nil, ackerr.NotFound
		}
		input.SetModelPackageName(string(*arn))
	}
	var resp *svcsdk.DeleteModelPackageOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteModelPackageWithContext(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteModelPackage", err)

	if err == nil {
		if _, err := rm.sdkFind(ctx, r); err != ackerr.NotFound {
			if err != nil {
				return nil, err
			}
			return r, requeueWaitWhileDeleting
		}
	}

	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteModelPackageInput, error) {
	res := &svcsdk.DeleteModelPackageInput{}

	if r.ko.Spec.ModelPackageName != nil {
		res.SetModelPackageName(*r.ko.Spec.ModelPackageName)
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.ModelPackage,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}

	if rm.terminalAWSError(err) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		terminalCondition.Status = corev1.ConditionTrue
		awsErr, _ := ackerr.AWSError(err)
		errorMessage := awsErr.Message()
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Message()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	// custom update conditions
	customUpdate := rm.CustomUpdateConditions(ko, r, err)
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil || customUpdate {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}
	awsErr, ok := ackerr.AWSError(err)
	if !ok {
		return false
	}
	switch awsErr.Code() {
	case "ResourceLimitExceeded",
		"ResourceNotFound",
		"ResourceInUse",
		"OptInRequired",
		"InvalidParameterCombination",
		"InvalidParameterValue",
		"MissingParameter",
		"MissingAction",
		"InvalidQueryParameter",
		"MalformedQueryString",
		"InvalidAction",
		"UnrecognizedClientException",
		"ConflictException":
		return true
	default:
		return false
	}
}
