// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package monitoring_schedule

import (
	"context"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/sagemaker"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/sagemaker-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.SageMaker{}
	_ = &svcapitypes.MonitoringSchedule{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer exit(err)
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.DescribeMonitoringScheduleOutput
	resp, err = rm.sdkapi.DescribeMonitoringScheduleWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "DescribeMonitoringSchedule", err)
	if err != nil {
		if awsErr, ok := ackerr.AWSError(err); ok && awsErr.Code() == "ResourceNotFound" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.CreationTime != nil {
		ko.Status.CreationTime = &metav1.Time{*resp.CreationTime}
	} else {
		ko.Status.CreationTime = nil
	}
	if resp.FailureReason != nil {
		ko.Status.FailureReason = resp.FailureReason
	} else {
		ko.Status.FailureReason = nil
	}
	if resp.LastModifiedTime != nil {
		ko.Status.LastModifiedTime = &metav1.Time{*resp.LastModifiedTime}
	} else {
		ko.Status.LastModifiedTime = nil
	}
	if resp.LastMonitoringExecutionSummary != nil {
		f4 := &svcapitypes.MonitoringExecutionSummary{}
		if resp.LastMonitoringExecutionSummary.CreationTime != nil {
			f4.CreationTime = &metav1.Time{*resp.LastMonitoringExecutionSummary.CreationTime}
		}
		if resp.LastMonitoringExecutionSummary.EndpointName != nil {
			f4.EndpointName = resp.LastMonitoringExecutionSummary.EndpointName
		}
		if resp.LastMonitoringExecutionSummary.FailureReason != nil {
			f4.FailureReason = resp.LastMonitoringExecutionSummary.FailureReason
		}
		if resp.LastMonitoringExecutionSummary.LastModifiedTime != nil {
			f4.LastModifiedTime = &metav1.Time{*resp.LastMonitoringExecutionSummary.LastModifiedTime}
		}
		if resp.LastMonitoringExecutionSummary.MonitoringExecutionStatus != nil {
			f4.MonitoringExecutionStatus = resp.LastMonitoringExecutionSummary.MonitoringExecutionStatus
		}
		if resp.LastMonitoringExecutionSummary.MonitoringJobDefinitionName != nil {
			f4.MonitoringJobDefinitionName = resp.LastMonitoringExecutionSummary.MonitoringJobDefinitionName
		}
		if resp.LastMonitoringExecutionSummary.MonitoringScheduleName != nil {
			f4.MonitoringScheduleName = resp.LastMonitoringExecutionSummary.MonitoringScheduleName
		}
		if resp.LastMonitoringExecutionSummary.MonitoringType != nil {
			f4.MonitoringType = resp.LastMonitoringExecutionSummary.MonitoringType
		}
		if resp.LastMonitoringExecutionSummary.ProcessingJobArn != nil {
			f4.ProcessingJobARN = resp.LastMonitoringExecutionSummary.ProcessingJobArn
		}
		if resp.LastMonitoringExecutionSummary.ScheduledTime != nil {
			f4.ScheduledTime = &metav1.Time{*resp.LastMonitoringExecutionSummary.ScheduledTime}
		}
		ko.Status.LastMonitoringExecutionSummary = f4
	} else {
		ko.Status.LastMonitoringExecutionSummary = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.MonitoringScheduleArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.MonitoringScheduleArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.MonitoringScheduleConfig != nil {
		f6 := &svcapitypes.MonitoringScheduleConfig{}
		if resp.MonitoringScheduleConfig.MonitoringJobDefinition != nil {
			f6f0 := &svcapitypes.MonitoringJobDefinition{}
			if resp.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig != nil {
				f6f0f0 := &svcapitypes.MonitoringBaselineConfig{}
				if resp.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig.BaseliningJobName != nil {
					f6f0f0.BaseliningJobName = resp.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig.BaseliningJobName
				}
				if resp.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig.ConstraintsResource != nil {
					f6f0f0f1 := &svcapitypes.MonitoringConstraintsResource{}
					if resp.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig.ConstraintsResource.S3Uri != nil {
						f6f0f0f1.S3URI = resp.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig.ConstraintsResource.S3Uri
					}
					f6f0f0.ConstraintsResource = f6f0f0f1
				}
				if resp.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig.StatisticsResource != nil {
					f6f0f0f2 := &svcapitypes.MonitoringStatisticsResource{}
					if resp.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig.StatisticsResource.S3Uri != nil {
						f6f0f0f2.S3URI = resp.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig.StatisticsResource.S3Uri
					}
					f6f0f0.StatisticsResource = f6f0f0f2
				}
				f6f0.BaselineConfig = f6f0f0
			}
			if resp.MonitoringScheduleConfig.MonitoringJobDefinition.Environment != nil {
				f6f0f1 := map[string]*string{}
				for f6f0f1key, f6f0f1valiter := range resp.MonitoringScheduleConfig.MonitoringJobDefinition.Environment {
					var f6f0f1val string
					f6f0f1val = *f6f0f1valiter
					f6f0f1[f6f0f1key] = &f6f0f1val
				}
				f6f0.Environment = f6f0f1
			}
			if resp.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification != nil {
				f6f0f2 := &svcapitypes.MonitoringAppSpecification{}
				if resp.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.ContainerArguments != nil {
					f6f0f2f0 := []*string{}
					for _, f6f0f2f0iter := range resp.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.ContainerArguments {
						var f6f0f2f0elem string
						f6f0f2f0elem = *f6f0f2f0iter
						f6f0f2f0 = append(f6f0f2f0, &f6f0f2f0elem)
					}
					f6f0f2.ContainerArguments = f6f0f2f0
				}
				if resp.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.ContainerEntrypoint != nil {
					f6f0f2f1 := []*string{}
					for _, f6f0f2f1iter := range resp.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.ContainerEntrypoint {
						var f6f0f2f1elem string
						f6f0f2f1elem = *f6f0f2f1iter
						f6f0f2f1 = append(f6f0f2f1, &f6f0f2f1elem)
					}
					f6f0f2.ContainerEntrypoint = f6f0f2f1
				}
				if resp.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.ImageUri != nil {
					f6f0f2.ImageURI = resp.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.ImageUri
				}
				if resp.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.PostAnalyticsProcessorSourceUri != nil {
					f6f0f2.PostAnalyticsProcessorSourceURI = resp.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.PostAnalyticsProcessorSourceUri
				}
				if resp.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.RecordPreprocessorSourceUri != nil {
					f6f0f2.RecordPreprocessorSourceURI = resp.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.RecordPreprocessorSourceUri
				}
				f6f0.MonitoringAppSpecification = f6f0f2
			}
			if resp.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringInputs != nil {
				f6f0f3 := []*svcapitypes.MonitoringInput{}
				for _, f6f0f3iter := range resp.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringInputs {
					f6f0f3elem := &svcapitypes.MonitoringInput{}
					if f6f0f3iter.EndpointInput != nil {
						f6f0f3elemf0 := &svcapitypes.EndpointInput{}
						if f6f0f3iter.EndpointInput.EndTimeOffset != nil {
							f6f0f3elemf0.EndTimeOffset = f6f0f3iter.EndpointInput.EndTimeOffset
						}
						if f6f0f3iter.EndpointInput.EndpointName != nil {
							f6f0f3elemf0.EndpointName = f6f0f3iter.EndpointInput.EndpointName
						}
						if f6f0f3iter.EndpointInput.FeaturesAttribute != nil {
							f6f0f3elemf0.FeaturesAttribute = f6f0f3iter.EndpointInput.FeaturesAttribute
						}
						if f6f0f3iter.EndpointInput.InferenceAttribute != nil {
							f6f0f3elemf0.InferenceAttribute = f6f0f3iter.EndpointInput.InferenceAttribute
						}
						if f6f0f3iter.EndpointInput.LocalPath != nil {
							f6f0f3elemf0.LocalPath = f6f0f3iter.EndpointInput.LocalPath
						}
						if f6f0f3iter.EndpointInput.ProbabilityAttribute != nil {
							f6f0f3elemf0.ProbabilityAttribute = f6f0f3iter.EndpointInput.ProbabilityAttribute
						}
						if f6f0f3iter.EndpointInput.ProbabilityThresholdAttribute != nil {
							f6f0f3elemf0.ProbabilityThresholdAttribute = f6f0f3iter.EndpointInput.ProbabilityThresholdAttribute
						}
						if f6f0f3iter.EndpointInput.S3DataDistributionType != nil {
							f6f0f3elemf0.S3DataDistributionType = f6f0f3iter.EndpointInput.S3DataDistributionType
						}
						if f6f0f3iter.EndpointInput.S3InputMode != nil {
							f6f0f3elemf0.S3InputMode = f6f0f3iter.EndpointInput.S3InputMode
						}
						if f6f0f3iter.EndpointInput.StartTimeOffset != nil {
							f6f0f3elemf0.StartTimeOffset = f6f0f3iter.EndpointInput.StartTimeOffset
						}
						f6f0f3elem.EndpointInput = f6f0f3elemf0
					}
					f6f0f3 = append(f6f0f3, f6f0f3elem)
				}
				f6f0.MonitoringInputs = f6f0f3
			}
			if resp.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringOutputConfig != nil {
				f6f0f4 := &svcapitypes.MonitoringOutputConfig{}
				if resp.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringOutputConfig.KmsKeyId != nil {
					f6f0f4.KMSKeyID = resp.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringOutputConfig.KmsKeyId
				}
				if resp.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringOutputConfig.MonitoringOutputs != nil {
					f6f0f4f1 := []*svcapitypes.MonitoringOutput{}
					for _, f6f0f4f1iter := range resp.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringOutputConfig.MonitoringOutputs {
						f6f0f4f1elem := &svcapitypes.MonitoringOutput{}
						if f6f0f4f1iter.S3Output != nil {
							f6f0f4f1elemf0 := &svcapitypes.MonitoringS3Output{}
							if f6f0f4f1iter.S3Output.LocalPath != nil {
								f6f0f4f1elemf0.LocalPath = f6f0f4f1iter.S3Output.LocalPath
							}
							if f6f0f4f1iter.S3Output.S3UploadMode != nil {
								f6f0f4f1elemf0.S3UploadMode = f6f0f4f1iter.S3Output.S3UploadMode
							}
							if f6f0f4f1iter.S3Output.S3Uri != nil {
								f6f0f4f1elemf0.S3URI = f6f0f4f1iter.S3Output.S3Uri
							}
							f6f0f4f1elem.S3Output = f6f0f4f1elemf0
						}
						f6f0f4f1 = append(f6f0f4f1, f6f0f4f1elem)
					}
					f6f0f4.MonitoringOutputs = f6f0f4f1
				}
				f6f0.MonitoringOutputConfig = f6f0f4
			}
			if resp.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources != nil {
				f6f0f5 := &svcapitypes.MonitoringResources{}
				if resp.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig != nil {
					f6f0f5f0 := &svcapitypes.MonitoringClusterConfig{}
					if resp.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.InstanceCount != nil {
						f6f0f5f0.InstanceCount = resp.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.InstanceCount
					}
					if resp.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.InstanceType != nil {
						f6f0f5f0.InstanceType = resp.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.InstanceType
					}
					if resp.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.VolumeKmsKeyId != nil {
						f6f0f5f0.VolumeKMSKeyID = resp.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.VolumeKmsKeyId
					}
					if resp.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.VolumeSizeInGB != nil {
						f6f0f5f0.VolumeSizeInGB = resp.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.VolumeSizeInGB
					}
					f6f0f5.ClusterConfig = f6f0f5f0
				}
				f6f0.MonitoringResources = f6f0f5
			}
			if resp.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig != nil {
				f6f0f6 := &svcapitypes.NetworkConfig{}
				if resp.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.EnableInterContainerTrafficEncryption != nil {
					f6f0f6.EnableInterContainerTrafficEncryption = resp.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.EnableInterContainerTrafficEncryption
				}
				if resp.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.EnableNetworkIsolation != nil {
					f6f0f6.EnableNetworkIsolation = resp.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.EnableNetworkIsolation
				}
				if resp.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.VpcConfig != nil {
					f6f0f6f2 := &svcapitypes.VPCConfig{}
					if resp.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.VpcConfig.SecurityGroupIds != nil {
						f6f0f6f2f0 := []*string{}
						for _, f6f0f6f2f0iter := range resp.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.VpcConfig.SecurityGroupIds {
							var f6f0f6f2f0elem string
							f6f0f6f2f0elem = *f6f0f6f2f0iter
							f6f0f6f2f0 = append(f6f0f6f2f0, &f6f0f6f2f0elem)
						}
						f6f0f6f2.SecurityGroupIDs = f6f0f6f2f0
					}
					if resp.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.VpcConfig.Subnets != nil {
						f6f0f6f2f1 := []*string{}
						for _, f6f0f6f2f1iter := range resp.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.VpcConfig.Subnets {
							var f6f0f6f2f1elem string
							f6f0f6f2f1elem = *f6f0f6f2f1iter
							f6f0f6f2f1 = append(f6f0f6f2f1, &f6f0f6f2f1elem)
						}
						f6f0f6f2.Subnets = f6f0f6f2f1
					}
					f6f0f6.VPCConfig = f6f0f6f2
				}
				f6f0.NetworkConfig = f6f0f6
			}
			if resp.MonitoringScheduleConfig.MonitoringJobDefinition.RoleArn != nil {
				f6f0.RoleARN = resp.MonitoringScheduleConfig.MonitoringJobDefinition.RoleArn
			}
			if resp.MonitoringScheduleConfig.MonitoringJobDefinition.StoppingCondition != nil {
				f6f0f8 := &svcapitypes.MonitoringStoppingCondition{}
				if resp.MonitoringScheduleConfig.MonitoringJobDefinition.StoppingCondition.MaxRuntimeInSeconds != nil {
					f6f0f8.MaxRuntimeInSeconds = resp.MonitoringScheduleConfig.MonitoringJobDefinition.StoppingCondition.MaxRuntimeInSeconds
				}
				f6f0.StoppingCondition = f6f0f8
			}
			f6.MonitoringJobDefinition = f6f0
		}
		if resp.MonitoringScheduleConfig.MonitoringJobDefinitionName != nil {
			f6.MonitoringJobDefinitionName = resp.MonitoringScheduleConfig.MonitoringJobDefinitionName
		}
		if resp.MonitoringScheduleConfig.MonitoringType != nil {
			f6.MonitoringType = resp.MonitoringScheduleConfig.MonitoringType
		}
		if resp.MonitoringScheduleConfig.ScheduleConfig != nil {
			f6f3 := &svcapitypes.ScheduleConfig{}
			if resp.MonitoringScheduleConfig.ScheduleConfig.ScheduleExpression != nil {
				f6f3.ScheduleExpression = resp.MonitoringScheduleConfig.ScheduleConfig.ScheduleExpression
			}
			f6.ScheduleConfig = f6f3
		}
		ko.Spec.MonitoringScheduleConfig = f6
	} else {
		ko.Spec.MonitoringScheduleConfig = nil
	}
	if resp.MonitoringScheduleName != nil {
		ko.Spec.MonitoringScheduleName = resp.MonitoringScheduleName
	} else {
		ko.Spec.MonitoringScheduleName = nil
	}
	if resp.MonitoringScheduleStatus != nil {
		ko.Status.MonitoringScheduleStatus = resp.MonitoringScheduleStatus
	} else {
		ko.Status.MonitoringScheduleStatus = nil
	}

	rm.setStatusDefaults(ko)
	rm.customSetOutput(r, resp.MonitoringScheduleStatus, ko)
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Spec.MonitoringScheduleName == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.DescribeMonitoringScheduleInput, error) {
	res := &svcsdk.DescribeMonitoringScheduleInput{}

	if r.ko.Spec.MonitoringScheduleName != nil {
		res.SetMonitoringScheduleName(*r.ko.Spec.MonitoringScheduleName)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer exit(err)
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateMonitoringScheduleOutput
	_ = resp
	resp, err = rm.sdkapi.CreateMonitoringScheduleWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateMonitoringSchedule", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.MonitoringScheduleArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.MonitoringScheduleArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	rm.setStatusDefaults(ko)
	rm.customSetOutput(desired, aws.String("Pending"), ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateMonitoringScheduleInput, error) {
	res := &svcsdk.CreateMonitoringScheduleInput{}

	if r.ko.Spec.MonitoringScheduleConfig != nil {
		f0 := &svcsdk.MonitoringScheduleConfig{}
		if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition != nil {
			f0f0 := &svcsdk.MonitoringJobDefinition{}
			if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig != nil {
				f0f0f0 := &svcsdk.MonitoringBaselineConfig{}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig.BaseliningJobName != nil {
					f0f0f0.SetBaseliningJobName(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig.BaseliningJobName)
				}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig.ConstraintsResource != nil {
					f0f0f0f1 := &svcsdk.MonitoringConstraintsResource{}
					if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig.ConstraintsResource.S3URI != nil {
						f0f0f0f1.SetS3Uri(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig.ConstraintsResource.S3URI)
					}
					f0f0f0.SetConstraintsResource(f0f0f0f1)
				}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig.StatisticsResource != nil {
					f0f0f0f2 := &svcsdk.MonitoringStatisticsResource{}
					if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig.StatisticsResource.S3URI != nil {
						f0f0f0f2.SetS3Uri(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig.StatisticsResource.S3URI)
					}
					f0f0f0.SetStatisticsResource(f0f0f0f2)
				}
				f0f0.SetBaselineConfig(f0f0f0)
			}
			if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.Environment != nil {
				f0f0f1 := map[string]*string{}
				for f0f0f1key, f0f0f1valiter := range r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.Environment {
					var f0f0f1val string
					f0f0f1val = *f0f0f1valiter
					f0f0f1[f0f0f1key] = &f0f0f1val
				}
				f0f0.SetEnvironment(f0f0f1)
			}
			if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification != nil {
				f0f0f2 := &svcsdk.MonitoringAppSpecification{}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.ContainerArguments != nil {
					f0f0f2f0 := []*string{}
					for _, f0f0f2f0iter := range r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.ContainerArguments {
						var f0f0f2f0elem string
						f0f0f2f0elem = *f0f0f2f0iter
						f0f0f2f0 = append(f0f0f2f0, &f0f0f2f0elem)
					}
					f0f0f2.SetContainerArguments(f0f0f2f0)
				}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.ContainerEntrypoint != nil {
					f0f0f2f1 := []*string{}
					for _, f0f0f2f1iter := range r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.ContainerEntrypoint {
						var f0f0f2f1elem string
						f0f0f2f1elem = *f0f0f2f1iter
						f0f0f2f1 = append(f0f0f2f1, &f0f0f2f1elem)
					}
					f0f0f2.SetContainerEntrypoint(f0f0f2f1)
				}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.ImageURI != nil {
					f0f0f2.SetImageUri(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.ImageURI)
				}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.PostAnalyticsProcessorSourceURI != nil {
					f0f0f2.SetPostAnalyticsProcessorSourceUri(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.PostAnalyticsProcessorSourceURI)
				}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.RecordPreprocessorSourceURI != nil {
					f0f0f2.SetRecordPreprocessorSourceUri(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.RecordPreprocessorSourceURI)
				}
				f0f0.SetMonitoringAppSpecification(f0f0f2)
			}
			if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringInputs != nil {
				f0f0f3 := []*svcsdk.MonitoringInput{}
				for _, f0f0f3iter := range r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringInputs {
					f0f0f3elem := &svcsdk.MonitoringInput{}
					if f0f0f3iter.EndpointInput != nil {
						f0f0f3elemf0 := &svcsdk.EndpointInput{}
						if f0f0f3iter.EndpointInput.EndTimeOffset != nil {
							f0f0f3elemf0.SetEndTimeOffset(*f0f0f3iter.EndpointInput.EndTimeOffset)
						}
						if f0f0f3iter.EndpointInput.EndpointName != nil {
							f0f0f3elemf0.SetEndpointName(*f0f0f3iter.EndpointInput.EndpointName)
						}
						if f0f0f3iter.EndpointInput.FeaturesAttribute != nil {
							f0f0f3elemf0.SetFeaturesAttribute(*f0f0f3iter.EndpointInput.FeaturesAttribute)
						}
						if f0f0f3iter.EndpointInput.InferenceAttribute != nil {
							f0f0f3elemf0.SetInferenceAttribute(*f0f0f3iter.EndpointInput.InferenceAttribute)
						}
						if f0f0f3iter.EndpointInput.LocalPath != nil {
							f0f0f3elemf0.SetLocalPath(*f0f0f3iter.EndpointInput.LocalPath)
						}
						if f0f0f3iter.EndpointInput.ProbabilityAttribute != nil {
							f0f0f3elemf0.SetProbabilityAttribute(*f0f0f3iter.EndpointInput.ProbabilityAttribute)
						}
						if f0f0f3iter.EndpointInput.ProbabilityThresholdAttribute != nil {
							f0f0f3elemf0.SetProbabilityThresholdAttribute(*f0f0f3iter.EndpointInput.ProbabilityThresholdAttribute)
						}
						if f0f0f3iter.EndpointInput.S3DataDistributionType != nil {
							f0f0f3elemf0.SetS3DataDistributionType(*f0f0f3iter.EndpointInput.S3DataDistributionType)
						}
						if f0f0f3iter.EndpointInput.S3InputMode != nil {
							f0f0f3elemf0.SetS3InputMode(*f0f0f3iter.EndpointInput.S3InputMode)
						}
						if f0f0f3iter.EndpointInput.StartTimeOffset != nil {
							f0f0f3elemf0.SetStartTimeOffset(*f0f0f3iter.EndpointInput.StartTimeOffset)
						}
						f0f0f3elem.SetEndpointInput(f0f0f3elemf0)
					}
					f0f0f3 = append(f0f0f3, f0f0f3elem)
				}
				f0f0.SetMonitoringInputs(f0f0f3)
			}
			if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringOutputConfig != nil {
				f0f0f4 := &svcsdk.MonitoringOutputConfig{}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringOutputConfig.KMSKeyID != nil {
					f0f0f4.SetKmsKeyId(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringOutputConfig.KMSKeyID)
				}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringOutputConfig.MonitoringOutputs != nil {
					f0f0f4f1 := []*svcsdk.MonitoringOutput{}
					for _, f0f0f4f1iter := range r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringOutputConfig.MonitoringOutputs {
						f0f0f4f1elem := &svcsdk.MonitoringOutput{}
						if f0f0f4f1iter.S3Output != nil {
							f0f0f4f1elemf0 := &svcsdk.MonitoringS3Output{}
							if f0f0f4f1iter.S3Output.LocalPath != nil {
								f0f0f4f1elemf0.SetLocalPath(*f0f0f4f1iter.S3Output.LocalPath)
							}
							if f0f0f4f1iter.S3Output.S3UploadMode != nil {
								f0f0f4f1elemf0.SetS3UploadMode(*f0f0f4f1iter.S3Output.S3UploadMode)
							}
							if f0f0f4f1iter.S3Output.S3URI != nil {
								f0f0f4f1elemf0.SetS3Uri(*f0f0f4f1iter.S3Output.S3URI)
							}
							f0f0f4f1elem.SetS3Output(f0f0f4f1elemf0)
						}
						f0f0f4f1 = append(f0f0f4f1, f0f0f4f1elem)
					}
					f0f0f4.SetMonitoringOutputs(f0f0f4f1)
				}
				f0f0.SetMonitoringOutputConfig(f0f0f4)
			}
			if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources != nil {
				f0f0f5 := &svcsdk.MonitoringResources{}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig != nil {
					f0f0f5f0 := &svcsdk.MonitoringClusterConfig{}
					if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.InstanceCount != nil {
						f0f0f5f0.SetInstanceCount(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.InstanceCount)
					}
					if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.InstanceType != nil {
						f0f0f5f0.SetInstanceType(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.InstanceType)
					}
					if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.VolumeKMSKeyID != nil {
						f0f0f5f0.SetVolumeKmsKeyId(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.VolumeKMSKeyID)
					}
					if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.VolumeSizeInGB != nil {
						f0f0f5f0.SetVolumeSizeInGB(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.VolumeSizeInGB)
					}
					f0f0f5.SetClusterConfig(f0f0f5f0)
				}
				f0f0.SetMonitoringResources(f0f0f5)
			}
			if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig != nil {
				f0f0f6 := &svcsdk.NetworkConfig{}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.EnableInterContainerTrafficEncryption != nil {
					f0f0f6.SetEnableInterContainerTrafficEncryption(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.EnableInterContainerTrafficEncryption)
				}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.EnableNetworkIsolation != nil {
					f0f0f6.SetEnableNetworkIsolation(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.EnableNetworkIsolation)
				}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.VPCConfig != nil {
					f0f0f6f2 := &svcsdk.VpcConfig{}
					if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.VPCConfig.SecurityGroupIDs != nil {
						f0f0f6f2f0 := []*string{}
						for _, f0f0f6f2f0iter := range r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.VPCConfig.SecurityGroupIDs {
							var f0f0f6f2f0elem string
							f0f0f6f2f0elem = *f0f0f6f2f0iter
							f0f0f6f2f0 = append(f0f0f6f2f0, &f0f0f6f2f0elem)
						}
						f0f0f6f2.SetSecurityGroupIds(f0f0f6f2f0)
					}
					if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.VPCConfig.Subnets != nil {
						f0f0f6f2f1 := []*string{}
						for _, f0f0f6f2f1iter := range r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.VPCConfig.Subnets {
							var f0f0f6f2f1elem string
							f0f0f6f2f1elem = *f0f0f6f2f1iter
							f0f0f6f2f1 = append(f0f0f6f2f1, &f0f0f6f2f1elem)
						}
						f0f0f6f2.SetSubnets(f0f0f6f2f1)
					}
					f0f0f6.SetVpcConfig(f0f0f6f2)
				}
				f0f0.SetNetworkConfig(f0f0f6)
			}
			if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.RoleARN != nil {
				f0f0.SetRoleArn(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.RoleARN)
			}
			if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.StoppingCondition != nil {
				f0f0f8 := &svcsdk.MonitoringStoppingCondition{}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.StoppingCondition.MaxRuntimeInSeconds != nil {
					f0f0f8.SetMaxRuntimeInSeconds(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.StoppingCondition.MaxRuntimeInSeconds)
				}
				f0f0.SetStoppingCondition(f0f0f8)
			}
			f0.SetMonitoringJobDefinition(f0f0)
		}
		if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinitionName != nil {
			f0.SetMonitoringJobDefinitionName(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinitionName)
		}
		if r.ko.Spec.MonitoringScheduleConfig.MonitoringType != nil {
			f0.SetMonitoringType(*r.ko.Spec.MonitoringScheduleConfig.MonitoringType)
		}
		if r.ko.Spec.MonitoringScheduleConfig.ScheduleConfig != nil {
			f0f3 := &svcsdk.ScheduleConfig{}
			if r.ko.Spec.MonitoringScheduleConfig.ScheduleConfig.ScheduleExpression != nil {
				f0f3.SetScheduleExpression(*r.ko.Spec.MonitoringScheduleConfig.ScheduleConfig.ScheduleExpression)
			}
			f0.SetScheduleConfig(f0f3)
		}
		res.SetMonitoringScheduleConfig(f0)
	}
	if r.ko.Spec.MonitoringScheduleName != nil {
		res.SetMonitoringScheduleName(*r.ko.Spec.MonitoringScheduleName)
	}
	if r.ko.Spec.Tags != nil {
		f2 := []*svcsdk.Tag{}
		for _, f2iter := range r.ko.Spec.Tags {
			f2elem := &svcsdk.Tag{}
			if f2iter.Key != nil {
				f2elem.SetKey(*f2iter.Key)
			}
			if f2iter.Value != nil {
				f2elem.SetValue(*f2iter.Value)
			}
			f2 = append(f2, f2elem)
		}
		res.SetTags(f2)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer exit(err)
	// specialized logic to check if modification is allowed
	err = rm.statusAllowUpdates(ctx, latest)
	if err != nil {
		return nil, err
	}
	input, err := rm.newUpdateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.UpdateMonitoringScheduleOutput
	_ = resp
	resp, err = rm.sdkapi.UpdateMonitoringScheduleWithContext(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdateMonitoringSchedule", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.MonitoringScheduleArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.MonitoringScheduleArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	rm.setStatusDefaults(ko)
	rm.customSetOutput(desired, aws.String("Pending"), ko)
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.UpdateMonitoringScheduleInput, error) {
	res := &svcsdk.UpdateMonitoringScheduleInput{}

	if r.ko.Spec.MonitoringScheduleConfig != nil {
		f0 := &svcsdk.MonitoringScheduleConfig{}
		if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition != nil {
			f0f0 := &svcsdk.MonitoringJobDefinition{}
			if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig != nil {
				f0f0f0 := &svcsdk.MonitoringBaselineConfig{}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig.BaseliningJobName != nil {
					f0f0f0.SetBaseliningJobName(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig.BaseliningJobName)
				}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig.ConstraintsResource != nil {
					f0f0f0f1 := &svcsdk.MonitoringConstraintsResource{}
					if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig.ConstraintsResource.S3URI != nil {
						f0f0f0f1.SetS3Uri(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig.ConstraintsResource.S3URI)
					}
					f0f0f0.SetConstraintsResource(f0f0f0f1)
				}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig.StatisticsResource != nil {
					f0f0f0f2 := &svcsdk.MonitoringStatisticsResource{}
					if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig.StatisticsResource.S3URI != nil {
						f0f0f0f2.SetS3Uri(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig.StatisticsResource.S3URI)
					}
					f0f0f0.SetStatisticsResource(f0f0f0f2)
				}
				f0f0.SetBaselineConfig(f0f0f0)
			}
			if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.Environment != nil {
				f0f0f1 := map[string]*string{}
				for f0f0f1key, f0f0f1valiter := range r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.Environment {
					var f0f0f1val string
					f0f0f1val = *f0f0f1valiter
					f0f0f1[f0f0f1key] = &f0f0f1val
				}
				f0f0.SetEnvironment(f0f0f1)
			}
			if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification != nil {
				f0f0f2 := &svcsdk.MonitoringAppSpecification{}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.ContainerArguments != nil {
					f0f0f2f0 := []*string{}
					for _, f0f0f2f0iter := range r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.ContainerArguments {
						var f0f0f2f0elem string
						f0f0f2f0elem = *f0f0f2f0iter
						f0f0f2f0 = append(f0f0f2f0, &f0f0f2f0elem)
					}
					f0f0f2.SetContainerArguments(f0f0f2f0)
				}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.ContainerEntrypoint != nil {
					f0f0f2f1 := []*string{}
					for _, f0f0f2f1iter := range r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.ContainerEntrypoint {
						var f0f0f2f1elem string
						f0f0f2f1elem = *f0f0f2f1iter
						f0f0f2f1 = append(f0f0f2f1, &f0f0f2f1elem)
					}
					f0f0f2.SetContainerEntrypoint(f0f0f2f1)
				}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.ImageURI != nil {
					f0f0f2.SetImageUri(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.ImageURI)
				}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.PostAnalyticsProcessorSourceURI != nil {
					f0f0f2.SetPostAnalyticsProcessorSourceUri(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.PostAnalyticsProcessorSourceURI)
				}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.RecordPreprocessorSourceURI != nil {
					f0f0f2.SetRecordPreprocessorSourceUri(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.RecordPreprocessorSourceURI)
				}
				f0f0.SetMonitoringAppSpecification(f0f0f2)
			}
			if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringInputs != nil {
				f0f0f3 := []*svcsdk.MonitoringInput{}
				for _, f0f0f3iter := range r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringInputs {
					f0f0f3elem := &svcsdk.MonitoringInput{}
					if f0f0f3iter.EndpointInput != nil {
						f0f0f3elemf0 := &svcsdk.EndpointInput{}
						if f0f0f3iter.EndpointInput.EndTimeOffset != nil {
							f0f0f3elemf0.SetEndTimeOffset(*f0f0f3iter.EndpointInput.EndTimeOffset)
						}
						if f0f0f3iter.EndpointInput.EndpointName != nil {
							f0f0f3elemf0.SetEndpointName(*f0f0f3iter.EndpointInput.EndpointName)
						}
						if f0f0f3iter.EndpointInput.FeaturesAttribute != nil {
							f0f0f3elemf0.SetFeaturesAttribute(*f0f0f3iter.EndpointInput.FeaturesAttribute)
						}
						if f0f0f3iter.EndpointInput.InferenceAttribute != nil {
							f0f0f3elemf0.SetInferenceAttribute(*f0f0f3iter.EndpointInput.InferenceAttribute)
						}
						if f0f0f3iter.EndpointInput.LocalPath != nil {
							f0f0f3elemf0.SetLocalPath(*f0f0f3iter.EndpointInput.LocalPath)
						}
						if f0f0f3iter.EndpointInput.ProbabilityAttribute != nil {
							f0f0f3elemf0.SetProbabilityAttribute(*f0f0f3iter.EndpointInput.ProbabilityAttribute)
						}
						if f0f0f3iter.EndpointInput.ProbabilityThresholdAttribute != nil {
							f0f0f3elemf0.SetProbabilityThresholdAttribute(*f0f0f3iter.EndpointInput.ProbabilityThresholdAttribute)
						}
						if f0f0f3iter.EndpointInput.S3DataDistributionType != nil {
							f0f0f3elemf0.SetS3DataDistributionType(*f0f0f3iter.EndpointInput.S3DataDistributionType)
						}
						if f0f0f3iter.EndpointInput.S3InputMode != nil {
							f0f0f3elemf0.SetS3InputMode(*f0f0f3iter.EndpointInput.S3InputMode)
						}
						if f0f0f3iter.EndpointInput.StartTimeOffset != nil {
							f0f0f3elemf0.SetStartTimeOffset(*f0f0f3iter.EndpointInput.StartTimeOffset)
						}
						f0f0f3elem.SetEndpointInput(f0f0f3elemf0)
					}
					f0f0f3 = append(f0f0f3, f0f0f3elem)
				}
				f0f0.SetMonitoringInputs(f0f0f3)
			}
			if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringOutputConfig != nil {
				f0f0f4 := &svcsdk.MonitoringOutputConfig{}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringOutputConfig.KMSKeyID != nil {
					f0f0f4.SetKmsKeyId(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringOutputConfig.KMSKeyID)
				}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringOutputConfig.MonitoringOutputs != nil {
					f0f0f4f1 := []*svcsdk.MonitoringOutput{}
					for _, f0f0f4f1iter := range r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringOutputConfig.MonitoringOutputs {
						f0f0f4f1elem := &svcsdk.MonitoringOutput{}
						if f0f0f4f1iter.S3Output != nil {
							f0f0f4f1elemf0 := &svcsdk.MonitoringS3Output{}
							if f0f0f4f1iter.S3Output.LocalPath != nil {
								f0f0f4f1elemf0.SetLocalPath(*f0f0f4f1iter.S3Output.LocalPath)
							}
							if f0f0f4f1iter.S3Output.S3UploadMode != nil {
								f0f0f4f1elemf0.SetS3UploadMode(*f0f0f4f1iter.S3Output.S3UploadMode)
							}
							if f0f0f4f1iter.S3Output.S3URI != nil {
								f0f0f4f1elemf0.SetS3Uri(*f0f0f4f1iter.S3Output.S3URI)
							}
							f0f0f4f1elem.SetS3Output(f0f0f4f1elemf0)
						}
						f0f0f4f1 = append(f0f0f4f1, f0f0f4f1elem)
					}
					f0f0f4.SetMonitoringOutputs(f0f0f4f1)
				}
				f0f0.SetMonitoringOutputConfig(f0f0f4)
			}
			if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources != nil {
				f0f0f5 := &svcsdk.MonitoringResources{}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig != nil {
					f0f0f5f0 := &svcsdk.MonitoringClusterConfig{}
					if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.InstanceCount != nil {
						f0f0f5f0.SetInstanceCount(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.InstanceCount)
					}
					if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.InstanceType != nil {
						f0f0f5f0.SetInstanceType(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.InstanceType)
					}
					if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.VolumeKMSKeyID != nil {
						f0f0f5f0.SetVolumeKmsKeyId(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.VolumeKMSKeyID)
					}
					if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.VolumeSizeInGB != nil {
						f0f0f5f0.SetVolumeSizeInGB(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.VolumeSizeInGB)
					}
					f0f0f5.SetClusterConfig(f0f0f5f0)
				}
				f0f0.SetMonitoringResources(f0f0f5)
			}
			if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig != nil {
				f0f0f6 := &svcsdk.NetworkConfig{}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.EnableInterContainerTrafficEncryption != nil {
					f0f0f6.SetEnableInterContainerTrafficEncryption(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.EnableInterContainerTrafficEncryption)
				}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.EnableNetworkIsolation != nil {
					f0f0f6.SetEnableNetworkIsolation(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.EnableNetworkIsolation)
				}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.VPCConfig != nil {
					f0f0f6f2 := &svcsdk.VpcConfig{}
					if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.VPCConfig.SecurityGroupIDs != nil {
						f0f0f6f2f0 := []*string{}
						for _, f0f0f6f2f0iter := range r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.VPCConfig.SecurityGroupIDs {
							var f0f0f6f2f0elem string
							f0f0f6f2f0elem = *f0f0f6f2f0iter
							f0f0f6f2f0 = append(f0f0f6f2f0, &f0f0f6f2f0elem)
						}
						f0f0f6f2.SetSecurityGroupIds(f0f0f6f2f0)
					}
					if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.VPCConfig.Subnets != nil {
						f0f0f6f2f1 := []*string{}
						for _, f0f0f6f2f1iter := range r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.VPCConfig.Subnets {
							var f0f0f6f2f1elem string
							f0f0f6f2f1elem = *f0f0f6f2f1iter
							f0f0f6f2f1 = append(f0f0f6f2f1, &f0f0f6f2f1elem)
						}
						f0f0f6f2.SetSubnets(f0f0f6f2f1)
					}
					f0f0f6.SetVpcConfig(f0f0f6f2)
				}
				f0f0.SetNetworkConfig(f0f0f6)
			}
			if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.RoleARN != nil {
				f0f0.SetRoleArn(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.RoleARN)
			}
			if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.StoppingCondition != nil {
				f0f0f8 := &svcsdk.MonitoringStoppingCondition{}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.StoppingCondition.MaxRuntimeInSeconds != nil {
					f0f0f8.SetMaxRuntimeInSeconds(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.StoppingCondition.MaxRuntimeInSeconds)
				}
				f0f0.SetStoppingCondition(f0f0f8)
			}
			f0.SetMonitoringJobDefinition(f0f0)
		}
		if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinitionName != nil {
			f0.SetMonitoringJobDefinitionName(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinitionName)
		}
		if r.ko.Spec.MonitoringScheduleConfig.MonitoringType != nil {
			f0.SetMonitoringType(*r.ko.Spec.MonitoringScheduleConfig.MonitoringType)
		}
		if r.ko.Spec.MonitoringScheduleConfig.ScheduleConfig != nil {
			f0f3 := &svcsdk.ScheduleConfig{}
			if r.ko.Spec.MonitoringScheduleConfig.ScheduleConfig.ScheduleExpression != nil {
				f0f3.SetScheduleExpression(*r.ko.Spec.MonitoringScheduleConfig.ScheduleConfig.ScheduleExpression)
			}
			f0.SetScheduleConfig(f0f3)
		}
		res.SetMonitoringScheduleConfig(f0)
	}
	if r.ko.Spec.MonitoringScheduleName != nil {
		res.SetMonitoringScheduleName(*r.ko.Spec.MonitoringScheduleName)
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer exit(err)
	// specialized logic to check if modification is allowed
	err = rm.statusAllowUpdates(ctx, r)
	if err != nil {
		return r, err
	}
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteMonitoringScheduleOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteMonitoringScheduleWithContext(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteMonitoringSchedule", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteMonitoringScheduleInput, error) {
	res := &svcsdk.DeleteMonitoringScheduleInput{}

	if r.ko.Spec.MonitoringScheduleName != nil {
		res.SetMonitoringScheduleName(*r.ko.Spec.MonitoringScheduleName)
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.MonitoringSchedule,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}

	if rm.terminalAWSError(err) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		terminalCondition.Status = corev1.ConditionTrue
		awsErr, _ := ackerr.AWSError(err)
		errorMessage := awsErr.Message()
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Message()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	if syncCondition == nil && onSuccess {
		syncCondition = &ackv1alpha1.Condition{
			Type:   ackv1alpha1.ConditionTypeResourceSynced,
			Status: corev1.ConditionTrue,
		}
		ko.Status.Conditions = append(ko.Status.Conditions, syncCondition)
	}
	// custom update conditions
	customUpdate := rm.CustomUpdateConditions(ko, r, err)
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil || customUpdate {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}
	awsErr, ok := ackerr.AWSError(err)
	if !ok {
		return false
	}
	switch awsErr.Code() {
	case "ResourceLimitExceeded",
		"ResourceNotFound",
		"ResourceInUse",
		"OptInRequired",
		"InvalidParameterCombination",
		"InvalidParameterValue",
		"MissingParameter",
		"MissingAction",
		"InvalidQueryParameter",
		"MalformedQueryString",
		"InvalidAction",
		"UnrecognizedClientException":
		return true
	default:
		return false
	}
}
