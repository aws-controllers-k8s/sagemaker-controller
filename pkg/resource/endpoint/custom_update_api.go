// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Use this file to add custom implementation for any operation of intercept
// the autogenerated code that trigger an update on an endpoint

package endpoint

import (
	"context"
	"errors"
	"fmt"
	"strings"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	"github.com/aws-controllers-k8s/runtime/pkg/requeue"
	svcsdk "github.com/aws/aws-sdk-go/service/sagemaker"
)

var (
	FailUpdateError = fmt.Errorf("Unable to update Endpoint. Check FailureReason")
)

// customUpdateEndpoint adds specialized logic to check if controller should
// proceeed with updateEndpoint call.
// Update is blocked in the following cases:
//  1. until EndpointStatus != InService
//  2. EndpointStatus == Failed
//  3. A previous update to the Endpoint with same endpointConfigName failed
// Method returns nil if endpoint can be updated, otherwise error depending on above cases
func (rm *resourceManager) customUpdateEndpoint(
	ctx context.Context,
	desired *resource,
	latest *resource,
	diffReporter *ackcompare.Reporter,
) (*resource, error) {
	latestStatus := latest.ko.Status.EndpointStatus
	if latestStatus != nil && *latestStatus != svcsdk.EndpointStatusFailed {
		// Case 1 - requeueAfter until endpoint is in InService state
		err := rm.endpointStatusAllowUpdates(ctx, latest)
		if err != nil {
			return nil, err
		}
	}

	failureReason := latest.ko.Status.FailureReason
	latestEndpointConfig := latest.ko.Spec.EndpointConfigName
	desiredEndpointConfig := desired.ko.Spec.EndpointConfigName
	lastEndpointConfigForUpdate := desired.ko.Status.LastEndpointConfigNameForUpdate

	// Case 2 - EndpointStatus == Failed
	if (latestStatus != nil && *latestStatus == svcsdk.EndpointStatusFailed) ||
		// Case 3 - A previous update to the Endpoint with same endpointConfigName failed
		// Following checks indicate FailureReason is related to a failed update
		// Note: Internal service error is an exception for this case
		// "Request to service failed" means update failed because of ISE and can be retried
		(latestStatus != nil && failureReason != nil && lastEndpointConfigForUpdate != nil &&
			!strings.HasPrefix(*failureReason, "Request to service failed") &&
			*desiredEndpointConfig != *latestEndpointConfig &&
			*desiredEndpointConfig == *lastEndpointConfigForUpdate) {
		return nil, FailUpdateError
	}

	return nil, nil
}

// customDeleteEndpoint adds specialized logic to requeueAfter until endpoint is in
// InService or Failed state before a deleteEndpoint can be called
func (rm *resourceManager) customDeleteEndpoint(
	ctx context.Context,
	latest *resource,
) error {
	latestStatus := latest.ko.Status.EndpointStatus
	if latestStatus != nil && *latestStatus == svcsdk.EndpointStatusFailed {
		return nil
	}
	return rm.endpointStatusAllowUpdates(ctx, latest)
}

// endpointStatusAllowUpdates is a helper method to determine if endpoint allows modification
func (rm *resourceManager) endpointStatusAllowUpdates(
	ctx context.Context,
	r *resource,
) error {
	latestStatus := r.ko.Status.EndpointStatus
	if latestStatus != nil && *latestStatus != svcsdk.EndpointStatusInService {
		return requeue.NeededAfter(
			errors.New("endpoint status does not allow modification, it is not in 'InService' state"),
			requeue.DefaultRequeueAfterDuration)
	}

	return nil
}
