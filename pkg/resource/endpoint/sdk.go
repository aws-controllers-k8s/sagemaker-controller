// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package endpoint

import (
	"context"
	"errors"
	"fmt"
	"math"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go-v2/aws"
	svcsdk "github.com/aws/aws-sdk-go-v2/service/sagemaker"
	svcsdktypes "github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
	smithy "github.com/aws/smithy-go"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/sagemaker-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &svcsdk.Client{}
	_ = &svcapitypes.Endpoint{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
	_ = &aws.Config{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.DescribeEndpointOutput
	resp, err = rm.sdkapi.DescribeEndpoint(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "DescribeEndpoint", err)
	if err != nil {
		var awsErr smithy.APIError
		if errors.As(err, &awsErr) && awsErr.ErrorCode() == "ValidationException" && strings.HasPrefix(awsErr.ErrorMessage(), "Could not find endpoint") {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.CreationTime != nil {
		ko.Status.CreationTime = &metav1.Time{*resp.CreationTime}
	} else {
		ko.Status.CreationTime = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.EndpointArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.EndpointArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.EndpointConfigName != nil {
		ko.Spec.EndpointConfigName = resp.EndpointConfigName
	} else {
		ko.Spec.EndpointConfigName = nil
	}
	if resp.EndpointName != nil {
		ko.Spec.EndpointName = resp.EndpointName
	} else {
		ko.Spec.EndpointName = nil
	}
	if resp.EndpointStatus != "" {
		ko.Status.EndpointStatus = aws.String(string(resp.EndpointStatus))
	} else {
		ko.Status.EndpointStatus = nil
	}
	if resp.FailureReason != nil {
		ko.Status.FailureReason = resp.FailureReason
	} else {
		ko.Status.FailureReason = nil
	}
	if resp.LastDeploymentConfig != nil {
		f8 := &svcapitypes.DeploymentConfig{}
		if resp.LastDeploymentConfig.AutoRollbackConfiguration != nil {
			f8f0 := &svcapitypes.AutoRollbackConfig{}
			if resp.LastDeploymentConfig.AutoRollbackConfiguration.Alarms != nil {
				f8f0f0 := []*svcapitypes.Alarm{}
				for _, f8f0f0iter := range resp.LastDeploymentConfig.AutoRollbackConfiguration.Alarms {
					f8f0f0elem := &svcapitypes.Alarm{}
					if f8f0f0iter.AlarmName != nil {
						f8f0f0elem.AlarmName = f8f0f0iter.AlarmName
					}
					f8f0f0 = append(f8f0f0, f8f0f0elem)
				}
				f8f0.Alarms = f8f0f0
			}
			f8.AutoRollbackConfiguration = f8f0
		}
		if resp.LastDeploymentConfig.BlueGreenUpdatePolicy != nil {
			f8f1 := &svcapitypes.BlueGreenUpdatePolicy{}
			if resp.LastDeploymentConfig.BlueGreenUpdatePolicy.MaximumExecutionTimeoutInSeconds != nil {
				maximumExecutionTimeoutInSecondsCopy := int64(*resp.LastDeploymentConfig.BlueGreenUpdatePolicy.MaximumExecutionTimeoutInSeconds)
				f8f1.MaximumExecutionTimeoutInSeconds = &maximumExecutionTimeoutInSecondsCopy
			}
			if resp.LastDeploymentConfig.BlueGreenUpdatePolicy.TerminationWaitInSeconds != nil {
				terminationWaitInSecondsCopy := int64(*resp.LastDeploymentConfig.BlueGreenUpdatePolicy.TerminationWaitInSeconds)
				f8f1.TerminationWaitInSeconds = &terminationWaitInSecondsCopy
			}
			if resp.LastDeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration != nil {
				f8f1f2 := &svcapitypes.TrafficRoutingConfig{}
				if resp.LastDeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration.CanarySize != nil {
					f8f1f2f0 := &svcapitypes.CapacitySize{}
					if resp.LastDeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration.CanarySize.Type != "" {
						f8f1f2f0.Type = aws.String(string(resp.LastDeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration.CanarySize.Type))
					}
					if resp.LastDeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration.CanarySize.Value != nil {
						valueCopy := int64(*resp.LastDeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration.CanarySize.Value)
						f8f1f2f0.Value = &valueCopy
					}
					f8f1f2.CanarySize = f8f1f2f0
				}
				if resp.LastDeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration.LinearStepSize != nil {
					f8f1f2f1 := &svcapitypes.CapacitySize{}
					if resp.LastDeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration.LinearStepSize.Type != "" {
						f8f1f2f1.Type = aws.String(string(resp.LastDeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration.LinearStepSize.Type))
					}
					if resp.LastDeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration.LinearStepSize.Value != nil {
						valueCopy := int64(*resp.LastDeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration.LinearStepSize.Value)
						f8f1f2f1.Value = &valueCopy
					}
					f8f1f2.LinearStepSize = f8f1f2f1
				}
				if resp.LastDeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration.Type != "" {
					f8f1f2.Type = aws.String(string(resp.LastDeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration.Type))
				}
				if resp.LastDeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration.WaitIntervalInSeconds != nil {
					waitIntervalInSecondsCopy := int64(*resp.LastDeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration.WaitIntervalInSeconds)
					f8f1f2.WaitIntervalInSeconds = &waitIntervalInSecondsCopy
				}
				f8f1.TrafficRoutingConfiguration = f8f1f2
			}
			f8.BlueGreenUpdatePolicy = f8f1
		}
		if resp.LastDeploymentConfig.RollingUpdatePolicy != nil {
			f8f2 := &svcapitypes.RollingUpdatePolicy{}
			if resp.LastDeploymentConfig.RollingUpdatePolicy.MaximumBatchSize != nil {
				f8f2f0 := &svcapitypes.CapacitySize{}
				if resp.LastDeploymentConfig.RollingUpdatePolicy.MaximumBatchSize.Type != "" {
					f8f2f0.Type = aws.String(string(resp.LastDeploymentConfig.RollingUpdatePolicy.MaximumBatchSize.Type))
				}
				if resp.LastDeploymentConfig.RollingUpdatePolicy.MaximumBatchSize.Value != nil {
					valueCopy := int64(*resp.LastDeploymentConfig.RollingUpdatePolicy.MaximumBatchSize.Value)
					f8f2f0.Value = &valueCopy
				}
				f8f2.MaximumBatchSize = f8f2f0
			}
			if resp.LastDeploymentConfig.RollingUpdatePolicy.MaximumExecutionTimeoutInSeconds != nil {
				maximumExecutionTimeoutInSecondsCopy := int64(*resp.LastDeploymentConfig.RollingUpdatePolicy.MaximumExecutionTimeoutInSeconds)
				f8f2.MaximumExecutionTimeoutInSeconds = &maximumExecutionTimeoutInSecondsCopy
			}
			if resp.LastDeploymentConfig.RollingUpdatePolicy.RollbackMaximumBatchSize != nil {
				f8f2f2 := &svcapitypes.CapacitySize{}
				if resp.LastDeploymentConfig.RollingUpdatePolicy.RollbackMaximumBatchSize.Type != "" {
					f8f2f2.Type = aws.String(string(resp.LastDeploymentConfig.RollingUpdatePolicy.RollbackMaximumBatchSize.Type))
				}
				if resp.LastDeploymentConfig.RollingUpdatePolicy.RollbackMaximumBatchSize.Value != nil {
					valueCopy := int64(*resp.LastDeploymentConfig.RollingUpdatePolicy.RollbackMaximumBatchSize.Value)
					f8f2f2.Value = &valueCopy
				}
				f8f2.RollbackMaximumBatchSize = f8f2f2
			}
			if resp.LastDeploymentConfig.RollingUpdatePolicy.WaitIntervalInSeconds != nil {
				waitIntervalInSecondsCopy := int64(*resp.LastDeploymentConfig.RollingUpdatePolicy.WaitIntervalInSeconds)
				f8f2.WaitIntervalInSeconds = &waitIntervalInSecondsCopy
			}
			f8.RollingUpdatePolicy = f8f2
		}
		ko.Spec.DeploymentConfig = f8
	} else {
		ko.Spec.DeploymentConfig = nil
	}
	if resp.LastModifiedTime != nil {
		ko.Status.LastModifiedTime = &metav1.Time{*resp.LastModifiedTime}
	} else {
		ko.Status.LastModifiedTime = nil
	}
	if resp.PendingDeploymentSummary != nil {
		f10 := &svcapitypes.PendingDeploymentSummary{}
		if resp.PendingDeploymentSummary.EndpointConfigName != nil {
			f10.EndpointConfigName = resp.PendingDeploymentSummary.EndpointConfigName
		}
		if resp.PendingDeploymentSummary.ProductionVariants != nil {
			f10f1 := []*svcapitypes.PendingProductionVariantSummary{}
			for _, f10f1iter := range resp.PendingDeploymentSummary.ProductionVariants {
				f10f1elem := &svcapitypes.PendingProductionVariantSummary{}
				if f10f1iter.AcceleratorType != "" {
					f10f1elem.AcceleratorType = aws.String(string(f10f1iter.AcceleratorType))
				}
				if f10f1iter.CurrentInstanceCount != nil {
					currentInstanceCountCopy := int64(*f10f1iter.CurrentInstanceCount)
					f10f1elem.CurrentInstanceCount = &currentInstanceCountCopy
				}
				if f10f1iter.CurrentServerlessConfig != nil {
					f10f1elemf2 := &svcapitypes.ProductionVariantServerlessConfig{}
					if f10f1iter.CurrentServerlessConfig.MaxConcurrency != nil {
						maxConcurrencyCopy := int64(*f10f1iter.CurrentServerlessConfig.MaxConcurrency)
						f10f1elemf2.MaxConcurrency = &maxConcurrencyCopy
					}
					if f10f1iter.CurrentServerlessConfig.MemorySizeInMB != nil {
						memorySizeInMBCopy := int64(*f10f1iter.CurrentServerlessConfig.MemorySizeInMB)
						f10f1elemf2.MemorySizeInMB = &memorySizeInMBCopy
					}
					if f10f1iter.CurrentServerlessConfig.ProvisionedConcurrency != nil {
						provisionedConcurrencyCopy := int64(*f10f1iter.CurrentServerlessConfig.ProvisionedConcurrency)
						f10f1elemf2.ProvisionedConcurrency = &provisionedConcurrencyCopy
					}
					f10f1elem.CurrentServerlessConfig = f10f1elemf2
				}
				if f10f1iter.CurrentWeight != nil {
					currentWeightCopy := float64(*f10f1iter.CurrentWeight)
					f10f1elem.CurrentWeight = &currentWeightCopy
				}
				if f10f1iter.DeployedImages != nil {
					f10f1elemf4 := []*svcapitypes.DeployedImage{}
					for _, f10f1elemf4iter := range f10f1iter.DeployedImages {
						f10f1elemf4elem := &svcapitypes.DeployedImage{}
						if f10f1elemf4iter.ResolutionTime != nil {
							f10f1elemf4elem.ResolutionTime = &metav1.Time{*f10f1elemf4iter.ResolutionTime}
						}
						if f10f1elemf4iter.ResolvedImage != nil {
							f10f1elemf4elem.ResolvedImage = f10f1elemf4iter.ResolvedImage
						}
						if f10f1elemf4iter.SpecifiedImage != nil {
							f10f1elemf4elem.SpecifiedImage = f10f1elemf4iter.SpecifiedImage
						}
						f10f1elemf4 = append(f10f1elemf4, f10f1elemf4elem)
					}
					f10f1elem.DeployedImages = f10f1elemf4
				}
				if f10f1iter.DesiredInstanceCount != nil {
					desiredInstanceCountCopy := int64(*f10f1iter.DesiredInstanceCount)
					f10f1elem.DesiredInstanceCount = &desiredInstanceCountCopy
				}
				if f10f1iter.DesiredServerlessConfig != nil {
					f10f1elemf6 := &svcapitypes.ProductionVariantServerlessConfig{}
					if f10f1iter.DesiredServerlessConfig.MaxConcurrency != nil {
						maxConcurrencyCopy := int64(*f10f1iter.DesiredServerlessConfig.MaxConcurrency)
						f10f1elemf6.MaxConcurrency = &maxConcurrencyCopy
					}
					if f10f1iter.DesiredServerlessConfig.MemorySizeInMB != nil {
						memorySizeInMBCopy := int64(*f10f1iter.DesiredServerlessConfig.MemorySizeInMB)
						f10f1elemf6.MemorySizeInMB = &memorySizeInMBCopy
					}
					if f10f1iter.DesiredServerlessConfig.ProvisionedConcurrency != nil {
						provisionedConcurrencyCopy := int64(*f10f1iter.DesiredServerlessConfig.ProvisionedConcurrency)
						f10f1elemf6.ProvisionedConcurrency = &provisionedConcurrencyCopy
					}
					f10f1elem.DesiredServerlessConfig = f10f1elemf6
				}
				if f10f1iter.DesiredWeight != nil {
					desiredWeightCopy := float64(*f10f1iter.DesiredWeight)
					f10f1elem.DesiredWeight = &desiredWeightCopy
				}
				if f10f1iter.InstanceType != "" {
					f10f1elem.InstanceType = aws.String(string(f10f1iter.InstanceType))
				}
				if f10f1iter.ManagedInstanceScaling != nil {
					f10f1elemf9 := &svcapitypes.ProductionVariantManagedInstanceScaling{}
					if f10f1iter.ManagedInstanceScaling.MaxInstanceCount != nil {
						maxInstanceCountCopy := int64(*f10f1iter.ManagedInstanceScaling.MaxInstanceCount)
						f10f1elemf9.MaxInstanceCount = &maxInstanceCountCopy
					}
					if f10f1iter.ManagedInstanceScaling.MinInstanceCount != nil {
						minInstanceCountCopy := int64(*f10f1iter.ManagedInstanceScaling.MinInstanceCount)
						f10f1elemf9.MinInstanceCount = &minInstanceCountCopy
					}
					if f10f1iter.ManagedInstanceScaling.Status != "" {
						f10f1elemf9.Status = aws.String(string(f10f1iter.ManagedInstanceScaling.Status))
					}
					f10f1elem.ManagedInstanceScaling = f10f1elemf9
				}
				if f10f1iter.RoutingConfig != nil {
					f10f1elemf10 := &svcapitypes.ProductionVariantRoutingConfig{}
					if f10f1iter.RoutingConfig.RoutingStrategy != "" {
						f10f1elemf10.RoutingStrategy = aws.String(string(f10f1iter.RoutingConfig.RoutingStrategy))
					}
					f10f1elem.RoutingConfig = f10f1elemf10
				}
				if f10f1iter.VariantName != nil {
					f10f1elem.VariantName = f10f1iter.VariantName
				}
				if f10f1iter.VariantStatus != nil {
					f10f1elemf12 := []*svcapitypes.ProductionVariantStatus{}
					for _, f10f1elemf12iter := range f10f1iter.VariantStatus {
						f10f1elemf12elem := &svcapitypes.ProductionVariantStatus{}
						if f10f1elemf12iter.StartTime != nil {
							f10f1elemf12elem.StartTime = &metav1.Time{*f10f1elemf12iter.StartTime}
						}
						if f10f1elemf12iter.Status != "" {
							f10f1elemf12elem.Status = aws.String(string(f10f1elemf12iter.Status))
						}
						if f10f1elemf12iter.StatusMessage != nil {
							f10f1elemf12elem.StatusMessage = f10f1elemf12iter.StatusMessage
						}
						f10f1elemf12 = append(f10f1elemf12, f10f1elemf12elem)
					}
					f10f1elem.VariantStatus = f10f1elemf12
				}
				f10f1 = append(f10f1, f10f1elem)
			}
			f10.ProductionVariants = f10f1
		}
		if resp.PendingDeploymentSummary.StartTime != nil {
			f10.StartTime = &metav1.Time{*resp.PendingDeploymentSummary.StartTime}
		}
		ko.Status.PendingDeploymentSummary = f10
	} else {
		ko.Status.PendingDeploymentSummary = nil
	}
	if resp.ProductionVariants != nil {
		f11 := []*svcapitypes.ProductionVariantSummary{}
		for _, f11iter := range resp.ProductionVariants {
			f11elem := &svcapitypes.ProductionVariantSummary{}
			if f11iter.CurrentInstanceCount != nil {
				currentInstanceCountCopy := int64(*f11iter.CurrentInstanceCount)
				f11elem.CurrentInstanceCount = &currentInstanceCountCopy
			}
			if f11iter.CurrentServerlessConfig != nil {
				f11elemf1 := &svcapitypes.ProductionVariantServerlessConfig{}
				if f11iter.CurrentServerlessConfig.MaxConcurrency != nil {
					maxConcurrencyCopy := int64(*f11iter.CurrentServerlessConfig.MaxConcurrency)
					f11elemf1.MaxConcurrency = &maxConcurrencyCopy
				}
				if f11iter.CurrentServerlessConfig.MemorySizeInMB != nil {
					memorySizeInMBCopy := int64(*f11iter.CurrentServerlessConfig.MemorySizeInMB)
					f11elemf1.MemorySizeInMB = &memorySizeInMBCopy
				}
				if f11iter.CurrentServerlessConfig.ProvisionedConcurrency != nil {
					provisionedConcurrencyCopy := int64(*f11iter.CurrentServerlessConfig.ProvisionedConcurrency)
					f11elemf1.ProvisionedConcurrency = &provisionedConcurrencyCopy
				}
				f11elem.CurrentServerlessConfig = f11elemf1
			}
			if f11iter.CurrentWeight != nil {
				currentWeightCopy := float64(*f11iter.CurrentWeight)
				f11elem.CurrentWeight = &currentWeightCopy
			}
			if f11iter.DeployedImages != nil {
				f11elemf3 := []*svcapitypes.DeployedImage{}
				for _, f11elemf3iter := range f11iter.DeployedImages {
					f11elemf3elem := &svcapitypes.DeployedImage{}
					if f11elemf3iter.ResolutionTime != nil {
						f11elemf3elem.ResolutionTime = &metav1.Time{*f11elemf3iter.ResolutionTime}
					}
					if f11elemf3iter.ResolvedImage != nil {
						f11elemf3elem.ResolvedImage = f11elemf3iter.ResolvedImage
					}
					if f11elemf3iter.SpecifiedImage != nil {
						f11elemf3elem.SpecifiedImage = f11elemf3iter.SpecifiedImage
					}
					f11elemf3 = append(f11elemf3, f11elemf3elem)
				}
				f11elem.DeployedImages = f11elemf3
			}
			if f11iter.DesiredInstanceCount != nil {
				desiredInstanceCountCopy := int64(*f11iter.DesiredInstanceCount)
				f11elem.DesiredInstanceCount = &desiredInstanceCountCopy
			}
			if f11iter.DesiredServerlessConfig != nil {
				f11elemf5 := &svcapitypes.ProductionVariantServerlessConfig{}
				if f11iter.DesiredServerlessConfig.MaxConcurrency != nil {
					maxConcurrencyCopy := int64(*f11iter.DesiredServerlessConfig.MaxConcurrency)
					f11elemf5.MaxConcurrency = &maxConcurrencyCopy
				}
				if f11iter.DesiredServerlessConfig.MemorySizeInMB != nil {
					memorySizeInMBCopy := int64(*f11iter.DesiredServerlessConfig.MemorySizeInMB)
					f11elemf5.MemorySizeInMB = &memorySizeInMBCopy
				}
				if f11iter.DesiredServerlessConfig.ProvisionedConcurrency != nil {
					provisionedConcurrencyCopy := int64(*f11iter.DesiredServerlessConfig.ProvisionedConcurrency)
					f11elemf5.ProvisionedConcurrency = &provisionedConcurrencyCopy
				}
				f11elem.DesiredServerlessConfig = f11elemf5
			}
			if f11iter.DesiredWeight != nil {
				desiredWeightCopy := float64(*f11iter.DesiredWeight)
				f11elem.DesiredWeight = &desiredWeightCopy
			}
			if f11iter.ManagedInstanceScaling != nil {
				f11elemf7 := &svcapitypes.ProductionVariantManagedInstanceScaling{}
				if f11iter.ManagedInstanceScaling.MaxInstanceCount != nil {
					maxInstanceCountCopy := int64(*f11iter.ManagedInstanceScaling.MaxInstanceCount)
					f11elemf7.MaxInstanceCount = &maxInstanceCountCopy
				}
				if f11iter.ManagedInstanceScaling.MinInstanceCount != nil {
					minInstanceCountCopy := int64(*f11iter.ManagedInstanceScaling.MinInstanceCount)
					f11elemf7.MinInstanceCount = &minInstanceCountCopy
				}
				if f11iter.ManagedInstanceScaling.Status != "" {
					f11elemf7.Status = aws.String(string(f11iter.ManagedInstanceScaling.Status))
				}
				f11elem.ManagedInstanceScaling = f11elemf7
			}
			if f11iter.RoutingConfig != nil {
				f11elemf8 := &svcapitypes.ProductionVariantRoutingConfig{}
				if f11iter.RoutingConfig.RoutingStrategy != "" {
					f11elemf8.RoutingStrategy = aws.String(string(f11iter.RoutingConfig.RoutingStrategy))
				}
				f11elem.RoutingConfig = f11elemf8
			}
			if f11iter.VariantName != nil {
				f11elem.VariantName = f11iter.VariantName
			}
			if f11iter.VariantStatus != nil {
				f11elemf10 := []*svcapitypes.ProductionVariantStatus{}
				for _, f11elemf10iter := range f11iter.VariantStatus {
					f11elemf10elem := &svcapitypes.ProductionVariantStatus{}
					if f11elemf10iter.StartTime != nil {
						f11elemf10elem.StartTime = &metav1.Time{*f11elemf10iter.StartTime}
					}
					if f11elemf10iter.Status != "" {
						f11elemf10elem.Status = aws.String(string(f11elemf10iter.Status))
					}
					if f11elemf10iter.StatusMessage != nil {
						f11elemf10elem.StatusMessage = f11elemf10iter.StatusMessage
					}
					f11elemf10 = append(f11elemf10, f11elemf10elem)
				}
				f11elem.VariantStatus = f11elemf10
			}
			f11 = append(f11, f11elem)
		}
		ko.Status.ProductionVariants = f11
	} else {
		ko.Status.ProductionVariants = nil
	}

	rm.setStatusDefaults(ko)
	rm.customDescribeEndpointSetOutput(ko)
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Spec.EndpointName == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.DescribeEndpointInput, error) {
	res := &svcsdk.DescribeEndpointInput{}

	if r.ko.Spec.EndpointName != nil {
		res.EndpointName = r.ko.Spec.EndpointName
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateEndpointOutput
	_ = resp
	resp, err = rm.sdkapi.CreateEndpoint(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateEndpoint", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.EndpointArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.EndpointArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateEndpointInput, error) {
	res := &svcsdk.CreateEndpointInput{}

	if r.ko.Spec.DeploymentConfig != nil {
		f0 := &svcsdktypes.DeploymentConfig{}
		if r.ko.Spec.DeploymentConfig.AutoRollbackConfiguration != nil {
			f0f0 := &svcsdktypes.AutoRollbackConfig{}
			if r.ko.Spec.DeploymentConfig.AutoRollbackConfiguration.Alarms != nil {
				f0f0f0 := []svcsdktypes.Alarm{}
				for _, f0f0f0iter := range r.ko.Spec.DeploymentConfig.AutoRollbackConfiguration.Alarms {
					f0f0f0elem := &svcsdktypes.Alarm{}
					if f0f0f0iter.AlarmName != nil {
						f0f0f0elem.AlarmName = f0f0f0iter.AlarmName
					}
					f0f0f0 = append(f0f0f0, *f0f0f0elem)
				}
				f0f0.Alarms = f0f0f0
			}
			f0.AutoRollbackConfiguration = f0f0
		}
		if r.ko.Spec.DeploymentConfig.BlueGreenUpdatePolicy != nil {
			f0f1 := &svcsdktypes.BlueGreenUpdatePolicy{}
			if r.ko.Spec.DeploymentConfig.BlueGreenUpdatePolicy.MaximumExecutionTimeoutInSeconds != nil {
				maximumExecutionTimeoutInSecondsCopy0 := *r.ko.Spec.DeploymentConfig.BlueGreenUpdatePolicy.MaximumExecutionTimeoutInSeconds
				if maximumExecutionTimeoutInSecondsCopy0 > math.MaxInt32 || maximumExecutionTimeoutInSecondsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field MaximumExecutionTimeoutInSeconds is of type int32")
				}
				maximumExecutionTimeoutInSecondsCopy := int32(maximumExecutionTimeoutInSecondsCopy0)
				f0f1.MaximumExecutionTimeoutInSeconds = &maximumExecutionTimeoutInSecondsCopy
			}
			if r.ko.Spec.DeploymentConfig.BlueGreenUpdatePolicy.TerminationWaitInSeconds != nil {
				terminationWaitInSecondsCopy0 := *r.ko.Spec.DeploymentConfig.BlueGreenUpdatePolicy.TerminationWaitInSeconds
				if terminationWaitInSecondsCopy0 > math.MaxInt32 || terminationWaitInSecondsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field TerminationWaitInSeconds is of type int32")
				}
				terminationWaitInSecondsCopy := int32(terminationWaitInSecondsCopy0)
				f0f1.TerminationWaitInSeconds = &terminationWaitInSecondsCopy
			}
			if r.ko.Spec.DeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration != nil {
				f0f1f2 := &svcsdktypes.TrafficRoutingConfig{}
				if r.ko.Spec.DeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration.CanarySize != nil {
					f0f1f2f0 := &svcsdktypes.CapacitySize{}
					if r.ko.Spec.DeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration.CanarySize.Type != nil {
						f0f1f2f0.Type = svcsdktypes.CapacitySizeType(*r.ko.Spec.DeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration.CanarySize.Type)
					}
					if r.ko.Spec.DeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration.CanarySize.Value != nil {
						valueCopy0 := *r.ko.Spec.DeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration.CanarySize.Value
						if valueCopy0 > math.MaxInt32 || valueCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field Value is of type int32")
						}
						valueCopy := int32(valueCopy0)
						f0f1f2f0.Value = &valueCopy
					}
					f0f1f2.CanarySize = f0f1f2f0
				}
				if r.ko.Spec.DeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration.LinearStepSize != nil {
					f0f1f2f1 := &svcsdktypes.CapacitySize{}
					if r.ko.Spec.DeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration.LinearStepSize.Type != nil {
						f0f1f2f1.Type = svcsdktypes.CapacitySizeType(*r.ko.Spec.DeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration.LinearStepSize.Type)
					}
					if r.ko.Spec.DeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration.LinearStepSize.Value != nil {
						valueCopy0 := *r.ko.Spec.DeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration.LinearStepSize.Value
						if valueCopy0 > math.MaxInt32 || valueCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field Value is of type int32")
						}
						valueCopy := int32(valueCopy0)
						f0f1f2f1.Value = &valueCopy
					}
					f0f1f2.LinearStepSize = f0f1f2f1
				}
				if r.ko.Spec.DeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration.Type != nil {
					f0f1f2.Type = svcsdktypes.TrafficRoutingConfigType(*r.ko.Spec.DeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration.Type)
				}
				if r.ko.Spec.DeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration.WaitIntervalInSeconds != nil {
					waitIntervalInSecondsCopy0 := *r.ko.Spec.DeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration.WaitIntervalInSeconds
					if waitIntervalInSecondsCopy0 > math.MaxInt32 || waitIntervalInSecondsCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field WaitIntervalInSeconds is of type int32")
					}
					waitIntervalInSecondsCopy := int32(waitIntervalInSecondsCopy0)
					f0f1f2.WaitIntervalInSeconds = &waitIntervalInSecondsCopy
				}
				f0f1.TrafficRoutingConfiguration = f0f1f2
			}
			f0.BlueGreenUpdatePolicy = f0f1
		}
		if r.ko.Spec.DeploymentConfig.RollingUpdatePolicy != nil {
			f0f2 := &svcsdktypes.RollingUpdatePolicy{}
			if r.ko.Spec.DeploymentConfig.RollingUpdatePolicy.MaximumBatchSize != nil {
				f0f2f0 := &svcsdktypes.CapacitySize{}
				if r.ko.Spec.DeploymentConfig.RollingUpdatePolicy.MaximumBatchSize.Type != nil {
					f0f2f0.Type = svcsdktypes.CapacitySizeType(*r.ko.Spec.DeploymentConfig.RollingUpdatePolicy.MaximumBatchSize.Type)
				}
				if r.ko.Spec.DeploymentConfig.RollingUpdatePolicy.MaximumBatchSize.Value != nil {
					valueCopy0 := *r.ko.Spec.DeploymentConfig.RollingUpdatePolicy.MaximumBatchSize.Value
					if valueCopy0 > math.MaxInt32 || valueCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Value is of type int32")
					}
					valueCopy := int32(valueCopy0)
					f0f2f0.Value = &valueCopy
				}
				f0f2.MaximumBatchSize = f0f2f0
			}
			if r.ko.Spec.DeploymentConfig.RollingUpdatePolicy.MaximumExecutionTimeoutInSeconds != nil {
				maximumExecutionTimeoutInSecondsCopy0 := *r.ko.Spec.DeploymentConfig.RollingUpdatePolicy.MaximumExecutionTimeoutInSeconds
				if maximumExecutionTimeoutInSecondsCopy0 > math.MaxInt32 || maximumExecutionTimeoutInSecondsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field MaximumExecutionTimeoutInSeconds is of type int32")
				}
				maximumExecutionTimeoutInSecondsCopy := int32(maximumExecutionTimeoutInSecondsCopy0)
				f0f2.MaximumExecutionTimeoutInSeconds = &maximumExecutionTimeoutInSecondsCopy
			}
			if r.ko.Spec.DeploymentConfig.RollingUpdatePolicy.RollbackMaximumBatchSize != nil {
				f0f2f2 := &svcsdktypes.CapacitySize{}
				if r.ko.Spec.DeploymentConfig.RollingUpdatePolicy.RollbackMaximumBatchSize.Type != nil {
					f0f2f2.Type = svcsdktypes.CapacitySizeType(*r.ko.Spec.DeploymentConfig.RollingUpdatePolicy.RollbackMaximumBatchSize.Type)
				}
				if r.ko.Spec.DeploymentConfig.RollingUpdatePolicy.RollbackMaximumBatchSize.Value != nil {
					valueCopy0 := *r.ko.Spec.DeploymentConfig.RollingUpdatePolicy.RollbackMaximumBatchSize.Value
					if valueCopy0 > math.MaxInt32 || valueCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Value is of type int32")
					}
					valueCopy := int32(valueCopy0)
					f0f2f2.Value = &valueCopy
				}
				f0f2.RollbackMaximumBatchSize = f0f2f2
			}
			if r.ko.Spec.DeploymentConfig.RollingUpdatePolicy.WaitIntervalInSeconds != nil {
				waitIntervalInSecondsCopy0 := *r.ko.Spec.DeploymentConfig.RollingUpdatePolicy.WaitIntervalInSeconds
				if waitIntervalInSecondsCopy0 > math.MaxInt32 || waitIntervalInSecondsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field WaitIntervalInSeconds is of type int32")
				}
				waitIntervalInSecondsCopy := int32(waitIntervalInSecondsCopy0)
				f0f2.WaitIntervalInSeconds = &waitIntervalInSecondsCopy
			}
			f0.RollingUpdatePolicy = f0f2
		}
		res.DeploymentConfig = f0
	}
	if r.ko.Spec.EndpointConfigName != nil {
		res.EndpointConfigName = r.ko.Spec.EndpointConfigName
	}
	if r.ko.Spec.EndpointName != nil {
		res.EndpointName = r.ko.Spec.EndpointName
	}
	if r.ko.Spec.Tags != nil {
		f3 := []svcsdktypes.Tag{}
		for _, f3iter := range r.ko.Spec.Tags {
			f3elem := &svcsdktypes.Tag{}
			if f3iter.Key != nil {
				f3elem.Key = f3iter.Key
			}
			if f3iter.Value != nil {
				f3elem.Value = f3iter.Value
			}
			f3 = append(f3, *f3elem)
		}
		res.Tags = f3
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	if err = rm.requeueUntilCanModify(ctx, latest); err != nil {
		return nil, err
	}

	if err = rm.customUpdateEndpointPreChecks(ctx, desired, latest, delta); err != nil {
		return nil, err
	}

	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.UpdateEndpointOutput
	_ = resp
	resp, err = rm.sdkapi.UpdateEndpoint(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdateEndpoint", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.EndpointArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.EndpointArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	rm.setStatusDefaults(ko)
	rm.customUpdateEndpointSetOutput(ko)
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.UpdateEndpointInput, error) {
	res := &svcsdk.UpdateEndpointInput{}

	if r.ko.Spec.DeploymentConfig != nil {
		f0 := &svcsdktypes.DeploymentConfig{}
		if r.ko.Spec.DeploymentConfig.AutoRollbackConfiguration != nil {
			f0f0 := &svcsdktypes.AutoRollbackConfig{}
			if r.ko.Spec.DeploymentConfig.AutoRollbackConfiguration.Alarms != nil {
				f0f0f0 := []svcsdktypes.Alarm{}
				for _, f0f0f0iter := range r.ko.Spec.DeploymentConfig.AutoRollbackConfiguration.Alarms {
					f0f0f0elem := &svcsdktypes.Alarm{}
					if f0f0f0iter.AlarmName != nil {
						f0f0f0elem.AlarmName = f0f0f0iter.AlarmName
					}
					f0f0f0 = append(f0f0f0, *f0f0f0elem)
				}
				f0f0.Alarms = f0f0f0
			}
			f0.AutoRollbackConfiguration = f0f0
		}
		if r.ko.Spec.DeploymentConfig.BlueGreenUpdatePolicy != nil {
			f0f1 := &svcsdktypes.BlueGreenUpdatePolicy{}
			if r.ko.Spec.DeploymentConfig.BlueGreenUpdatePolicy.MaximumExecutionTimeoutInSeconds != nil {
				maximumExecutionTimeoutInSecondsCopy0 := *r.ko.Spec.DeploymentConfig.BlueGreenUpdatePolicy.MaximumExecutionTimeoutInSeconds
				if maximumExecutionTimeoutInSecondsCopy0 > math.MaxInt32 || maximumExecutionTimeoutInSecondsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field MaximumExecutionTimeoutInSeconds is of type int32")
				}
				maximumExecutionTimeoutInSecondsCopy := int32(maximumExecutionTimeoutInSecondsCopy0)
				f0f1.MaximumExecutionTimeoutInSeconds = &maximumExecutionTimeoutInSecondsCopy
			}
			if r.ko.Spec.DeploymentConfig.BlueGreenUpdatePolicy.TerminationWaitInSeconds != nil {
				terminationWaitInSecondsCopy0 := *r.ko.Spec.DeploymentConfig.BlueGreenUpdatePolicy.TerminationWaitInSeconds
				if terminationWaitInSecondsCopy0 > math.MaxInt32 || terminationWaitInSecondsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field TerminationWaitInSeconds is of type int32")
				}
				terminationWaitInSecondsCopy := int32(terminationWaitInSecondsCopy0)
				f0f1.TerminationWaitInSeconds = &terminationWaitInSecondsCopy
			}
			if r.ko.Spec.DeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration != nil {
				f0f1f2 := &svcsdktypes.TrafficRoutingConfig{}
				if r.ko.Spec.DeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration.CanarySize != nil {
					f0f1f2f0 := &svcsdktypes.CapacitySize{}
					if r.ko.Spec.DeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration.CanarySize.Type != nil {
						f0f1f2f0.Type = svcsdktypes.CapacitySizeType(*r.ko.Spec.DeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration.CanarySize.Type)
					}
					if r.ko.Spec.DeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration.CanarySize.Value != nil {
						valueCopy0 := *r.ko.Spec.DeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration.CanarySize.Value
						if valueCopy0 > math.MaxInt32 || valueCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field Value is of type int32")
						}
						valueCopy := int32(valueCopy0)
						f0f1f2f0.Value = &valueCopy
					}
					f0f1f2.CanarySize = f0f1f2f0
				}
				if r.ko.Spec.DeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration.LinearStepSize != nil {
					f0f1f2f1 := &svcsdktypes.CapacitySize{}
					if r.ko.Spec.DeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration.LinearStepSize.Type != nil {
						f0f1f2f1.Type = svcsdktypes.CapacitySizeType(*r.ko.Spec.DeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration.LinearStepSize.Type)
					}
					if r.ko.Spec.DeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration.LinearStepSize.Value != nil {
						valueCopy0 := *r.ko.Spec.DeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration.LinearStepSize.Value
						if valueCopy0 > math.MaxInt32 || valueCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field Value is of type int32")
						}
						valueCopy := int32(valueCopy0)
						f0f1f2f1.Value = &valueCopy
					}
					f0f1f2.LinearStepSize = f0f1f2f1
				}
				if r.ko.Spec.DeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration.Type != nil {
					f0f1f2.Type = svcsdktypes.TrafficRoutingConfigType(*r.ko.Spec.DeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration.Type)
				}
				if r.ko.Spec.DeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration.WaitIntervalInSeconds != nil {
					waitIntervalInSecondsCopy0 := *r.ko.Spec.DeploymentConfig.BlueGreenUpdatePolicy.TrafficRoutingConfiguration.WaitIntervalInSeconds
					if waitIntervalInSecondsCopy0 > math.MaxInt32 || waitIntervalInSecondsCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field WaitIntervalInSeconds is of type int32")
					}
					waitIntervalInSecondsCopy := int32(waitIntervalInSecondsCopy0)
					f0f1f2.WaitIntervalInSeconds = &waitIntervalInSecondsCopy
				}
				f0f1.TrafficRoutingConfiguration = f0f1f2
			}
			f0.BlueGreenUpdatePolicy = f0f1
		}
		if r.ko.Spec.DeploymentConfig.RollingUpdatePolicy != nil {
			f0f2 := &svcsdktypes.RollingUpdatePolicy{}
			if r.ko.Spec.DeploymentConfig.RollingUpdatePolicy.MaximumBatchSize != nil {
				f0f2f0 := &svcsdktypes.CapacitySize{}
				if r.ko.Spec.DeploymentConfig.RollingUpdatePolicy.MaximumBatchSize.Type != nil {
					f0f2f0.Type = svcsdktypes.CapacitySizeType(*r.ko.Spec.DeploymentConfig.RollingUpdatePolicy.MaximumBatchSize.Type)
				}
				if r.ko.Spec.DeploymentConfig.RollingUpdatePolicy.MaximumBatchSize.Value != nil {
					valueCopy0 := *r.ko.Spec.DeploymentConfig.RollingUpdatePolicy.MaximumBatchSize.Value
					if valueCopy0 > math.MaxInt32 || valueCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Value is of type int32")
					}
					valueCopy := int32(valueCopy0)
					f0f2f0.Value = &valueCopy
				}
				f0f2.MaximumBatchSize = f0f2f0
			}
			if r.ko.Spec.DeploymentConfig.RollingUpdatePolicy.MaximumExecutionTimeoutInSeconds != nil {
				maximumExecutionTimeoutInSecondsCopy0 := *r.ko.Spec.DeploymentConfig.RollingUpdatePolicy.MaximumExecutionTimeoutInSeconds
				if maximumExecutionTimeoutInSecondsCopy0 > math.MaxInt32 || maximumExecutionTimeoutInSecondsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field MaximumExecutionTimeoutInSeconds is of type int32")
				}
				maximumExecutionTimeoutInSecondsCopy := int32(maximumExecutionTimeoutInSecondsCopy0)
				f0f2.MaximumExecutionTimeoutInSeconds = &maximumExecutionTimeoutInSecondsCopy
			}
			if r.ko.Spec.DeploymentConfig.RollingUpdatePolicy.RollbackMaximumBatchSize != nil {
				f0f2f2 := &svcsdktypes.CapacitySize{}
				if r.ko.Spec.DeploymentConfig.RollingUpdatePolicy.RollbackMaximumBatchSize.Type != nil {
					f0f2f2.Type = svcsdktypes.CapacitySizeType(*r.ko.Spec.DeploymentConfig.RollingUpdatePolicy.RollbackMaximumBatchSize.Type)
				}
				if r.ko.Spec.DeploymentConfig.RollingUpdatePolicy.RollbackMaximumBatchSize.Value != nil {
					valueCopy0 := *r.ko.Spec.DeploymentConfig.RollingUpdatePolicy.RollbackMaximumBatchSize.Value
					if valueCopy0 > math.MaxInt32 || valueCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Value is of type int32")
					}
					valueCopy := int32(valueCopy0)
					f0f2f2.Value = &valueCopy
				}
				f0f2.RollbackMaximumBatchSize = f0f2f2
			}
			if r.ko.Spec.DeploymentConfig.RollingUpdatePolicy.WaitIntervalInSeconds != nil {
				waitIntervalInSecondsCopy0 := *r.ko.Spec.DeploymentConfig.RollingUpdatePolicy.WaitIntervalInSeconds
				if waitIntervalInSecondsCopy0 > math.MaxInt32 || waitIntervalInSecondsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field WaitIntervalInSeconds is of type int32")
				}
				waitIntervalInSecondsCopy := int32(waitIntervalInSecondsCopy0)
				f0f2.WaitIntervalInSeconds = &waitIntervalInSecondsCopy
			}
			f0.RollingUpdatePolicy = f0f2
		}
		res.DeploymentConfig = f0
	}
	if r.ko.Spec.EndpointConfigName != nil {
		res.EndpointConfigName = r.ko.Spec.EndpointConfigName
	}
	if r.ko.Spec.EndpointName != nil {
		res.EndpointName = r.ko.Spec.EndpointName
	}
	res.RetainAllVariantProperties = aws.Bool(true)

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	if err = rm.requeueUntilCanModify(ctx, r); err != nil {
		return r, err
	}

	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteEndpointOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteEndpoint(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteEndpoint", err)

	if err == nil {
		if observed, err := rm.sdkFind(ctx, r); err != ackerr.NotFound {
			if err != nil {
				return nil, err
			}
			r.SetStatus(observed)
			return r, requeueWaitWhileDeleting
		}
	}

	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteEndpointInput, error) {
	res := &svcsdk.DeleteEndpointInput{}

	if r.ko.Spec.EndpointName != nil {
		res.EndpointName = r.ko.Spec.EndpointName
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.Endpoint,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	if syncCondition == nil && onSuccess {
		syncCondition = &ackv1alpha1.Condition{
			Type:   ackv1alpha1.ConditionTypeResourceSynced,
			Status: corev1.ConditionTrue,
		}
		ko.Status.Conditions = append(ko.Status.Conditions, syncCondition)
	}
	// custom update conditions
	customUpdate := rm.CustomUpdateConditions(ko, r, err)
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil || customUpdate {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}

	var terminalErr smithy.APIError
	if !errors.As(err, &terminalErr) {
		return false
	}
	switch terminalErr.ErrorCode() {
	case "InvalidParameterCombination",
		"InvalidParameterValue",
		"MissingParameter",
		"EndpointUpdateError":
		return true
	default:
		return false
	}
}
