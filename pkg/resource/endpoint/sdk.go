// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package endpoint

import (
	"context"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/sagemaker"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/sagemaker-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.SageMaker{}
	_ = &svcapitypes.Endpoint{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.DescribeEndpointWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "DescribeEndpoint", respErr)
	if respErr != nil {
		if awsErr, ok := ackerr.AWSError(respErr); ok && awsErr.Code() == "ValidationException" && strings.HasPrefix(awsErr.Message(), "Could not find endpoint") {
			return nil, ackerr.NotFound
		}
		return nil, respErr
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.CreationTime != nil {
		ko.Status.CreationTime = &metav1.Time{*resp.CreationTime}
	} else {
		ko.Status.CreationTime = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.EndpointArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.EndpointArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.EndpointConfigName != nil {
		ko.Spec.EndpointConfigName = resp.EndpointConfigName
	} else {
		ko.Spec.EndpointConfigName = nil
	}
	if resp.EndpointName != nil {
		ko.Spec.EndpointName = resp.EndpointName
	} else {
		ko.Spec.EndpointName = nil
	}
	if resp.EndpointStatus != nil {
		ko.Status.EndpointStatus = resp.EndpointStatus
	} else {
		ko.Status.EndpointStatus = nil
	}
	if resp.FailureReason != nil {
		ko.Status.FailureReason = resp.FailureReason
	} else {
		ko.Status.FailureReason = nil
	}
	if resp.LastModifiedTime != nil {
		ko.Status.LastModifiedTime = &metav1.Time{*resp.LastModifiedTime}
	} else {
		ko.Status.LastModifiedTime = nil
	}
	if resp.ProductionVariants != nil {
		f9 := []*svcapitypes.ProductionVariantSummary{}
		for _, f9iter := range resp.ProductionVariants {
			f9elem := &svcapitypes.ProductionVariantSummary{}
			if f9iter.CurrentInstanceCount != nil {
				f9elem.CurrentInstanceCount = f9iter.CurrentInstanceCount
			}
			if f9iter.CurrentWeight != nil {
				f9elem.CurrentWeight = f9iter.CurrentWeight
			}
			if f9iter.DeployedImages != nil {
				f9elemf2 := []*svcapitypes.DeployedImage{}
				for _, f9elemf2iter := range f9iter.DeployedImages {
					f9elemf2elem := &svcapitypes.DeployedImage{}
					if f9elemf2iter.ResolutionTime != nil {
						f9elemf2elem.ResolutionTime = &metav1.Time{*f9elemf2iter.ResolutionTime}
					}
					if f9elemf2iter.ResolvedImage != nil {
						f9elemf2elem.ResolvedImage = f9elemf2iter.ResolvedImage
					}
					if f9elemf2iter.SpecifiedImage != nil {
						f9elemf2elem.SpecifiedImage = f9elemf2iter.SpecifiedImage
					}
					f9elemf2 = append(f9elemf2, f9elemf2elem)
				}
				f9elem.DeployedImages = f9elemf2
			}
			if f9iter.DesiredInstanceCount != nil {
				f9elem.DesiredInstanceCount = f9iter.DesiredInstanceCount
			}
			if f9iter.DesiredWeight != nil {
				f9elem.DesiredWeight = f9iter.DesiredWeight
			}
			if f9iter.VariantName != nil {
				f9elem.VariantName = f9iter.VariantName
			}
			f9 = append(f9, f9elem)
		}
		ko.Status.ProductionVariants = f9
	} else {
		ko.Status.ProductionVariants = nil
	}

	rm.setStatusDefaults(ko)

	// custom set output from response
	ko, err = rm.customDescribeEndpointSetOutput(ctx, r, resp, ko)
	if err != nil {
		return nil, err
	}

	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required by not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Spec.EndpointName == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.DescribeEndpointInput, error) {
	res := &svcsdk.DescribeEndpointInput{}

	if r.ko.Spec.EndpointName != nil {
		res.SetEndpointName(*r.ko.Spec.EndpointName)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a new resource with any fields in the Status field filled in
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newCreateRequestPayload(ctx, r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.CreateEndpointWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateEndpoint", respErr)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.EndpointArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.EndpointArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	rm.setStatusDefaults(ko)

	// custom set output from response
	ko, err = rm.customCreateEndpointSetOutput(ctx, r, resp, ko)
	if err != nil {
		return nil, err
	}

	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateEndpointInput, error) {
	res := &svcsdk.CreateEndpointInput{}

	if r.ko.Spec.EndpointConfigName != nil {
		res.SetEndpointConfigName(*r.ko.Spec.EndpointConfigName)
	}
	if r.ko.Spec.EndpointName != nil {
		res.SetEndpointName(*r.ko.Spec.EndpointName)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (*resource, error) {

	customResp, customRespErr := rm.customUpdateEndpoint(ctx, desired, latest, delta)
	if customResp != nil || customRespErr != nil {
		return customResp, customRespErr
	}

	input, err := rm.newUpdateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.UpdateEndpointWithContext(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdateEndpoint", respErr)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.EndpointArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.EndpointArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	rm.setStatusDefaults(ko)

	// custom set output from response
	ko, err = rm.customUpdateEndpointSetOutput(ctx, desired, resp, ko)
	if err != nil {
		return nil, err
	}

	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.UpdateEndpointInput, error) {
	res := &svcsdk.UpdateEndpointInput{}

	if r.ko.Spec.EndpointConfigName != nil {
		res.SetEndpointConfigName(*r.ko.Spec.EndpointConfigName)
	}
	if r.ko.Spec.EndpointName != nil {
		res.SetEndpointName(*r.ko.Spec.EndpointName)
	}
	res.SetRetainAllVariantProperties(true)

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) error {

	customRespErr := rm.customDeleteEndpoint(ctx, r)
	if customRespErr != nil {
		return customRespErr
	}

	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return err
	}
	_, respErr := rm.sdkapi.DeleteEndpointWithContext(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteEndpoint", respErr)
	return respErr
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteEndpointInput, error) {
	res := &svcsdk.DeleteEndpointInput{}

	if r.ko.Spec.EndpointName != nil {
		res.SetEndpointName(*r.ko.Spec.EndpointName)
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.Endpoint,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
			break
		}
	}

	if rm.terminalAWSError(err) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		terminalCondition.Status = corev1.ConditionTrue
		awsErr, _ := ackerr.AWSError(err)
		errorMessage := awsErr.Message()
		terminalCondition.Message = &errorMessage
	} else if terminalCondition != nil {
		terminalCondition.Status = corev1.ConditionFalse
		terminalCondition.Message = nil
	}
	// custom update conditions
	customUpdate := rm.customUpdateConditions(ko, r, err)
	if terminalCondition != nil || customUpdate {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	// No terminal_errors specified for this resource in generator config
	return false
}
