// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package space

import (
	"context"
	"errors"
	"fmt"
	"math"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go-v2/aws"
	svcsdk "github.com/aws/aws-sdk-go-v2/service/sagemaker"
	svcsdktypes "github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
	smithy "github.com/aws/smithy-go"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/sagemaker-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &svcsdk.Client{}
	_ = &svcapitypes.Space{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
	_ = &aws.Config{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.DescribeSpaceOutput
	resp, err = rm.sdkapi.DescribeSpace(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "DescribeSpace", err)
	if err != nil {
		var awsErr smithy.APIError
		if errors.As(err, &awsErr) && awsErr.ErrorCode() == "ResourceNotFound" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.CreationTime != nil {
		ko.Status.CreationTime = &metav1.Time{*resp.CreationTime}
	} else {
		ko.Status.CreationTime = nil
	}
	if resp.DomainId != nil {
		ko.Spec.DomainID = resp.DomainId
	} else {
		ko.Spec.DomainID = nil
	}
	if resp.FailureReason != nil {
		ko.Status.FailureReason = resp.FailureReason
	} else {
		ko.Status.FailureReason = nil
	}
	if resp.HomeEfsFileSystemUid != nil {
		ko.Status.HomeEFSFileSystemUID = resp.HomeEfsFileSystemUid
	} else {
		ko.Status.HomeEFSFileSystemUID = nil
	}
	if resp.OwnershipSettings != nil {
		f5 := &svcapitypes.OwnershipSettings{}
		if resp.OwnershipSettings.OwnerUserProfileName != nil {
			f5.OwnerUserProfileName = resp.OwnershipSettings.OwnerUserProfileName
		}
		ko.Spec.OwnershipSettings = f5
	} else {
		ko.Spec.OwnershipSettings = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.SpaceArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.SpaceArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.SpaceDisplayName != nil {
		ko.Spec.SpaceDisplayName = resp.SpaceDisplayName
	} else {
		ko.Spec.SpaceDisplayName = nil
	}
	if resp.SpaceName != nil {
		ko.Spec.SpaceName = resp.SpaceName
	} else {
		ko.Spec.SpaceName = nil
	}
	if resp.SpaceSettings != nil {
		f9 := &svcapitypes.SpaceSettings{}
		if resp.SpaceSettings.AppType != "" {
			f9.AppType = aws.String(string(resp.SpaceSettings.AppType))
		}
		if resp.SpaceSettings.CodeEditorAppSettings != nil {
			f9f1 := &svcapitypes.SpaceCodeEditorAppSettings{}
			if resp.SpaceSettings.CodeEditorAppSettings.AppLifecycleManagement != nil {
				f9f1f0 := &svcapitypes.SpaceAppLifecycleManagement{}
				if resp.SpaceSettings.CodeEditorAppSettings.AppLifecycleManagement.IdleSettings != nil {
					f9f1f0f0 := &svcapitypes.SpaceIdleSettings{}
					if resp.SpaceSettings.CodeEditorAppSettings.AppLifecycleManagement.IdleSettings.IdleTimeoutInMinutes != nil {
						idleTimeoutInMinutesCopy := int64(*resp.SpaceSettings.CodeEditorAppSettings.AppLifecycleManagement.IdleSettings.IdleTimeoutInMinutes)
						f9f1f0f0.IdleTimeoutInMinutes = &idleTimeoutInMinutesCopy
					}
					f9f1f0.IdleSettings = f9f1f0f0
				}
				f9f1.AppLifecycleManagement = f9f1f0
			}
			if resp.SpaceSettings.CodeEditorAppSettings.DefaultResourceSpec != nil {
				f9f1f1 := &svcapitypes.ResourceSpec{}
				if resp.SpaceSettings.CodeEditorAppSettings.DefaultResourceSpec.InstanceType != "" {
					f9f1f1.InstanceType = aws.String(string(resp.SpaceSettings.CodeEditorAppSettings.DefaultResourceSpec.InstanceType))
				}
				if resp.SpaceSettings.CodeEditorAppSettings.DefaultResourceSpec.LifecycleConfigArn != nil {
					f9f1f1.LifecycleConfigARN = resp.SpaceSettings.CodeEditorAppSettings.DefaultResourceSpec.LifecycleConfigArn
				}
				if resp.SpaceSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageArn != nil {
					f9f1f1.SageMakerImageARN = resp.SpaceSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageArn
				}
				if resp.SpaceSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f9f1f1.SageMakerImageVersionAlias = resp.SpaceSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if resp.SpaceSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageVersionArn != nil {
					f9f1f1.SageMakerImageVersionARN = resp.SpaceSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageVersionArn
				}
				f9f1.DefaultResourceSpec = f9f1f1
			}
			f9.CodeEditorAppSettings = f9f1
		}
		if resp.SpaceSettings.CustomFileSystems != nil {
			f9f2 := []*svcapitypes.CustomFileSystem{}
			for _, f9f2iter := range resp.SpaceSettings.CustomFileSystems {
				f9f2elem := &svcapitypes.CustomFileSystem{}
				switch f9f2iter.(type) {
				case *svcsdktypes.CustomFileSystemMemberEFSFileSystem:
					f9f2elemf0 := f9f2iter.(*svcsdktypes.CustomFileSystemMemberEFSFileSystem)
					if f9f2elemf0 != nil {
						f9f2elemf0f0 := &svcapitypes.EFSFileSystem{}
						if f9f2elemf0.Value.FileSystemId != nil {
							f9f2elemf0f0.FileSystemID = f9f2elemf0.Value.FileSystemId
						}
						f9f2elem.EFSFileSystem = f9f2elemf0f0
					}
				case *svcsdktypes.CustomFileSystemMemberFSxLustreFileSystem:
					f9f2elemf1 := f9f2iter.(*svcsdktypes.CustomFileSystemMemberFSxLustreFileSystem)
					if f9f2elemf1 != nil {
						f9f2elemf1f1 := &svcapitypes.FSxLustreFileSystem{}
						if f9f2elemf1.Value.FileSystemId != nil {
							f9f2elemf1f1.FileSystemID = f9f2elemf1.Value.FileSystemId
						}
						f9f2elem.FSxLustreFileSystem = f9f2elemf1f1
					}
				case *svcsdktypes.CustomFileSystemMemberS3FileSystem:
					f9f2elemf2 := f9f2iter.(*svcsdktypes.CustomFileSystemMemberS3FileSystem)
					if f9f2elemf2 != nil {
						f9f2elemf2f2 := &svcapitypes.S3FileSystem{}
						if f9f2elemf2.Value.S3Uri != nil {
							f9f2elemf2f2.S3URI = f9f2elemf2.Value.S3Uri
						}
						f9f2elem.S3FileSystem = f9f2elemf2f2
					}
				}
				f9f2 = append(f9f2, f9f2elem)
			}
			f9.CustomFileSystems = f9f2
		}
		if resp.SpaceSettings.JupyterLabAppSettings != nil {
			f9f3 := &svcapitypes.SpaceJupyterLabAppSettings{}
			if resp.SpaceSettings.JupyterLabAppSettings.AppLifecycleManagement != nil {
				f9f3f0 := &svcapitypes.SpaceAppLifecycleManagement{}
				if resp.SpaceSettings.JupyterLabAppSettings.AppLifecycleManagement.IdleSettings != nil {
					f9f3f0f0 := &svcapitypes.SpaceIdleSettings{}
					if resp.SpaceSettings.JupyterLabAppSettings.AppLifecycleManagement.IdleSettings.IdleTimeoutInMinutes != nil {
						idleTimeoutInMinutesCopy := int64(*resp.SpaceSettings.JupyterLabAppSettings.AppLifecycleManagement.IdleSettings.IdleTimeoutInMinutes)
						f9f3f0f0.IdleTimeoutInMinutes = &idleTimeoutInMinutesCopy
					}
					f9f3f0.IdleSettings = f9f3f0f0
				}
				f9f3.AppLifecycleManagement = f9f3f0
			}
			if resp.SpaceSettings.JupyterLabAppSettings.CodeRepositories != nil {
				f9f3f1 := []*svcapitypes.CodeRepository{}
				for _, f9f3f1iter := range resp.SpaceSettings.JupyterLabAppSettings.CodeRepositories {
					f9f3f1elem := &svcapitypes.CodeRepository{}
					if f9f3f1iter.RepositoryUrl != nil {
						f9f3f1elem.RepositoryURL = f9f3f1iter.RepositoryUrl
					}
					f9f3f1 = append(f9f3f1, f9f3f1elem)
				}
				f9f3.CodeRepositories = f9f3f1
			}
			if resp.SpaceSettings.JupyterLabAppSettings.DefaultResourceSpec != nil {
				f9f3f2 := &svcapitypes.ResourceSpec{}
				if resp.SpaceSettings.JupyterLabAppSettings.DefaultResourceSpec.InstanceType != "" {
					f9f3f2.InstanceType = aws.String(string(resp.SpaceSettings.JupyterLabAppSettings.DefaultResourceSpec.InstanceType))
				}
				if resp.SpaceSettings.JupyterLabAppSettings.DefaultResourceSpec.LifecycleConfigArn != nil {
					f9f3f2.LifecycleConfigARN = resp.SpaceSettings.JupyterLabAppSettings.DefaultResourceSpec.LifecycleConfigArn
				}
				if resp.SpaceSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageArn != nil {
					f9f3f2.SageMakerImageARN = resp.SpaceSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageArn
				}
				if resp.SpaceSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f9f3f2.SageMakerImageVersionAlias = resp.SpaceSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if resp.SpaceSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageVersionArn != nil {
					f9f3f2.SageMakerImageVersionARN = resp.SpaceSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageVersionArn
				}
				f9f3.DefaultResourceSpec = f9f3f2
			}
			f9.JupyterLabAppSettings = f9f3
		}
		if resp.SpaceSettings.JupyterServerAppSettings != nil {
			f9f4 := &svcapitypes.JupyterServerAppSettings{}
			if resp.SpaceSettings.JupyterServerAppSettings.CodeRepositories != nil {
				f9f4f0 := []*svcapitypes.CodeRepository{}
				for _, f9f4f0iter := range resp.SpaceSettings.JupyterServerAppSettings.CodeRepositories {
					f9f4f0elem := &svcapitypes.CodeRepository{}
					if f9f4f0iter.RepositoryUrl != nil {
						f9f4f0elem.RepositoryURL = f9f4f0iter.RepositoryUrl
					}
					f9f4f0 = append(f9f4f0, f9f4f0elem)
				}
				f9f4.CodeRepositories = f9f4f0
			}
			if resp.SpaceSettings.JupyterServerAppSettings.DefaultResourceSpec != nil {
				f9f4f1 := &svcapitypes.ResourceSpec{}
				if resp.SpaceSettings.JupyterServerAppSettings.DefaultResourceSpec.InstanceType != "" {
					f9f4f1.InstanceType = aws.String(string(resp.SpaceSettings.JupyterServerAppSettings.DefaultResourceSpec.InstanceType))
				}
				if resp.SpaceSettings.JupyterServerAppSettings.DefaultResourceSpec.LifecycleConfigArn != nil {
					f9f4f1.LifecycleConfigARN = resp.SpaceSettings.JupyterServerAppSettings.DefaultResourceSpec.LifecycleConfigArn
				}
				if resp.SpaceSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageArn != nil {
					f9f4f1.SageMakerImageARN = resp.SpaceSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageArn
				}
				if resp.SpaceSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f9f4f1.SageMakerImageVersionAlias = resp.SpaceSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if resp.SpaceSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionArn != nil {
					f9f4f1.SageMakerImageVersionARN = resp.SpaceSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionArn
				}
				f9f4.DefaultResourceSpec = f9f4f1
			}
			if resp.SpaceSettings.JupyterServerAppSettings.LifecycleConfigArns != nil {
				f9f4.LifecycleConfigARNs = aws.StringSlice(resp.SpaceSettings.JupyterServerAppSettings.LifecycleConfigArns)
			}
			f9.JupyterServerAppSettings = f9f4
		}
		if resp.SpaceSettings.KernelGatewayAppSettings != nil {
			f9f5 := &svcapitypes.KernelGatewayAppSettings{}
			if resp.SpaceSettings.KernelGatewayAppSettings.CustomImages != nil {
				f9f5f0 := []*svcapitypes.CustomImage{}
				for _, f9f5f0iter := range resp.SpaceSettings.KernelGatewayAppSettings.CustomImages {
					f9f5f0elem := &svcapitypes.CustomImage{}
					if f9f5f0iter.AppImageConfigName != nil {
						f9f5f0elem.AppImageConfigName = f9f5f0iter.AppImageConfigName
					}
					if f9f5f0iter.ImageName != nil {
						f9f5f0elem.ImageName = f9f5f0iter.ImageName
					}
					if f9f5f0iter.ImageVersionNumber != nil {
						imageVersionNumberCopy := int64(*f9f5f0iter.ImageVersionNumber)
						f9f5f0elem.ImageVersionNumber = &imageVersionNumberCopy
					}
					f9f5f0 = append(f9f5f0, f9f5f0elem)
				}
				f9f5.CustomImages = f9f5f0
			}
			if resp.SpaceSettings.KernelGatewayAppSettings.DefaultResourceSpec != nil {
				f9f5f1 := &svcapitypes.ResourceSpec{}
				if resp.SpaceSettings.KernelGatewayAppSettings.DefaultResourceSpec.InstanceType != "" {
					f9f5f1.InstanceType = aws.String(string(resp.SpaceSettings.KernelGatewayAppSettings.DefaultResourceSpec.InstanceType))
				}
				if resp.SpaceSettings.KernelGatewayAppSettings.DefaultResourceSpec.LifecycleConfigArn != nil {
					f9f5f1.LifecycleConfigARN = resp.SpaceSettings.KernelGatewayAppSettings.DefaultResourceSpec.LifecycleConfigArn
				}
				if resp.SpaceSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageArn != nil {
					f9f5f1.SageMakerImageARN = resp.SpaceSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageArn
				}
				if resp.SpaceSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f9f5f1.SageMakerImageVersionAlias = resp.SpaceSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if resp.SpaceSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionArn != nil {
					f9f5f1.SageMakerImageVersionARN = resp.SpaceSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionArn
				}
				f9f5.DefaultResourceSpec = f9f5f1
			}
			if resp.SpaceSettings.KernelGatewayAppSettings.LifecycleConfigArns != nil {
				f9f5.LifecycleConfigARNs = aws.StringSlice(resp.SpaceSettings.KernelGatewayAppSettings.LifecycleConfigArns)
			}
			f9.KernelGatewayAppSettings = f9f5
		}
		if resp.SpaceSettings.RemoteAccess != "" {
			f9.RemoteAccess = aws.String(string(resp.SpaceSettings.RemoteAccess))
		}
		if resp.SpaceSettings.SpaceManagedResources != "" {
			f9.SpaceManagedResources = aws.String(string(resp.SpaceSettings.SpaceManagedResources))
		}
		if resp.SpaceSettings.SpaceStorageSettings != nil {
			f9f8 := &svcapitypes.SpaceStorageSettings{}
			if resp.SpaceSettings.SpaceStorageSettings.EbsStorageSettings != nil {
				f9f8f0 := &svcapitypes.EBSStorageSettings{}
				if resp.SpaceSettings.SpaceStorageSettings.EbsStorageSettings.EbsVolumeSizeInGb != nil {
					ebsVolumeSizeInGbCopy := int64(*resp.SpaceSettings.SpaceStorageSettings.EbsStorageSettings.EbsVolumeSizeInGb)
					f9f8f0.EBSVolumeSizeInGb = &ebsVolumeSizeInGbCopy
				}
				f9f8.EBSStorageSettings = f9f8f0
			}
			f9.SpaceStorageSettings = f9f8
		}
		ko.Spec.SpaceSettings = f9
	} else {
		ko.Spec.SpaceSettings = nil
	}
	if resp.SpaceSharingSettings != nil {
		f10 := &svcapitypes.SpaceSharingSettings{}
		if resp.SpaceSharingSettings.SharingType != "" {
			f10.SharingType = aws.String(string(resp.SpaceSharingSettings.SharingType))
		}
		ko.Spec.SpaceSharingSettings = f10
	} else {
		ko.Spec.SpaceSharingSettings = nil
	}
	if resp.Status != "" {
		ko.Status.Status = aws.String(string(resp.Status))
	} else {
		ko.Status.Status = nil
	}
	if resp.Url != nil {
		ko.Status.URL = resp.Url
	} else {
		ko.Status.URL = nil
	}

	rm.setStatusDefaults(ko)
	rm.customDescribeSpaceSetOutput(ko)
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Spec.DomainID == nil || r.ko.Spec.SpaceName == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.DescribeSpaceInput, error) {
	res := &svcsdk.DescribeSpaceInput{}

	if r.ko.Spec.DomainID != nil {
		res.DomainId = r.ko.Spec.DomainID
	}
	if r.ko.Spec.SpaceName != nil {
		res.SpaceName = r.ko.Spec.SpaceName
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateSpaceOutput
	_ = resp
	resp, err = rm.sdkapi.CreateSpace(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateSpace", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.SpaceArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.SpaceArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateSpaceInput, error) {
	res := &svcsdk.CreateSpaceInput{}

	if r.ko.Spec.DomainID != nil {
		res.DomainId = r.ko.Spec.DomainID
	}
	if r.ko.Spec.OwnershipSettings != nil {
		f1 := &svcsdktypes.OwnershipSettings{}
		if r.ko.Spec.OwnershipSettings.OwnerUserProfileName != nil {
			f1.OwnerUserProfileName = r.ko.Spec.OwnershipSettings.OwnerUserProfileName
		}
		res.OwnershipSettings = f1
	}
	if r.ko.Spec.SpaceDisplayName != nil {
		res.SpaceDisplayName = r.ko.Spec.SpaceDisplayName
	}
	if r.ko.Spec.SpaceName != nil {
		res.SpaceName = r.ko.Spec.SpaceName
	}
	if r.ko.Spec.SpaceSettings != nil {
		f4 := &svcsdktypes.SpaceSettings{}
		if r.ko.Spec.SpaceSettings.AppType != nil {
			f4.AppType = svcsdktypes.AppType(*r.ko.Spec.SpaceSettings.AppType)
		}
		if r.ko.Spec.SpaceSettings.CodeEditorAppSettings != nil {
			f4f1 := &svcsdktypes.SpaceCodeEditorAppSettings{}
			if r.ko.Spec.SpaceSettings.CodeEditorAppSettings.AppLifecycleManagement != nil {
				f4f1f0 := &svcsdktypes.SpaceAppLifecycleManagement{}
				if r.ko.Spec.SpaceSettings.CodeEditorAppSettings.AppLifecycleManagement.IdleSettings != nil {
					f4f1f0f0 := &svcsdktypes.SpaceIdleSettings{}
					if r.ko.Spec.SpaceSettings.CodeEditorAppSettings.AppLifecycleManagement.IdleSettings.IdleTimeoutInMinutes != nil {
						idleTimeoutInMinutesCopy0 := *r.ko.Spec.SpaceSettings.CodeEditorAppSettings.AppLifecycleManagement.IdleSettings.IdleTimeoutInMinutes
						if idleTimeoutInMinutesCopy0 > math.MaxInt32 || idleTimeoutInMinutesCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field IdleTimeoutInMinutes is of type int32")
						}
						idleTimeoutInMinutesCopy := int32(idleTimeoutInMinutesCopy0)
						f4f1f0f0.IdleTimeoutInMinutes = &idleTimeoutInMinutesCopy
					}
					f4f1f0.IdleSettings = f4f1f0f0
				}
				f4f1.AppLifecycleManagement = f4f1f0
			}
			if r.ko.Spec.SpaceSettings.CodeEditorAppSettings.DefaultResourceSpec != nil {
				f4f1f1 := &svcsdktypes.ResourceSpec{}
				if r.ko.Spec.SpaceSettings.CodeEditorAppSettings.DefaultResourceSpec.InstanceType != nil {
					f4f1f1.InstanceType = svcsdktypes.AppInstanceType(*r.ko.Spec.SpaceSettings.CodeEditorAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.SpaceSettings.CodeEditorAppSettings.DefaultResourceSpec.LifecycleConfigARN != nil {
					f4f1f1.LifecycleConfigArn = r.ko.Spec.SpaceSettings.CodeEditorAppSettings.DefaultResourceSpec.LifecycleConfigARN
				}
				if r.ko.Spec.SpaceSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f4f1f1.SageMakerImageArn = r.ko.Spec.SpaceSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageARN
				}
				if r.ko.Spec.SpaceSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f4f1f1.SageMakerImageVersionAlias = r.ko.Spec.SpaceSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if r.ko.Spec.SpaceSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f4f1f1.SageMakerImageVersionArn = r.ko.Spec.SpaceSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageVersionARN
				}
				f4f1.DefaultResourceSpec = f4f1f1
			}
			f4.CodeEditorAppSettings = f4f1
		}
		if r.ko.Spec.SpaceSettings.CustomFileSystems != nil {
			f4f2 := []svcsdktypes.CustomFileSystem{}
			for _, f4f2iter := range r.ko.Spec.SpaceSettings.CustomFileSystems {
				var f4f2elem svcsdktypes.CustomFileSystem
				isInterfaceSet := false
				if f4f2iter.EFSFileSystem != nil {
					if isInterfaceSet {
						return nil, ackerr.NewTerminalError(fmt.Errorf("can only set one of the members for EFSFileSystem"))
					}
					f4f2elemf0Parent := &svcsdktypes.CustomFileSystemMemberEFSFileSystem{}
					f4f2elemf0 := &svcsdktypes.EFSFileSystem{}
					if f4f2iter.EFSFileSystem.FileSystemID != nil {
						f4f2elemf0.FileSystemId = f4f2iter.EFSFileSystem.FileSystemID
					}
					f4f2elemf0Parent.Value = *f4f2elemf0
				}
				if f4f2iter.FSxLustreFileSystem != nil {
					if isInterfaceSet {
						return nil, ackerr.NewTerminalError(fmt.Errorf("can only set one of the members for FSxLustreFileSystem"))
					}
					f4f2elemf1Parent := &svcsdktypes.CustomFileSystemMemberFSxLustreFileSystem{}
					f4f2elemf1 := &svcsdktypes.FSxLustreFileSystem{}
					if f4f2iter.FSxLustreFileSystem.FileSystemID != nil {
						f4f2elemf1.FileSystemId = f4f2iter.FSxLustreFileSystem.FileSystemID
					}
					f4f2elemf1Parent.Value = *f4f2elemf1
				}
				if f4f2iter.S3FileSystem != nil {
					if isInterfaceSet {
						return nil, ackerr.NewTerminalError(fmt.Errorf("can only set one of the members for S3FileSystem"))
					}
					f4f2elemf2Parent := &svcsdktypes.CustomFileSystemMemberS3FileSystem{}
					f4f2elemf2 := &svcsdktypes.S3FileSystem{}
					if f4f2iter.S3FileSystem.S3URI != nil {
						f4f2elemf2.S3Uri = f4f2iter.S3FileSystem.S3URI
					}
					f4f2elemf2Parent.Value = *f4f2elemf2
				}
				f4f2 = append(f4f2, f4f2elem)
			}
			f4.CustomFileSystems = f4f2
		}
		if r.ko.Spec.SpaceSettings.JupyterLabAppSettings != nil {
			f4f3 := &svcsdktypes.SpaceJupyterLabAppSettings{}
			if r.ko.Spec.SpaceSettings.JupyterLabAppSettings.AppLifecycleManagement != nil {
				f4f3f0 := &svcsdktypes.SpaceAppLifecycleManagement{}
				if r.ko.Spec.SpaceSettings.JupyterLabAppSettings.AppLifecycleManagement.IdleSettings != nil {
					f4f3f0f0 := &svcsdktypes.SpaceIdleSettings{}
					if r.ko.Spec.SpaceSettings.JupyterLabAppSettings.AppLifecycleManagement.IdleSettings.IdleTimeoutInMinutes != nil {
						idleTimeoutInMinutesCopy0 := *r.ko.Spec.SpaceSettings.JupyterLabAppSettings.AppLifecycleManagement.IdleSettings.IdleTimeoutInMinutes
						if idleTimeoutInMinutesCopy0 > math.MaxInt32 || idleTimeoutInMinutesCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field IdleTimeoutInMinutes is of type int32")
						}
						idleTimeoutInMinutesCopy := int32(idleTimeoutInMinutesCopy0)
						f4f3f0f0.IdleTimeoutInMinutes = &idleTimeoutInMinutesCopy
					}
					f4f3f0.IdleSettings = f4f3f0f0
				}
				f4f3.AppLifecycleManagement = f4f3f0
			}
			if r.ko.Spec.SpaceSettings.JupyterLabAppSettings.CodeRepositories != nil {
				f4f3f1 := []svcsdktypes.CodeRepository{}
				for _, f4f3f1iter := range r.ko.Spec.SpaceSettings.JupyterLabAppSettings.CodeRepositories {
					f4f3f1elem := &svcsdktypes.CodeRepository{}
					if f4f3f1iter.RepositoryURL != nil {
						f4f3f1elem.RepositoryUrl = f4f3f1iter.RepositoryURL
					}
					f4f3f1 = append(f4f3f1, *f4f3f1elem)
				}
				f4f3.CodeRepositories = f4f3f1
			}
			if r.ko.Spec.SpaceSettings.JupyterLabAppSettings.DefaultResourceSpec != nil {
				f4f3f2 := &svcsdktypes.ResourceSpec{}
				if r.ko.Spec.SpaceSettings.JupyterLabAppSettings.DefaultResourceSpec.InstanceType != nil {
					f4f3f2.InstanceType = svcsdktypes.AppInstanceType(*r.ko.Spec.SpaceSettings.JupyterLabAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.SpaceSettings.JupyterLabAppSettings.DefaultResourceSpec.LifecycleConfigARN != nil {
					f4f3f2.LifecycleConfigArn = r.ko.Spec.SpaceSettings.JupyterLabAppSettings.DefaultResourceSpec.LifecycleConfigARN
				}
				if r.ko.Spec.SpaceSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f4f3f2.SageMakerImageArn = r.ko.Spec.SpaceSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageARN
				}
				if r.ko.Spec.SpaceSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f4f3f2.SageMakerImageVersionAlias = r.ko.Spec.SpaceSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if r.ko.Spec.SpaceSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f4f3f2.SageMakerImageVersionArn = r.ko.Spec.SpaceSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageVersionARN
				}
				f4f3.DefaultResourceSpec = f4f3f2
			}
			f4.JupyterLabAppSettings = f4f3
		}
		if r.ko.Spec.SpaceSettings.JupyterServerAppSettings != nil {
			f4f4 := &svcsdktypes.JupyterServerAppSettings{}
			if r.ko.Spec.SpaceSettings.JupyterServerAppSettings.CodeRepositories != nil {
				f4f4f0 := []svcsdktypes.CodeRepository{}
				for _, f4f4f0iter := range r.ko.Spec.SpaceSettings.JupyterServerAppSettings.CodeRepositories {
					f4f4f0elem := &svcsdktypes.CodeRepository{}
					if f4f4f0iter.RepositoryURL != nil {
						f4f4f0elem.RepositoryUrl = f4f4f0iter.RepositoryURL
					}
					f4f4f0 = append(f4f4f0, *f4f4f0elem)
				}
				f4f4.CodeRepositories = f4f4f0
			}
			if r.ko.Spec.SpaceSettings.JupyterServerAppSettings.DefaultResourceSpec != nil {
				f4f4f1 := &svcsdktypes.ResourceSpec{}
				if r.ko.Spec.SpaceSettings.JupyterServerAppSettings.DefaultResourceSpec.InstanceType != nil {
					f4f4f1.InstanceType = svcsdktypes.AppInstanceType(*r.ko.Spec.SpaceSettings.JupyterServerAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.SpaceSettings.JupyterServerAppSettings.DefaultResourceSpec.LifecycleConfigARN != nil {
					f4f4f1.LifecycleConfigArn = r.ko.Spec.SpaceSettings.JupyterServerAppSettings.DefaultResourceSpec.LifecycleConfigARN
				}
				if r.ko.Spec.SpaceSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f4f4f1.SageMakerImageArn = r.ko.Spec.SpaceSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageARN
				}
				if r.ko.Spec.SpaceSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f4f4f1.SageMakerImageVersionAlias = r.ko.Spec.SpaceSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if r.ko.Spec.SpaceSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f4f4f1.SageMakerImageVersionArn = r.ko.Spec.SpaceSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionARN
				}
				f4f4.DefaultResourceSpec = f4f4f1
			}
			if r.ko.Spec.SpaceSettings.JupyterServerAppSettings.LifecycleConfigARNs != nil {
				f4f4.LifecycleConfigArns = aws.ToStringSlice(r.ko.Spec.SpaceSettings.JupyterServerAppSettings.LifecycleConfigARNs)
			}
			f4.JupyterServerAppSettings = f4f4
		}
		if r.ko.Spec.SpaceSettings.KernelGatewayAppSettings != nil {
			f4f5 := &svcsdktypes.KernelGatewayAppSettings{}
			if r.ko.Spec.SpaceSettings.KernelGatewayAppSettings.CustomImages != nil {
				f4f5f0 := []svcsdktypes.CustomImage{}
				for _, f4f5f0iter := range r.ko.Spec.SpaceSettings.KernelGatewayAppSettings.CustomImages {
					f4f5f0elem := &svcsdktypes.CustomImage{}
					if f4f5f0iter.AppImageConfigName != nil {
						f4f5f0elem.AppImageConfigName = f4f5f0iter.AppImageConfigName
					}
					if f4f5f0iter.ImageName != nil {
						f4f5f0elem.ImageName = f4f5f0iter.ImageName
					}
					if f4f5f0iter.ImageVersionNumber != nil {
						imageVersionNumberCopy0 := *f4f5f0iter.ImageVersionNumber
						if imageVersionNumberCopy0 > math.MaxInt32 || imageVersionNumberCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field ImageVersionNumber is of type int32")
						}
						imageVersionNumberCopy := int32(imageVersionNumberCopy0)
						f4f5f0elem.ImageVersionNumber = &imageVersionNumberCopy
					}
					f4f5f0 = append(f4f5f0, *f4f5f0elem)
				}
				f4f5.CustomImages = f4f5f0
			}
			if r.ko.Spec.SpaceSettings.KernelGatewayAppSettings.DefaultResourceSpec != nil {
				f4f5f1 := &svcsdktypes.ResourceSpec{}
				if r.ko.Spec.SpaceSettings.KernelGatewayAppSettings.DefaultResourceSpec.InstanceType != nil {
					f4f5f1.InstanceType = svcsdktypes.AppInstanceType(*r.ko.Spec.SpaceSettings.KernelGatewayAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.SpaceSettings.KernelGatewayAppSettings.DefaultResourceSpec.LifecycleConfigARN != nil {
					f4f5f1.LifecycleConfigArn = r.ko.Spec.SpaceSettings.KernelGatewayAppSettings.DefaultResourceSpec.LifecycleConfigARN
				}
				if r.ko.Spec.SpaceSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f4f5f1.SageMakerImageArn = r.ko.Spec.SpaceSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageARN
				}
				if r.ko.Spec.SpaceSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f4f5f1.SageMakerImageVersionAlias = r.ko.Spec.SpaceSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if r.ko.Spec.SpaceSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f4f5f1.SageMakerImageVersionArn = r.ko.Spec.SpaceSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionARN
				}
				f4f5.DefaultResourceSpec = f4f5f1
			}
			if r.ko.Spec.SpaceSettings.KernelGatewayAppSettings.LifecycleConfigARNs != nil {
				f4f5.LifecycleConfigArns = aws.ToStringSlice(r.ko.Spec.SpaceSettings.KernelGatewayAppSettings.LifecycleConfigARNs)
			}
			f4.KernelGatewayAppSettings = f4f5
		}
		if r.ko.Spec.SpaceSettings.RemoteAccess != nil {
			f4.RemoteAccess = svcsdktypes.FeatureStatus(*r.ko.Spec.SpaceSettings.RemoteAccess)
		}
		if r.ko.Spec.SpaceSettings.SpaceManagedResources != nil {
			f4.SpaceManagedResources = svcsdktypes.FeatureStatus(*r.ko.Spec.SpaceSettings.SpaceManagedResources)
		}
		if r.ko.Spec.SpaceSettings.SpaceStorageSettings != nil {
			f4f8 := &svcsdktypes.SpaceStorageSettings{}
			if r.ko.Spec.SpaceSettings.SpaceStorageSettings.EBSStorageSettings != nil {
				f4f8f0 := &svcsdktypes.EbsStorageSettings{}
				if r.ko.Spec.SpaceSettings.SpaceStorageSettings.EBSStorageSettings.EBSVolumeSizeInGb != nil {
					ebsVolumeSizeInGbCopy0 := *r.ko.Spec.SpaceSettings.SpaceStorageSettings.EBSStorageSettings.EBSVolumeSizeInGb
					if ebsVolumeSizeInGbCopy0 > math.MaxInt32 || ebsVolumeSizeInGbCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field EbsVolumeSizeInGb is of type int32")
					}
					ebsVolumeSizeInGbCopy := int32(ebsVolumeSizeInGbCopy0)
					f4f8f0.EbsVolumeSizeInGb = &ebsVolumeSizeInGbCopy
				}
				f4f8.EbsStorageSettings = f4f8f0
			}
			f4.SpaceStorageSettings = f4f8
		}
		res.SpaceSettings = f4
	}
	if r.ko.Spec.SpaceSharingSettings != nil {
		f5 := &svcsdktypes.SpaceSharingSettings{}
		if r.ko.Spec.SpaceSharingSettings.SharingType != nil {
			f5.SharingType = svcsdktypes.SharingType(*r.ko.Spec.SpaceSharingSettings.SharingType)
		}
		res.SpaceSharingSettings = f5
	}
	if r.ko.Spec.Tags != nil {
		f6 := []svcsdktypes.Tag{}
		for _, f6iter := range r.ko.Spec.Tags {
			f6elem := &svcsdktypes.Tag{}
			if f6iter.Key != nil {
				f6elem.Key = f6iter.Key
			}
			if f6iter.Value != nil {
				f6elem.Value = f6iter.Value
			}
			f6 = append(f6, *f6elem)
		}
		res.Tags = f6
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	if err = rm.requeueUntilCanModify(ctx, latest); err != nil {
		return nil, err
	}
	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.UpdateSpaceOutput
	_ = resp
	resp, err = rm.sdkapi.UpdateSpace(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdateSpace", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.SpaceArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.SpaceArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.UpdateSpaceInput, error) {
	res := &svcsdk.UpdateSpaceInput{}

	if r.ko.Spec.DomainID != nil {
		res.DomainId = r.ko.Spec.DomainID
	}
	if r.ko.Spec.SpaceDisplayName != nil {
		res.SpaceDisplayName = r.ko.Spec.SpaceDisplayName
	}
	if r.ko.Spec.SpaceName != nil {
		res.SpaceName = r.ko.Spec.SpaceName
	}
	if r.ko.Spec.SpaceSettings != nil {
		f3 := &svcsdktypes.SpaceSettings{}
		if r.ko.Spec.SpaceSettings.AppType != nil {
			f3.AppType = svcsdktypes.AppType(*r.ko.Spec.SpaceSettings.AppType)
		}
		if r.ko.Spec.SpaceSettings.CodeEditorAppSettings != nil {
			f3f1 := &svcsdktypes.SpaceCodeEditorAppSettings{}
			if r.ko.Spec.SpaceSettings.CodeEditorAppSettings.AppLifecycleManagement != nil {
				f3f1f0 := &svcsdktypes.SpaceAppLifecycleManagement{}
				if r.ko.Spec.SpaceSettings.CodeEditorAppSettings.AppLifecycleManagement.IdleSettings != nil {
					f3f1f0f0 := &svcsdktypes.SpaceIdleSettings{}
					if r.ko.Spec.SpaceSettings.CodeEditorAppSettings.AppLifecycleManagement.IdleSettings.IdleTimeoutInMinutes != nil {
						idleTimeoutInMinutesCopy0 := *r.ko.Spec.SpaceSettings.CodeEditorAppSettings.AppLifecycleManagement.IdleSettings.IdleTimeoutInMinutes
						if idleTimeoutInMinutesCopy0 > math.MaxInt32 || idleTimeoutInMinutesCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field IdleTimeoutInMinutes is of type int32")
						}
						idleTimeoutInMinutesCopy := int32(idleTimeoutInMinutesCopy0)
						f3f1f0f0.IdleTimeoutInMinutes = &idleTimeoutInMinutesCopy
					}
					f3f1f0.IdleSettings = f3f1f0f0
				}
				f3f1.AppLifecycleManagement = f3f1f0
			}
			if r.ko.Spec.SpaceSettings.CodeEditorAppSettings.DefaultResourceSpec != nil {
				f3f1f1 := &svcsdktypes.ResourceSpec{}
				if r.ko.Spec.SpaceSettings.CodeEditorAppSettings.DefaultResourceSpec.InstanceType != nil {
					f3f1f1.InstanceType = svcsdktypes.AppInstanceType(*r.ko.Spec.SpaceSettings.CodeEditorAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.SpaceSettings.CodeEditorAppSettings.DefaultResourceSpec.LifecycleConfigARN != nil {
					f3f1f1.LifecycleConfigArn = r.ko.Spec.SpaceSettings.CodeEditorAppSettings.DefaultResourceSpec.LifecycleConfigARN
				}
				if r.ko.Spec.SpaceSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f3f1f1.SageMakerImageArn = r.ko.Spec.SpaceSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageARN
				}
				if r.ko.Spec.SpaceSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f3f1f1.SageMakerImageVersionAlias = r.ko.Spec.SpaceSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if r.ko.Spec.SpaceSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f3f1f1.SageMakerImageVersionArn = r.ko.Spec.SpaceSettings.CodeEditorAppSettings.DefaultResourceSpec.SageMakerImageVersionARN
				}
				f3f1.DefaultResourceSpec = f3f1f1
			}
			f3.CodeEditorAppSettings = f3f1
		}
		if r.ko.Spec.SpaceSettings.CustomFileSystems != nil {
			f3f2 := []svcsdktypes.CustomFileSystem{}
			for _, f3f2iter := range r.ko.Spec.SpaceSettings.CustomFileSystems {
				var f3f2elem svcsdktypes.CustomFileSystem
				isInterfaceSet := false
				if f3f2iter.EFSFileSystem != nil {
					if isInterfaceSet {
						return nil, ackerr.NewTerminalError(fmt.Errorf("can only set one of the members for EFSFileSystem"))
					}
					f3f2elemf0Parent := &svcsdktypes.CustomFileSystemMemberEFSFileSystem{}
					f3f2elemf0 := &svcsdktypes.EFSFileSystem{}
					if f3f2iter.EFSFileSystem.FileSystemID != nil {
						f3f2elemf0.FileSystemId = f3f2iter.EFSFileSystem.FileSystemID
					}
					f3f2elemf0Parent.Value = *f3f2elemf0
				}
				if f3f2iter.FSxLustreFileSystem != nil {
					if isInterfaceSet {
						return nil, ackerr.NewTerminalError(fmt.Errorf("can only set one of the members for FSxLustreFileSystem"))
					}
					f3f2elemf1Parent := &svcsdktypes.CustomFileSystemMemberFSxLustreFileSystem{}
					f3f2elemf1 := &svcsdktypes.FSxLustreFileSystem{}
					if f3f2iter.FSxLustreFileSystem.FileSystemID != nil {
						f3f2elemf1.FileSystemId = f3f2iter.FSxLustreFileSystem.FileSystemID
					}
					f3f2elemf1Parent.Value = *f3f2elemf1
				}
				if f3f2iter.S3FileSystem != nil {
					if isInterfaceSet {
						return nil, ackerr.NewTerminalError(fmt.Errorf("can only set one of the members for S3FileSystem"))
					}
					f3f2elemf2Parent := &svcsdktypes.CustomFileSystemMemberS3FileSystem{}
					f3f2elemf2 := &svcsdktypes.S3FileSystem{}
					if f3f2iter.S3FileSystem.S3URI != nil {
						f3f2elemf2.S3Uri = f3f2iter.S3FileSystem.S3URI
					}
					f3f2elemf2Parent.Value = *f3f2elemf2
				}
				f3f2 = append(f3f2, f3f2elem)
			}
			f3.CustomFileSystems = f3f2
		}
		if r.ko.Spec.SpaceSettings.JupyterLabAppSettings != nil {
			f3f3 := &svcsdktypes.SpaceJupyterLabAppSettings{}
			if r.ko.Spec.SpaceSettings.JupyterLabAppSettings.AppLifecycleManagement != nil {
				f3f3f0 := &svcsdktypes.SpaceAppLifecycleManagement{}
				if r.ko.Spec.SpaceSettings.JupyterLabAppSettings.AppLifecycleManagement.IdleSettings != nil {
					f3f3f0f0 := &svcsdktypes.SpaceIdleSettings{}
					if r.ko.Spec.SpaceSettings.JupyterLabAppSettings.AppLifecycleManagement.IdleSettings.IdleTimeoutInMinutes != nil {
						idleTimeoutInMinutesCopy0 := *r.ko.Spec.SpaceSettings.JupyterLabAppSettings.AppLifecycleManagement.IdleSettings.IdleTimeoutInMinutes
						if idleTimeoutInMinutesCopy0 > math.MaxInt32 || idleTimeoutInMinutesCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field IdleTimeoutInMinutes is of type int32")
						}
						idleTimeoutInMinutesCopy := int32(idleTimeoutInMinutesCopy0)
						f3f3f0f0.IdleTimeoutInMinutes = &idleTimeoutInMinutesCopy
					}
					f3f3f0.IdleSettings = f3f3f0f0
				}
				f3f3.AppLifecycleManagement = f3f3f0
			}
			if r.ko.Spec.SpaceSettings.JupyterLabAppSettings.CodeRepositories != nil {
				f3f3f1 := []svcsdktypes.CodeRepository{}
				for _, f3f3f1iter := range r.ko.Spec.SpaceSettings.JupyterLabAppSettings.CodeRepositories {
					f3f3f1elem := &svcsdktypes.CodeRepository{}
					if f3f3f1iter.RepositoryURL != nil {
						f3f3f1elem.RepositoryUrl = f3f3f1iter.RepositoryURL
					}
					f3f3f1 = append(f3f3f1, *f3f3f1elem)
				}
				f3f3.CodeRepositories = f3f3f1
			}
			if r.ko.Spec.SpaceSettings.JupyterLabAppSettings.DefaultResourceSpec != nil {
				f3f3f2 := &svcsdktypes.ResourceSpec{}
				if r.ko.Spec.SpaceSettings.JupyterLabAppSettings.DefaultResourceSpec.InstanceType != nil {
					f3f3f2.InstanceType = svcsdktypes.AppInstanceType(*r.ko.Spec.SpaceSettings.JupyterLabAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.SpaceSettings.JupyterLabAppSettings.DefaultResourceSpec.LifecycleConfigARN != nil {
					f3f3f2.LifecycleConfigArn = r.ko.Spec.SpaceSettings.JupyterLabAppSettings.DefaultResourceSpec.LifecycleConfigARN
				}
				if r.ko.Spec.SpaceSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f3f3f2.SageMakerImageArn = r.ko.Spec.SpaceSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageARN
				}
				if r.ko.Spec.SpaceSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f3f3f2.SageMakerImageVersionAlias = r.ko.Spec.SpaceSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if r.ko.Spec.SpaceSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f3f3f2.SageMakerImageVersionArn = r.ko.Spec.SpaceSettings.JupyterLabAppSettings.DefaultResourceSpec.SageMakerImageVersionARN
				}
				f3f3.DefaultResourceSpec = f3f3f2
			}
			f3.JupyterLabAppSettings = f3f3
		}
		if r.ko.Spec.SpaceSettings.JupyterServerAppSettings != nil {
			f3f4 := &svcsdktypes.JupyterServerAppSettings{}
			if r.ko.Spec.SpaceSettings.JupyterServerAppSettings.CodeRepositories != nil {
				f3f4f0 := []svcsdktypes.CodeRepository{}
				for _, f3f4f0iter := range r.ko.Spec.SpaceSettings.JupyterServerAppSettings.CodeRepositories {
					f3f4f0elem := &svcsdktypes.CodeRepository{}
					if f3f4f0iter.RepositoryURL != nil {
						f3f4f0elem.RepositoryUrl = f3f4f0iter.RepositoryURL
					}
					f3f4f0 = append(f3f4f0, *f3f4f0elem)
				}
				f3f4.CodeRepositories = f3f4f0
			}
			if r.ko.Spec.SpaceSettings.JupyterServerAppSettings.DefaultResourceSpec != nil {
				f3f4f1 := &svcsdktypes.ResourceSpec{}
				if r.ko.Spec.SpaceSettings.JupyterServerAppSettings.DefaultResourceSpec.InstanceType != nil {
					f3f4f1.InstanceType = svcsdktypes.AppInstanceType(*r.ko.Spec.SpaceSettings.JupyterServerAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.SpaceSettings.JupyterServerAppSettings.DefaultResourceSpec.LifecycleConfigARN != nil {
					f3f4f1.LifecycleConfigArn = r.ko.Spec.SpaceSettings.JupyterServerAppSettings.DefaultResourceSpec.LifecycleConfigARN
				}
				if r.ko.Spec.SpaceSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f3f4f1.SageMakerImageArn = r.ko.Spec.SpaceSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageARN
				}
				if r.ko.Spec.SpaceSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f3f4f1.SageMakerImageVersionAlias = r.ko.Spec.SpaceSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if r.ko.Spec.SpaceSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f3f4f1.SageMakerImageVersionArn = r.ko.Spec.SpaceSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageVersionARN
				}
				f3f4.DefaultResourceSpec = f3f4f1
			}
			if r.ko.Spec.SpaceSettings.JupyterServerAppSettings.LifecycleConfigARNs != nil {
				f3f4.LifecycleConfigArns = aws.ToStringSlice(r.ko.Spec.SpaceSettings.JupyterServerAppSettings.LifecycleConfigARNs)
			}
			f3.JupyterServerAppSettings = f3f4
		}
		if r.ko.Spec.SpaceSettings.KernelGatewayAppSettings != nil {
			f3f5 := &svcsdktypes.KernelGatewayAppSettings{}
			if r.ko.Spec.SpaceSettings.KernelGatewayAppSettings.CustomImages != nil {
				f3f5f0 := []svcsdktypes.CustomImage{}
				for _, f3f5f0iter := range r.ko.Spec.SpaceSettings.KernelGatewayAppSettings.CustomImages {
					f3f5f0elem := &svcsdktypes.CustomImage{}
					if f3f5f0iter.AppImageConfigName != nil {
						f3f5f0elem.AppImageConfigName = f3f5f0iter.AppImageConfigName
					}
					if f3f5f0iter.ImageName != nil {
						f3f5f0elem.ImageName = f3f5f0iter.ImageName
					}
					if f3f5f0iter.ImageVersionNumber != nil {
						imageVersionNumberCopy0 := *f3f5f0iter.ImageVersionNumber
						if imageVersionNumberCopy0 > math.MaxInt32 || imageVersionNumberCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field ImageVersionNumber is of type int32")
						}
						imageVersionNumberCopy := int32(imageVersionNumberCopy0)
						f3f5f0elem.ImageVersionNumber = &imageVersionNumberCopy
					}
					f3f5f0 = append(f3f5f0, *f3f5f0elem)
				}
				f3f5.CustomImages = f3f5f0
			}
			if r.ko.Spec.SpaceSettings.KernelGatewayAppSettings.DefaultResourceSpec != nil {
				f3f5f1 := &svcsdktypes.ResourceSpec{}
				if r.ko.Spec.SpaceSettings.KernelGatewayAppSettings.DefaultResourceSpec.InstanceType != nil {
					f3f5f1.InstanceType = svcsdktypes.AppInstanceType(*r.ko.Spec.SpaceSettings.KernelGatewayAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.SpaceSettings.KernelGatewayAppSettings.DefaultResourceSpec.LifecycleConfigARN != nil {
					f3f5f1.LifecycleConfigArn = r.ko.Spec.SpaceSettings.KernelGatewayAppSettings.DefaultResourceSpec.LifecycleConfigARN
				}
				if r.ko.Spec.SpaceSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f3f5f1.SageMakerImageArn = r.ko.Spec.SpaceSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageARN
				}
				if r.ko.Spec.SpaceSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias != nil {
					f3f5f1.SageMakerImageVersionAlias = r.ko.Spec.SpaceSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionAlias
				}
				if r.ko.Spec.SpaceSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionARN != nil {
					f3f5f1.SageMakerImageVersionArn = r.ko.Spec.SpaceSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageVersionARN
				}
				f3f5.DefaultResourceSpec = f3f5f1
			}
			if r.ko.Spec.SpaceSettings.KernelGatewayAppSettings.LifecycleConfigARNs != nil {
				f3f5.LifecycleConfigArns = aws.ToStringSlice(r.ko.Spec.SpaceSettings.KernelGatewayAppSettings.LifecycleConfigARNs)
			}
			f3.KernelGatewayAppSettings = f3f5
		}
		if r.ko.Spec.SpaceSettings.RemoteAccess != nil {
			f3.RemoteAccess = svcsdktypes.FeatureStatus(*r.ko.Spec.SpaceSettings.RemoteAccess)
		}
		if r.ko.Spec.SpaceSettings.SpaceManagedResources != nil {
			f3.SpaceManagedResources = svcsdktypes.FeatureStatus(*r.ko.Spec.SpaceSettings.SpaceManagedResources)
		}
		if r.ko.Spec.SpaceSettings.SpaceStorageSettings != nil {
			f3f8 := &svcsdktypes.SpaceStorageSettings{}
			if r.ko.Spec.SpaceSettings.SpaceStorageSettings.EBSStorageSettings != nil {
				f3f8f0 := &svcsdktypes.EbsStorageSettings{}
				if r.ko.Spec.SpaceSettings.SpaceStorageSettings.EBSStorageSettings.EBSVolumeSizeInGb != nil {
					ebsVolumeSizeInGbCopy0 := *r.ko.Spec.SpaceSettings.SpaceStorageSettings.EBSStorageSettings.EBSVolumeSizeInGb
					if ebsVolumeSizeInGbCopy0 > math.MaxInt32 || ebsVolumeSizeInGbCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field EbsVolumeSizeInGb is of type int32")
					}
					ebsVolumeSizeInGbCopy := int32(ebsVolumeSizeInGbCopy0)
					f3f8f0.EbsVolumeSizeInGb = &ebsVolumeSizeInGbCopy
				}
				f3f8.EbsStorageSettings = f3f8f0
			}
			f3.SpaceStorageSettings = f3f8
		}
		res.SpaceSettings = f3
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	if err = rm.requeueUntilCanModify(ctx, r); err != nil {
		return r, err
	}

	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteSpaceOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteSpace(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteSpace", err)

	if err == nil {
		if observed, err := rm.sdkFind(ctx, r); err != ackerr.NotFound {
			if err != nil {
				return nil, err
			}
			r.SetStatus(observed)
			return r, requeueWaitWhileDeleting
		}
	}

	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteSpaceInput, error) {
	res := &svcsdk.DeleteSpaceInput{}

	if r.ko.Spec.DomainID != nil {
		res.DomainId = r.ko.Spec.DomainID
	}
	if r.ko.Spec.SpaceName != nil {
		res.SpaceName = r.ko.Spec.SpaceName
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.Space,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}

	var terminalErr smithy.APIError
	if !errors.As(err, &terminalErr) {
		return false
	}
	switch terminalErr.ErrorCode() {
	case "ResourceNotFound",
		"ResourceLimitExceeded",
		"InvalidParameterCombination",
		"InvalidParameterValue",
		"MissingParameter":
		return true
	default:
		return false
	}
}
