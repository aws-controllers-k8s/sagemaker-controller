// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package inference_component

import (
	"context"
	"errors"
	"fmt"
	"math"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go-v2/aws"
	svcsdk "github.com/aws/aws-sdk-go-v2/service/sagemaker"
	svcsdktypes "github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
	smithy "github.com/aws/smithy-go"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/sagemaker-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &svcsdk.Client{}
	_ = &svcapitypes.InferenceComponent{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
	_ = &aws.Config{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.DescribeInferenceComponentOutput
	resp, err = rm.sdkapi.DescribeInferenceComponent(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "DescribeInferenceComponent", err)
	if err != nil {
		var awsErr smithy.APIError
		if errors.As(err, &awsErr) && awsErr.ErrorCode() == "ValidationException" && strings.HasPrefix(awsErr.ErrorMessage(), "Could not find inference component") {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.CreationTime != nil {
		ko.Status.CreationTime = &metav1.Time{*resp.CreationTime}
	} else {
		ko.Status.CreationTime = nil
	}
	if resp.EndpointName != nil {
		ko.Spec.EndpointName = resp.EndpointName
	} else {
		ko.Spec.EndpointName = nil
	}
	if resp.FailureReason != nil {
		ko.Status.FailureReason = resp.FailureReason
	} else {
		ko.Status.FailureReason = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.InferenceComponentArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.InferenceComponentArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.InferenceComponentName != nil {
		ko.Spec.InferenceComponentName = resp.InferenceComponentName
	} else {
		ko.Spec.InferenceComponentName = nil
	}
	if resp.InferenceComponentStatus != "" {
		ko.Status.InferenceComponentStatus = aws.String(string(resp.InferenceComponentStatus))
	} else {
		ko.Status.InferenceComponentStatus = nil
	}
	if resp.LastModifiedTime != nil {
		ko.Status.LastModifiedTime = &metav1.Time{*resp.LastModifiedTime}
	} else {
		ko.Status.LastModifiedTime = nil
	}
	if resp.RuntimeConfig != nil {
		f8 := &svcapitypes.InferenceComponentRuntimeConfig{}
		ko.Spec.RuntimeConfig = f8
	} else {
		ko.Spec.RuntimeConfig = nil
	}
	if resp.Specification != nil {
		f9 := &svcapitypes.InferenceComponentSpecification{}
		if resp.Specification.ComputeResourceRequirements != nil {
			f9f1 := &svcapitypes.InferenceComponentComputeResourceRequirements{}
			if resp.Specification.ComputeResourceRequirements.MaxMemoryRequiredInMb != nil {
				maxMemoryRequiredInMbCopy := int64(*resp.Specification.ComputeResourceRequirements.MaxMemoryRequiredInMb)
				f9f1.MaxMemoryRequiredInMb = &maxMemoryRequiredInMbCopy
			}
			if resp.Specification.ComputeResourceRequirements.MinMemoryRequiredInMb != nil {
				minMemoryRequiredInMbCopy := int64(*resp.Specification.ComputeResourceRequirements.MinMemoryRequiredInMb)
				f9f1.MinMemoryRequiredInMb = &minMemoryRequiredInMbCopy
			}
			if resp.Specification.ComputeResourceRequirements.NumberOfAcceleratorDevicesRequired != nil {
				numberOfAcceleratorDevicesRequiredCopy := float64(*resp.Specification.ComputeResourceRequirements.NumberOfAcceleratorDevicesRequired)
				f9f1.NumberOfAcceleratorDevicesRequired = &numberOfAcceleratorDevicesRequiredCopy
			}
			if resp.Specification.ComputeResourceRequirements.NumberOfCpuCoresRequired != nil {
				numberOfCPUCoresRequiredCopy := float64(*resp.Specification.ComputeResourceRequirements.NumberOfCpuCoresRequired)
				f9f1.NumberOfCPUCoresRequired = &numberOfCPUCoresRequiredCopy
			}
			f9.ComputeResourceRequirements = f9f1
		}
		if resp.Specification.Container != nil {
			f9f2 := &svcapitypes.InferenceComponentContainerSpecification{}
			if resp.Specification.Container.ArtifactUrl != nil {
				f9f2.ArtifactURL = resp.Specification.Container.ArtifactUrl
			}
			if resp.Specification.Container.Environment != nil {
				f9f2.Environment = aws.StringMap(resp.Specification.Container.Environment)
			}
			f9.Container = f9f2
		}
		if resp.Specification.ModelName != nil {
			f9.ModelName = resp.Specification.ModelName
		}
		if resp.Specification.StartupParameters != nil {
			f9f4 := &svcapitypes.InferenceComponentStartupParameters{}
			if resp.Specification.StartupParameters.ContainerStartupHealthCheckTimeoutInSeconds != nil {
				containerStartupHealthCheckTimeoutInSecondsCopy := int64(*resp.Specification.StartupParameters.ContainerStartupHealthCheckTimeoutInSeconds)
				f9f4.ContainerStartupHealthCheckTimeoutInSeconds = &containerStartupHealthCheckTimeoutInSecondsCopy
			}
			if resp.Specification.StartupParameters.ModelDataDownloadTimeoutInSeconds != nil {
				modelDataDownloadTimeoutInSecondsCopy := int64(*resp.Specification.StartupParameters.ModelDataDownloadTimeoutInSeconds)
				f9f4.ModelDataDownloadTimeoutInSeconds = &modelDataDownloadTimeoutInSecondsCopy
			}
			f9.StartupParameters = f9f4
		}
		ko.Spec.Specification = f9
	} else {
		ko.Spec.Specification = nil
	}
	if resp.VariantName != nil {
		ko.Spec.VariantName = resp.VariantName
	} else {
		ko.Spec.VariantName = nil
	}

	rm.setStatusDefaults(ko)
	// Manually set the RuntimeConfig.CopyCount from read response RuntimeConfig.DesiredCopyCount
	if resp.RuntimeConfig != nil && ko.Spec.RuntimeConfig != nil {
		desiredCountCopy := int64(*resp.RuntimeConfig.DesiredCopyCount)
		ko.Spec.RuntimeConfig.CopyCount = &desiredCountCopy
	}

	rm.customDescribeInferenceComponentSetOutput(ko)

	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Spec.InferenceComponentName == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.DescribeInferenceComponentInput, error) {
	res := &svcsdk.DescribeInferenceComponentInput{}

	if r.ko.Spec.InferenceComponentName != nil {
		res.InferenceComponentName = r.ko.Spec.InferenceComponentName
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateInferenceComponentOutput
	_ = resp
	resp, err = rm.sdkapi.CreateInferenceComponent(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateInferenceComponent", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.InferenceComponentArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.InferenceComponentArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateInferenceComponentInput, error) {
	res := &svcsdk.CreateInferenceComponentInput{}

	if r.ko.Spec.EndpointName != nil {
		res.EndpointName = r.ko.Spec.EndpointName
	}
	if r.ko.Spec.InferenceComponentName != nil {
		res.InferenceComponentName = r.ko.Spec.InferenceComponentName
	}
	if r.ko.Spec.RuntimeConfig != nil {
		f2 := &svcsdktypes.InferenceComponentRuntimeConfig{}
		if r.ko.Spec.RuntimeConfig.CopyCount != nil {
			copyCountCopy0 := *r.ko.Spec.RuntimeConfig.CopyCount
			if copyCountCopy0 > math.MaxInt32 || copyCountCopy0 < math.MinInt32 {
				return nil, fmt.Errorf("error: field CopyCount is of type int32")
			}
			copyCountCopy := int32(copyCountCopy0)
			f2.CopyCount = &copyCountCopy
		}
		res.RuntimeConfig = f2
	}
	if r.ko.Spec.Specification != nil {
		f3 := &svcsdktypes.InferenceComponentSpecification{}
		if r.ko.Spec.Specification.ComputeResourceRequirements != nil {
			f3f0 := &svcsdktypes.InferenceComponentComputeResourceRequirements{}
			if r.ko.Spec.Specification.ComputeResourceRequirements.MaxMemoryRequiredInMb != nil {
				maxMemoryRequiredInMbCopy0 := *r.ko.Spec.Specification.ComputeResourceRequirements.MaxMemoryRequiredInMb
				if maxMemoryRequiredInMbCopy0 > math.MaxInt32 || maxMemoryRequiredInMbCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field MaxMemoryRequiredInMb is of type int32")
				}
				maxMemoryRequiredInMbCopy := int32(maxMemoryRequiredInMbCopy0)
				f3f0.MaxMemoryRequiredInMb = &maxMemoryRequiredInMbCopy
			}
			if r.ko.Spec.Specification.ComputeResourceRequirements.MinMemoryRequiredInMb != nil {
				minMemoryRequiredInMbCopy0 := *r.ko.Spec.Specification.ComputeResourceRequirements.MinMemoryRequiredInMb
				if minMemoryRequiredInMbCopy0 > math.MaxInt32 || minMemoryRequiredInMbCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field MinMemoryRequiredInMb is of type int32")
				}
				minMemoryRequiredInMbCopy := int32(minMemoryRequiredInMbCopy0)
				f3f0.MinMemoryRequiredInMb = &minMemoryRequiredInMbCopy
			}
			if r.ko.Spec.Specification.ComputeResourceRequirements.NumberOfAcceleratorDevicesRequired != nil {
				numberOfAcceleratorDevicesRequiredCopy0 := *r.ko.Spec.Specification.ComputeResourceRequirements.NumberOfAcceleratorDevicesRequired
				if numberOfAcceleratorDevicesRequiredCopy0 > math.MaxFloat32 || numberOfAcceleratorDevicesRequiredCopy0 < math.SmallestNonzeroFloat32 {
					return nil, fmt.Errorf("error: field NumberOfAcceleratorDevicesRequired is of type float32")
				}
				numberOfAcceleratorDevicesRequiredCopy := float32(numberOfAcceleratorDevicesRequiredCopy0)
				f3f0.NumberOfAcceleratorDevicesRequired = &numberOfAcceleratorDevicesRequiredCopy
			}
			if r.ko.Spec.Specification.ComputeResourceRequirements.NumberOfCPUCoresRequired != nil {
				numberOfCPUCoresRequiredCopy0 := *r.ko.Spec.Specification.ComputeResourceRequirements.NumberOfCPUCoresRequired
				if numberOfCPUCoresRequiredCopy0 > math.MaxFloat32 || numberOfCPUCoresRequiredCopy0 < math.SmallestNonzeroFloat32 {
					return nil, fmt.Errorf("error: field NumberOfCpuCoresRequired is of type float32")
				}
				numberOfCPUCoresRequiredCopy := float32(numberOfCPUCoresRequiredCopy0)
				f3f0.NumberOfCpuCoresRequired = &numberOfCPUCoresRequiredCopy
			}
			f3.ComputeResourceRequirements = f3f0
		}
		if r.ko.Spec.Specification.Container != nil {
			f3f1 := &svcsdktypes.InferenceComponentContainerSpecification{}
			if r.ko.Spec.Specification.Container.ArtifactURL != nil {
				f3f1.ArtifactUrl = r.ko.Spec.Specification.Container.ArtifactURL
			}
			if r.ko.Spec.Specification.Container.Environment != nil {
				f3f1.Environment = aws.ToStringMap(r.ko.Spec.Specification.Container.Environment)
			}
			if r.ko.Spec.Specification.Container.Image != nil {
				f3f1.Image = r.ko.Spec.Specification.Container.Image
			}
			f3.Container = f3f1
		}
		if r.ko.Spec.Specification.ModelName != nil {
			f3.ModelName = r.ko.Spec.Specification.ModelName
		}
		if r.ko.Spec.Specification.StartupParameters != nil {
			f3f3 := &svcsdktypes.InferenceComponentStartupParameters{}
			if r.ko.Spec.Specification.StartupParameters.ContainerStartupHealthCheckTimeoutInSeconds != nil {
				containerStartupHealthCheckTimeoutInSecondsCopy0 := *r.ko.Spec.Specification.StartupParameters.ContainerStartupHealthCheckTimeoutInSeconds
				if containerStartupHealthCheckTimeoutInSecondsCopy0 > math.MaxInt32 || containerStartupHealthCheckTimeoutInSecondsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field ContainerStartupHealthCheckTimeoutInSeconds is of type int32")
				}
				containerStartupHealthCheckTimeoutInSecondsCopy := int32(containerStartupHealthCheckTimeoutInSecondsCopy0)
				f3f3.ContainerStartupHealthCheckTimeoutInSeconds = &containerStartupHealthCheckTimeoutInSecondsCopy
			}
			if r.ko.Spec.Specification.StartupParameters.ModelDataDownloadTimeoutInSeconds != nil {
				modelDataDownloadTimeoutInSecondsCopy0 := *r.ko.Spec.Specification.StartupParameters.ModelDataDownloadTimeoutInSeconds
				if modelDataDownloadTimeoutInSecondsCopy0 > math.MaxInt32 || modelDataDownloadTimeoutInSecondsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field ModelDataDownloadTimeoutInSeconds is of type int32")
				}
				modelDataDownloadTimeoutInSecondsCopy := int32(modelDataDownloadTimeoutInSecondsCopy0)
				f3f3.ModelDataDownloadTimeoutInSeconds = &modelDataDownloadTimeoutInSecondsCopy
			}
			f3.StartupParameters = f3f3
		}
		res.Specification = f3
	}
	if r.ko.Spec.Tags != nil {
		f4 := []svcsdktypes.Tag{}
		for _, f4iter := range r.ko.Spec.Tags {
			f4elem := &svcsdktypes.Tag{}
			if f4iter.Key != nil {
				f4elem.Key = f4iter.Key
			}
			if f4iter.Value != nil {
				f4elem.Value = f4iter.Value
			}
			f4 = append(f4, *f4elem)
		}
		res.Tags = f4
	}
	if r.ko.Spec.VariantName != nil {
		res.VariantName = r.ko.Spec.VariantName
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	if err = rm.requeueUntilCanModify(ctx, latest); err != nil {
		return nil, err
	}

	if err = rm.customUpdateInferenceComponentPreChecks(ctx, desired, latest, delta); err != nil {
		return nil, err
	}

	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.UpdateInferenceComponentOutput
	_ = resp
	resp, err = rm.sdkapi.UpdateInferenceComponent(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdateInferenceComponent", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.InferenceComponentArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.InferenceComponentArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	rm.setStatusDefaults(ko)
	if err = rm.customUpdateInferenceComponentSetOutput(ko); err != nil {
		return nil, err
	}
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.UpdateInferenceComponentInput, error) {
	res := &svcsdk.UpdateInferenceComponentInput{}

	if r.ko.Spec.InferenceComponentName != nil {
		res.InferenceComponentName = r.ko.Spec.InferenceComponentName
	}
	if r.ko.Spec.RuntimeConfig != nil {
		f1 := &svcsdktypes.InferenceComponentRuntimeConfig{}
		if r.ko.Spec.RuntimeConfig.CopyCount != nil {
			copyCountCopy0 := *r.ko.Spec.RuntimeConfig.CopyCount
			if copyCountCopy0 > math.MaxInt32 || copyCountCopy0 < math.MinInt32 {
				return nil, fmt.Errorf("error: field CopyCount is of type int32")
			}
			copyCountCopy := int32(copyCountCopy0)
			f1.CopyCount = &copyCountCopy
		}
		res.RuntimeConfig = f1
	}
	if r.ko.Spec.Specification != nil {
		f2 := &svcsdktypes.InferenceComponentSpecification{}
		if r.ko.Spec.Specification.ComputeResourceRequirements != nil {
			f2f0 := &svcsdktypes.InferenceComponentComputeResourceRequirements{}
			if r.ko.Spec.Specification.ComputeResourceRequirements.MaxMemoryRequiredInMb != nil {
				maxMemoryRequiredInMbCopy0 := *r.ko.Spec.Specification.ComputeResourceRequirements.MaxMemoryRequiredInMb
				if maxMemoryRequiredInMbCopy0 > math.MaxInt32 || maxMemoryRequiredInMbCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field MaxMemoryRequiredInMb is of type int32")
				}
				maxMemoryRequiredInMbCopy := int32(maxMemoryRequiredInMbCopy0)
				f2f0.MaxMemoryRequiredInMb = &maxMemoryRequiredInMbCopy
			}
			if r.ko.Spec.Specification.ComputeResourceRequirements.MinMemoryRequiredInMb != nil {
				minMemoryRequiredInMbCopy0 := *r.ko.Spec.Specification.ComputeResourceRequirements.MinMemoryRequiredInMb
				if minMemoryRequiredInMbCopy0 > math.MaxInt32 || minMemoryRequiredInMbCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field MinMemoryRequiredInMb is of type int32")
				}
				minMemoryRequiredInMbCopy := int32(minMemoryRequiredInMbCopy0)
				f2f0.MinMemoryRequiredInMb = &minMemoryRequiredInMbCopy
			}
			if r.ko.Spec.Specification.ComputeResourceRequirements.NumberOfAcceleratorDevicesRequired != nil {
				numberOfAcceleratorDevicesRequiredCopy0 := *r.ko.Spec.Specification.ComputeResourceRequirements.NumberOfAcceleratorDevicesRequired
				if numberOfAcceleratorDevicesRequiredCopy0 > math.MaxFloat32 || numberOfAcceleratorDevicesRequiredCopy0 < math.SmallestNonzeroFloat32 {
					return nil, fmt.Errorf("error: field NumberOfAcceleratorDevicesRequired is of type float32")
				}
				numberOfAcceleratorDevicesRequiredCopy := float32(numberOfAcceleratorDevicesRequiredCopy0)
				f2f0.NumberOfAcceleratorDevicesRequired = &numberOfAcceleratorDevicesRequiredCopy
			}
			if r.ko.Spec.Specification.ComputeResourceRequirements.NumberOfCPUCoresRequired != nil {
				numberOfCPUCoresRequiredCopy0 := *r.ko.Spec.Specification.ComputeResourceRequirements.NumberOfCPUCoresRequired
				if numberOfCPUCoresRequiredCopy0 > math.MaxFloat32 || numberOfCPUCoresRequiredCopy0 < math.SmallestNonzeroFloat32 {
					return nil, fmt.Errorf("error: field NumberOfCpuCoresRequired is of type float32")
				}
				numberOfCPUCoresRequiredCopy := float32(numberOfCPUCoresRequiredCopy0)
				f2f0.NumberOfCpuCoresRequired = &numberOfCPUCoresRequiredCopy
			}
			f2.ComputeResourceRequirements = f2f0
		}
		if r.ko.Spec.Specification.Container != nil {
			f2f1 := &svcsdktypes.InferenceComponentContainerSpecification{}
			if r.ko.Spec.Specification.Container.ArtifactURL != nil {
				f2f1.ArtifactUrl = r.ko.Spec.Specification.Container.ArtifactURL
			}
			if r.ko.Spec.Specification.Container.Environment != nil {
				f2f1.Environment = aws.ToStringMap(r.ko.Spec.Specification.Container.Environment)
			}
			if r.ko.Spec.Specification.Container.Image != nil {
				f2f1.Image = r.ko.Spec.Specification.Container.Image
			}
			f2.Container = f2f1
		}
		if r.ko.Spec.Specification.ModelName != nil {
			f2.ModelName = r.ko.Spec.Specification.ModelName
		}
		if r.ko.Spec.Specification.StartupParameters != nil {
			f2f3 := &svcsdktypes.InferenceComponentStartupParameters{}
			if r.ko.Spec.Specification.StartupParameters.ContainerStartupHealthCheckTimeoutInSeconds != nil {
				containerStartupHealthCheckTimeoutInSecondsCopy0 := *r.ko.Spec.Specification.StartupParameters.ContainerStartupHealthCheckTimeoutInSeconds
				if containerStartupHealthCheckTimeoutInSecondsCopy0 > math.MaxInt32 || containerStartupHealthCheckTimeoutInSecondsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field ContainerStartupHealthCheckTimeoutInSeconds is of type int32")
				}
				containerStartupHealthCheckTimeoutInSecondsCopy := int32(containerStartupHealthCheckTimeoutInSecondsCopy0)
				f2f3.ContainerStartupHealthCheckTimeoutInSeconds = &containerStartupHealthCheckTimeoutInSecondsCopy
			}
			if r.ko.Spec.Specification.StartupParameters.ModelDataDownloadTimeoutInSeconds != nil {
				modelDataDownloadTimeoutInSecondsCopy0 := *r.ko.Spec.Specification.StartupParameters.ModelDataDownloadTimeoutInSeconds
				if modelDataDownloadTimeoutInSecondsCopy0 > math.MaxInt32 || modelDataDownloadTimeoutInSecondsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field ModelDataDownloadTimeoutInSeconds is of type int32")
				}
				modelDataDownloadTimeoutInSecondsCopy := int32(modelDataDownloadTimeoutInSecondsCopy0)
				f2f3.ModelDataDownloadTimeoutInSeconds = &modelDataDownloadTimeoutInSecondsCopy
			}
			f2.StartupParameters = f2f3
		}
		res.Specification = f2
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	if err = rm.requeueUntilCanModify(ctx, r); err != nil {
		return r, err
	}

	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteInferenceComponentOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteInferenceComponent(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteInferenceComponent", err)

	if err == nil {
		if observed, err := rm.sdkFind(ctx, r); err != ackerr.NotFound {
			if err != nil {
				return nil, err
			}
			r.SetStatus(observed)
			return r, requeueWaitWhileDeleting
		}
	}

	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteInferenceComponentInput, error) {
	res := &svcsdk.DeleteInferenceComponentInput{}

	if r.ko.Spec.InferenceComponentName != nil {
		res.InferenceComponentName = r.ko.Spec.InferenceComponentName
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.InferenceComponent,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	if syncCondition == nil && onSuccess {
		syncCondition = &ackv1alpha1.Condition{
			Type:   ackv1alpha1.ConditionTypeResourceSynced,
			Status: corev1.ConditionTrue,
		}
		ko.Status.Conditions = append(ko.Status.Conditions, syncCondition)
	}
	// custom update conditions
	customUpdate := rm.CustomUpdateConditions(ko, r, err)
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil || customUpdate {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}

	var terminalErr smithy.APIError
	if !errors.As(err, &terminalErr) {
		return false
	}
	switch terminalErr.ErrorCode() {
	case "InvalidParameterCombination",
		"InvalidParameterValue",
		"MissingParameter",
		"InferenceComponentUpdateError":
		return true
	default:
		return false
	}
}
