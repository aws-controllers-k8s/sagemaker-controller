// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package inference_component

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/sagemaker"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/sagemaker-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.SageMaker{}
	_ = &svcapitypes.InferenceComponent{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.DescribeInferenceComponentOutput
	resp, err = rm.sdkapi.DescribeInferenceComponentWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "DescribeInferenceComponent", err)
	if err != nil {
		if reqErr, ok := ackerr.AWSRequestFailure(err); ok && reqErr.StatusCode() == 404 {
			return nil, ackerr.NotFound
		}
		if awsErr, ok := ackerr.AWSError(err); ok && awsErr.Code() == "ValidationException" && strings.HasPrefix(awsErr.Message(), "Could not find inference component") {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.CreationTime != nil {
		ko.Status.CreationTime = &metav1.Time{*resp.CreationTime}
	} else {
		ko.Status.CreationTime = nil
	}
	if resp.EndpointName != nil {
		ko.Spec.EndpointName = resp.EndpointName
	} else {
		ko.Spec.EndpointName = nil
	}
	if resp.FailureReason != nil {
		ko.Status.FailureReason = resp.FailureReason
	} else {
		ko.Status.FailureReason = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.InferenceComponentArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.InferenceComponentArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.InferenceComponentName != nil {
		ko.Spec.InferenceComponentName = resp.InferenceComponentName
	} else {
		ko.Spec.InferenceComponentName = nil
	}
	if resp.InferenceComponentStatus != nil {
		ko.Status.InferenceComponentStatus = resp.InferenceComponentStatus
	} else {
		ko.Status.InferenceComponentStatus = nil
	}
	if resp.LastModifiedTime != nil {
		ko.Status.LastModifiedTime = &metav1.Time{*resp.LastModifiedTime}
	} else {
		ko.Status.LastModifiedTime = nil
	}
	if resp.RuntimeConfig != nil {
		f8 := &svcapitypes.InferenceComponentRuntimeConfig{}
		ko.Spec.RuntimeConfig = f8
	} else {
		ko.Spec.RuntimeConfig = nil
	}
	if resp.Specification != nil {
		f9 := &svcapitypes.InferenceComponentSpecification{}
		if resp.Specification.ComputeResourceRequirements != nil {
			f9f0 := &svcapitypes.InferenceComponentComputeResourceRequirements{}
			if resp.Specification.ComputeResourceRequirements.MaxMemoryRequiredInMb != nil {
				f9f0.MaxMemoryRequiredInMb = resp.Specification.ComputeResourceRequirements.MaxMemoryRequiredInMb
			}
			if resp.Specification.ComputeResourceRequirements.MinMemoryRequiredInMb != nil {
				f9f0.MinMemoryRequiredInMb = resp.Specification.ComputeResourceRequirements.MinMemoryRequiredInMb
			}
			if resp.Specification.ComputeResourceRequirements.NumberOfAcceleratorDevicesRequired != nil {
				f9f0.NumberOfAcceleratorDevicesRequired = resp.Specification.ComputeResourceRequirements.NumberOfAcceleratorDevicesRequired
			}
			if resp.Specification.ComputeResourceRequirements.NumberOfCpuCoresRequired != nil {
				f9f0.NumberOfCPUCoresRequired = resp.Specification.ComputeResourceRequirements.NumberOfCpuCoresRequired
			}
			f9.ComputeResourceRequirements = f9f0
		}
		if resp.Specification.Container != nil {
			f9f1 := &svcapitypes.InferenceComponentContainerSpecification{}
			if resp.Specification.Container.ArtifactUrl != nil {
				f9f1.ArtifactURL = resp.Specification.Container.ArtifactUrl
			}
			if resp.Specification.Container.Environment != nil {
				f9f1f2 := map[string]*string{}
				for f9f1f2key, f9f1f2valiter := range resp.Specification.Container.Environment {
					var f9f1f2val string
					f9f1f2val = *f9f1f2valiter
					f9f1f2[f9f1f2key] = &f9f1f2val
				}
				f9f1.Environment = f9f1f2
			}
			f9.Container = f9f1
		}
		if resp.Specification.ModelName != nil {
			f9.ModelName = resp.Specification.ModelName
		}
		if resp.Specification.StartupParameters != nil {
			f9f3 := &svcapitypes.InferenceComponentStartupParameters{}
			if resp.Specification.StartupParameters.ContainerStartupHealthCheckTimeoutInSeconds != nil {
				f9f3.ContainerStartupHealthCheckTimeoutInSeconds = resp.Specification.StartupParameters.ContainerStartupHealthCheckTimeoutInSeconds
			}
			if resp.Specification.StartupParameters.ModelDataDownloadTimeoutInSeconds != nil {
				f9f3.ModelDataDownloadTimeoutInSeconds = resp.Specification.StartupParameters.ModelDataDownloadTimeoutInSeconds
			}
			f9.StartupParameters = f9f3
		}
		ko.Spec.Specification = f9
	} else {
		ko.Spec.Specification = nil
	}
	if resp.VariantName != nil {
		ko.Spec.VariantName = resp.VariantName
	} else {
		ko.Spec.VariantName = nil
	}

	rm.setStatusDefaults(ko)
	// Manually set the RuntimeConfig.CopyCount from read response RuntimeConfig.DesiredCopyCount
	if resp.RuntimeConfig != nil && ko.Spec.RuntimeConfig != nil {
		ko.Spec.RuntimeConfig.CopyCount = resp.RuntimeConfig.DesiredCopyCount
	}

	rm.customDescribeInferenceComponentSetOutput(ko)

	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Spec.InferenceComponentName == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.DescribeInferenceComponentInput, error) {
	res := &svcsdk.DescribeInferenceComponentInput{}

	if r.ko.Spec.InferenceComponentName != nil {
		res.SetInferenceComponentName(*r.ko.Spec.InferenceComponentName)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateInferenceComponentOutput
	_ = resp
	resp, err = rm.sdkapi.CreateInferenceComponentWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateInferenceComponent", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.InferenceComponentArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.InferenceComponentArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateInferenceComponentInput, error) {
	res := &svcsdk.CreateInferenceComponentInput{}

	if r.ko.Spec.EndpointName != nil {
		res.SetEndpointName(*r.ko.Spec.EndpointName)
	}
	if r.ko.Spec.InferenceComponentName != nil {
		res.SetInferenceComponentName(*r.ko.Spec.InferenceComponentName)
	}
	if r.ko.Spec.RuntimeConfig != nil {
		f2 := &svcsdk.InferenceComponentRuntimeConfig{}
		if r.ko.Spec.RuntimeConfig.CopyCount != nil {
			f2.SetCopyCount(*r.ko.Spec.RuntimeConfig.CopyCount)
		}
		res.SetRuntimeConfig(f2)
	}
	if r.ko.Spec.Specification != nil {
		f3 := &svcsdk.InferenceComponentSpecification{}
		if r.ko.Spec.Specification.ComputeResourceRequirements != nil {
			f3f0 := &svcsdk.InferenceComponentComputeResourceRequirements{}
			if r.ko.Spec.Specification.ComputeResourceRequirements.MaxMemoryRequiredInMb != nil {
				f3f0.SetMaxMemoryRequiredInMb(*r.ko.Spec.Specification.ComputeResourceRequirements.MaxMemoryRequiredInMb)
			}
			if r.ko.Spec.Specification.ComputeResourceRequirements.MinMemoryRequiredInMb != nil {
				f3f0.SetMinMemoryRequiredInMb(*r.ko.Spec.Specification.ComputeResourceRequirements.MinMemoryRequiredInMb)
			}
			if r.ko.Spec.Specification.ComputeResourceRequirements.NumberOfAcceleratorDevicesRequired != nil {
				f3f0.SetNumberOfAcceleratorDevicesRequired(*r.ko.Spec.Specification.ComputeResourceRequirements.NumberOfAcceleratorDevicesRequired)
			}
			if r.ko.Spec.Specification.ComputeResourceRequirements.NumberOfCPUCoresRequired != nil {
				f3f0.SetNumberOfCpuCoresRequired(*r.ko.Spec.Specification.ComputeResourceRequirements.NumberOfCPUCoresRequired)
			}
			f3.SetComputeResourceRequirements(f3f0)
		}
		if r.ko.Spec.Specification.Container != nil {
			f3f1 := &svcsdk.InferenceComponentContainerSpecification{}
			if r.ko.Spec.Specification.Container.ArtifactURL != nil {
				f3f1.SetArtifactUrl(*r.ko.Spec.Specification.Container.ArtifactURL)
			}
			if r.ko.Spec.Specification.Container.Environment != nil {
				f3f1f1 := map[string]*string{}
				for f3f1f1key, f3f1f1valiter := range r.ko.Spec.Specification.Container.Environment {
					var f3f1f1val string
					f3f1f1val = *f3f1f1valiter
					f3f1f1[f3f1f1key] = &f3f1f1val
				}
				f3f1.SetEnvironment(f3f1f1)
			}
			if r.ko.Spec.Specification.Container.Image != nil {
				f3f1.SetImage(*r.ko.Spec.Specification.Container.Image)
			}
			f3.SetContainer(f3f1)
		}
		if r.ko.Spec.Specification.ModelName != nil {
			f3.SetModelName(*r.ko.Spec.Specification.ModelName)
		}
		if r.ko.Spec.Specification.StartupParameters != nil {
			f3f3 := &svcsdk.InferenceComponentStartupParameters{}
			if r.ko.Spec.Specification.StartupParameters.ContainerStartupHealthCheckTimeoutInSeconds != nil {
				f3f3.SetContainerStartupHealthCheckTimeoutInSeconds(*r.ko.Spec.Specification.StartupParameters.ContainerStartupHealthCheckTimeoutInSeconds)
			}
			if r.ko.Spec.Specification.StartupParameters.ModelDataDownloadTimeoutInSeconds != nil {
				f3f3.SetModelDataDownloadTimeoutInSeconds(*r.ko.Spec.Specification.StartupParameters.ModelDataDownloadTimeoutInSeconds)
			}
			f3.SetStartupParameters(f3f3)
		}
		res.SetSpecification(f3)
	}
	if r.ko.Spec.Tags != nil {
		f4 := []*svcsdk.Tag{}
		for _, f4iter := range r.ko.Spec.Tags {
			f4elem := &svcsdk.Tag{}
			if f4iter.Key != nil {
				f4elem.SetKey(*f4iter.Key)
			}
			if f4iter.Value != nil {
				f4elem.SetValue(*f4iter.Value)
			}
			f4 = append(f4, f4elem)
		}
		res.SetTags(f4)
	}
	if r.ko.Spec.VariantName != nil {
		res.SetVariantName(*r.ko.Spec.VariantName)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	if err = rm.requeueUntilCanModify(ctx, latest); err != nil {
		return nil, err
	}

	if err = rm.customUpdateInferenceComponentPreChecks(ctx, desired, latest, delta); err != nil {
		return nil, err
	}

	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.UpdateInferenceComponentOutput
	_ = resp
	resp, err = rm.sdkapi.UpdateInferenceComponentWithContext(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdateInferenceComponent", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.InferenceComponentArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.InferenceComponentArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	rm.setStatusDefaults(ko)
	if err = rm.customUpdateInferenceComponentSetOutput(ko); err != nil {
		return nil, err
	}
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.UpdateInferenceComponentInput, error) {
	res := &svcsdk.UpdateInferenceComponentInput{}

	if r.ko.Spec.InferenceComponentName != nil {
		res.SetInferenceComponentName(*r.ko.Spec.InferenceComponentName)
	}
	if r.ko.Spec.RuntimeConfig != nil {
		f1 := &svcsdk.InferenceComponentRuntimeConfig{}
		if r.ko.Spec.RuntimeConfig.CopyCount != nil {
			f1.SetCopyCount(*r.ko.Spec.RuntimeConfig.CopyCount)
		}
		res.SetRuntimeConfig(f1)
	}
	if r.ko.Spec.Specification != nil {
		f2 := &svcsdk.InferenceComponentSpecification{}
		if r.ko.Spec.Specification.ComputeResourceRequirements != nil {
			f2f0 := &svcsdk.InferenceComponentComputeResourceRequirements{}
			if r.ko.Spec.Specification.ComputeResourceRequirements.MaxMemoryRequiredInMb != nil {
				f2f0.SetMaxMemoryRequiredInMb(*r.ko.Spec.Specification.ComputeResourceRequirements.MaxMemoryRequiredInMb)
			}
			if r.ko.Spec.Specification.ComputeResourceRequirements.MinMemoryRequiredInMb != nil {
				f2f0.SetMinMemoryRequiredInMb(*r.ko.Spec.Specification.ComputeResourceRequirements.MinMemoryRequiredInMb)
			}
			if r.ko.Spec.Specification.ComputeResourceRequirements.NumberOfAcceleratorDevicesRequired != nil {
				f2f0.SetNumberOfAcceleratorDevicesRequired(*r.ko.Spec.Specification.ComputeResourceRequirements.NumberOfAcceleratorDevicesRequired)
			}
			if r.ko.Spec.Specification.ComputeResourceRequirements.NumberOfCPUCoresRequired != nil {
				f2f0.SetNumberOfCpuCoresRequired(*r.ko.Spec.Specification.ComputeResourceRequirements.NumberOfCPUCoresRequired)
			}
			f2.SetComputeResourceRequirements(f2f0)
		}
		if r.ko.Spec.Specification.Container != nil {
			f2f1 := &svcsdk.InferenceComponentContainerSpecification{}
			if r.ko.Spec.Specification.Container.ArtifactURL != nil {
				f2f1.SetArtifactUrl(*r.ko.Spec.Specification.Container.ArtifactURL)
			}
			if r.ko.Spec.Specification.Container.Environment != nil {
				f2f1f1 := map[string]*string{}
				for f2f1f1key, f2f1f1valiter := range r.ko.Spec.Specification.Container.Environment {
					var f2f1f1val string
					f2f1f1val = *f2f1f1valiter
					f2f1f1[f2f1f1key] = &f2f1f1val
				}
				f2f1.SetEnvironment(f2f1f1)
			}
			if r.ko.Spec.Specification.Container.Image != nil {
				f2f1.SetImage(*r.ko.Spec.Specification.Container.Image)
			}
			f2.SetContainer(f2f1)
		}
		if r.ko.Spec.Specification.ModelName != nil {
			f2.SetModelName(*r.ko.Spec.Specification.ModelName)
		}
		if r.ko.Spec.Specification.StartupParameters != nil {
			f2f3 := &svcsdk.InferenceComponentStartupParameters{}
			if r.ko.Spec.Specification.StartupParameters.ContainerStartupHealthCheckTimeoutInSeconds != nil {
				f2f3.SetContainerStartupHealthCheckTimeoutInSeconds(*r.ko.Spec.Specification.StartupParameters.ContainerStartupHealthCheckTimeoutInSeconds)
			}
			if r.ko.Spec.Specification.StartupParameters.ModelDataDownloadTimeoutInSeconds != nil {
				f2f3.SetModelDataDownloadTimeoutInSeconds(*r.ko.Spec.Specification.StartupParameters.ModelDataDownloadTimeoutInSeconds)
			}
			f2.SetStartupParameters(f2f3)
		}
		res.SetSpecification(f2)
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	if err = rm.requeueUntilCanModify(ctx, r); err != nil {
		return r, err
	}

	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteInferenceComponentOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteInferenceComponentWithContext(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteInferenceComponent", err)

	if err == nil {
		if observed, err := rm.sdkFind(ctx, r); err != ackerr.NotFound {
			if err != nil {
				return nil, err
			}
			r.SetStatus(observed)
			return r, requeueWaitWhileDeleting
		}
	}

	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteInferenceComponentInput, error) {
	res := &svcsdk.DeleteInferenceComponentInput{}

	if r.ko.Spec.InferenceComponentName != nil {
		res.SetInferenceComponentName(*r.ko.Spec.InferenceComponentName)
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.InferenceComponent,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	if syncCondition == nil && onSuccess {
		syncCondition = &ackv1alpha1.Condition{
			Type:   ackv1alpha1.ConditionTypeResourceSynced,
			Status: corev1.ConditionTrue,
		}
		ko.Status.Conditions = append(ko.Status.Conditions, syncCondition)
	}
	// custom update conditions
	customUpdate := rm.CustomUpdateConditions(ko, r, err)
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil || customUpdate {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}
	awsErr, ok := ackerr.AWSError(err)
	if !ok {
		return false
	}
	switch awsErr.Code() {
	case "InvalidParameterCombination",
		"InvalidParameterValue",
		"MissingParameter",
		"InferenceComponentUpdateError":
		return true
	default:
		return false
	}
}
