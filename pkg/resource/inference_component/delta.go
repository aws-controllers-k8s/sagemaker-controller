// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package inference_component

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktags "github.com/aws-controllers-k8s/runtime/pkg/tags"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
	_ = &acktags.Tags{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}

	if ackcompare.HasNilDifference(a.ko.Spec.EndpointName, b.ko.Spec.EndpointName) {
		delta.Add("Spec.EndpointName", a.ko.Spec.EndpointName, b.ko.Spec.EndpointName)
	} else if a.ko.Spec.EndpointName != nil && b.ko.Spec.EndpointName != nil {
		if *a.ko.Spec.EndpointName != *b.ko.Spec.EndpointName {
			delta.Add("Spec.EndpointName", a.ko.Spec.EndpointName, b.ko.Spec.EndpointName)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.InferenceComponentName, b.ko.Spec.InferenceComponentName) {
		delta.Add("Spec.InferenceComponentName", a.ko.Spec.InferenceComponentName, b.ko.Spec.InferenceComponentName)
	} else if a.ko.Spec.InferenceComponentName != nil && b.ko.Spec.InferenceComponentName != nil {
		if *a.ko.Spec.InferenceComponentName != *b.ko.Spec.InferenceComponentName {
			delta.Add("Spec.InferenceComponentName", a.ko.Spec.InferenceComponentName, b.ko.Spec.InferenceComponentName)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.RuntimeConfig, b.ko.Spec.RuntimeConfig) {
		delta.Add("Spec.RuntimeConfig", a.ko.Spec.RuntimeConfig, b.ko.Spec.RuntimeConfig)
	} else if a.ko.Spec.RuntimeConfig != nil && b.ko.Spec.RuntimeConfig != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.RuntimeConfig.CopyCount, b.ko.Spec.RuntimeConfig.CopyCount) {
			delta.Add("Spec.RuntimeConfig.CopyCount", a.ko.Spec.RuntimeConfig.CopyCount, b.ko.Spec.RuntimeConfig.CopyCount)
		} else if a.ko.Spec.RuntimeConfig.CopyCount != nil && b.ko.Spec.RuntimeConfig.CopyCount != nil {
			if *a.ko.Spec.RuntimeConfig.CopyCount != *b.ko.Spec.RuntimeConfig.CopyCount {
				delta.Add("Spec.RuntimeConfig.CopyCount", a.ko.Spec.RuntimeConfig.CopyCount, b.ko.Spec.RuntimeConfig.CopyCount)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Specification, b.ko.Spec.Specification) {
		delta.Add("Spec.Specification", a.ko.Spec.Specification, b.ko.Spec.Specification)
	} else if a.ko.Spec.Specification != nil && b.ko.Spec.Specification != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.Specification.ComputeResourceRequirements, b.ko.Spec.Specification.ComputeResourceRequirements) {
			delta.Add("Spec.Specification.ComputeResourceRequirements", a.ko.Spec.Specification.ComputeResourceRequirements, b.ko.Spec.Specification.ComputeResourceRequirements)
		} else if a.ko.Spec.Specification.ComputeResourceRequirements != nil && b.ko.Spec.Specification.ComputeResourceRequirements != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.Specification.ComputeResourceRequirements.MaxMemoryRequiredInMb, b.ko.Spec.Specification.ComputeResourceRequirements.MaxMemoryRequiredInMb) {
				delta.Add("Spec.Specification.ComputeResourceRequirements.MaxMemoryRequiredInMb", a.ko.Spec.Specification.ComputeResourceRequirements.MaxMemoryRequiredInMb, b.ko.Spec.Specification.ComputeResourceRequirements.MaxMemoryRequiredInMb)
			} else if a.ko.Spec.Specification.ComputeResourceRequirements.MaxMemoryRequiredInMb != nil && b.ko.Spec.Specification.ComputeResourceRequirements.MaxMemoryRequiredInMb != nil {
				if *a.ko.Spec.Specification.ComputeResourceRequirements.MaxMemoryRequiredInMb != *b.ko.Spec.Specification.ComputeResourceRequirements.MaxMemoryRequiredInMb {
					delta.Add("Spec.Specification.ComputeResourceRequirements.MaxMemoryRequiredInMb", a.ko.Spec.Specification.ComputeResourceRequirements.MaxMemoryRequiredInMb, b.ko.Spec.Specification.ComputeResourceRequirements.MaxMemoryRequiredInMb)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.Specification.ComputeResourceRequirements.MinMemoryRequiredInMb, b.ko.Spec.Specification.ComputeResourceRequirements.MinMemoryRequiredInMb) {
				delta.Add("Spec.Specification.ComputeResourceRequirements.MinMemoryRequiredInMb", a.ko.Spec.Specification.ComputeResourceRequirements.MinMemoryRequiredInMb, b.ko.Spec.Specification.ComputeResourceRequirements.MinMemoryRequiredInMb)
			} else if a.ko.Spec.Specification.ComputeResourceRequirements.MinMemoryRequiredInMb != nil && b.ko.Spec.Specification.ComputeResourceRequirements.MinMemoryRequiredInMb != nil {
				if *a.ko.Spec.Specification.ComputeResourceRequirements.MinMemoryRequiredInMb != *b.ko.Spec.Specification.ComputeResourceRequirements.MinMemoryRequiredInMb {
					delta.Add("Spec.Specification.ComputeResourceRequirements.MinMemoryRequiredInMb", a.ko.Spec.Specification.ComputeResourceRequirements.MinMemoryRequiredInMb, b.ko.Spec.Specification.ComputeResourceRequirements.MinMemoryRequiredInMb)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.Specification.ComputeResourceRequirements.NumberOfAcceleratorDevicesRequired, b.ko.Spec.Specification.ComputeResourceRequirements.NumberOfAcceleratorDevicesRequired) {
				delta.Add("Spec.Specification.ComputeResourceRequirements.NumberOfAcceleratorDevicesRequired", a.ko.Spec.Specification.ComputeResourceRequirements.NumberOfAcceleratorDevicesRequired, b.ko.Spec.Specification.ComputeResourceRequirements.NumberOfAcceleratorDevicesRequired)
			} else if a.ko.Spec.Specification.ComputeResourceRequirements.NumberOfAcceleratorDevicesRequired != nil && b.ko.Spec.Specification.ComputeResourceRequirements.NumberOfAcceleratorDevicesRequired != nil {
				if *a.ko.Spec.Specification.ComputeResourceRequirements.NumberOfAcceleratorDevicesRequired != *b.ko.Spec.Specification.ComputeResourceRequirements.NumberOfAcceleratorDevicesRequired {
					delta.Add("Spec.Specification.ComputeResourceRequirements.NumberOfAcceleratorDevicesRequired", a.ko.Spec.Specification.ComputeResourceRequirements.NumberOfAcceleratorDevicesRequired, b.ko.Spec.Specification.ComputeResourceRequirements.NumberOfAcceleratorDevicesRequired)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.Specification.ComputeResourceRequirements.NumberOfCPUCoresRequired, b.ko.Spec.Specification.ComputeResourceRequirements.NumberOfCPUCoresRequired) {
				delta.Add("Spec.Specification.ComputeResourceRequirements.NumberOfCPUCoresRequired", a.ko.Spec.Specification.ComputeResourceRequirements.NumberOfCPUCoresRequired, b.ko.Spec.Specification.ComputeResourceRequirements.NumberOfCPUCoresRequired)
			} else if a.ko.Spec.Specification.ComputeResourceRequirements.NumberOfCPUCoresRequired != nil && b.ko.Spec.Specification.ComputeResourceRequirements.NumberOfCPUCoresRequired != nil {
				if *a.ko.Spec.Specification.ComputeResourceRequirements.NumberOfCPUCoresRequired != *b.ko.Spec.Specification.ComputeResourceRequirements.NumberOfCPUCoresRequired {
					delta.Add("Spec.Specification.ComputeResourceRequirements.NumberOfCPUCoresRequired", a.ko.Spec.Specification.ComputeResourceRequirements.NumberOfCPUCoresRequired, b.ko.Spec.Specification.ComputeResourceRequirements.NumberOfCPUCoresRequired)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.Specification.Container, b.ko.Spec.Specification.Container) {
			delta.Add("Spec.Specification.Container", a.ko.Spec.Specification.Container, b.ko.Spec.Specification.Container)
		} else if a.ko.Spec.Specification.Container != nil && b.ko.Spec.Specification.Container != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.Specification.Container.ArtifactURL, b.ko.Spec.Specification.Container.ArtifactURL) {
				delta.Add("Spec.Specification.Container.ArtifactURL", a.ko.Spec.Specification.Container.ArtifactURL, b.ko.Spec.Specification.Container.ArtifactURL)
			} else if a.ko.Spec.Specification.Container.ArtifactURL != nil && b.ko.Spec.Specification.Container.ArtifactURL != nil {
				if *a.ko.Spec.Specification.Container.ArtifactURL != *b.ko.Spec.Specification.Container.ArtifactURL {
					delta.Add("Spec.Specification.Container.ArtifactURL", a.ko.Spec.Specification.Container.ArtifactURL, b.ko.Spec.Specification.Container.ArtifactURL)
				}
			}
			if len(a.ko.Spec.Specification.Container.Environment) != len(b.ko.Spec.Specification.Container.Environment) {
				delta.Add("Spec.Specification.Container.Environment", a.ko.Spec.Specification.Container.Environment, b.ko.Spec.Specification.Container.Environment)
			} else if len(a.ko.Spec.Specification.Container.Environment) > 0 {
				if !ackcompare.MapStringStringPEqual(a.ko.Spec.Specification.Container.Environment, b.ko.Spec.Specification.Container.Environment) {
					delta.Add("Spec.Specification.Container.Environment", a.ko.Spec.Specification.Container.Environment, b.ko.Spec.Specification.Container.Environment)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.Specification.Container.Image, b.ko.Spec.Specification.Container.Image) {
				delta.Add("Spec.Specification.Container.Image", a.ko.Spec.Specification.Container.Image, b.ko.Spec.Specification.Container.Image)
			} else if a.ko.Spec.Specification.Container.Image != nil && b.ko.Spec.Specification.Container.Image != nil {
				if *a.ko.Spec.Specification.Container.Image != *b.ko.Spec.Specification.Container.Image {
					delta.Add("Spec.Specification.Container.Image", a.ko.Spec.Specification.Container.Image, b.ko.Spec.Specification.Container.Image)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.Specification.ModelName, b.ko.Spec.Specification.ModelName) {
			delta.Add("Spec.Specification.ModelName", a.ko.Spec.Specification.ModelName, b.ko.Spec.Specification.ModelName)
		} else if a.ko.Spec.Specification.ModelName != nil && b.ko.Spec.Specification.ModelName != nil {
			if *a.ko.Spec.Specification.ModelName != *b.ko.Spec.Specification.ModelName {
				delta.Add("Spec.Specification.ModelName", a.ko.Spec.Specification.ModelName, b.ko.Spec.Specification.ModelName)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.Specification.StartupParameters, b.ko.Spec.Specification.StartupParameters) {
			delta.Add("Spec.Specification.StartupParameters", a.ko.Spec.Specification.StartupParameters, b.ko.Spec.Specification.StartupParameters)
		} else if a.ko.Spec.Specification.StartupParameters != nil && b.ko.Spec.Specification.StartupParameters != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.Specification.StartupParameters.ContainerStartupHealthCheckTimeoutInSeconds, b.ko.Spec.Specification.StartupParameters.ContainerStartupHealthCheckTimeoutInSeconds) {
				delta.Add("Spec.Specification.StartupParameters.ContainerStartupHealthCheckTimeoutInSeconds", a.ko.Spec.Specification.StartupParameters.ContainerStartupHealthCheckTimeoutInSeconds, b.ko.Spec.Specification.StartupParameters.ContainerStartupHealthCheckTimeoutInSeconds)
			} else if a.ko.Spec.Specification.StartupParameters.ContainerStartupHealthCheckTimeoutInSeconds != nil && b.ko.Spec.Specification.StartupParameters.ContainerStartupHealthCheckTimeoutInSeconds != nil {
				if *a.ko.Spec.Specification.StartupParameters.ContainerStartupHealthCheckTimeoutInSeconds != *b.ko.Spec.Specification.StartupParameters.ContainerStartupHealthCheckTimeoutInSeconds {
					delta.Add("Spec.Specification.StartupParameters.ContainerStartupHealthCheckTimeoutInSeconds", a.ko.Spec.Specification.StartupParameters.ContainerStartupHealthCheckTimeoutInSeconds, b.ko.Spec.Specification.StartupParameters.ContainerStartupHealthCheckTimeoutInSeconds)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.Specification.StartupParameters.ModelDataDownloadTimeoutInSeconds, b.ko.Spec.Specification.StartupParameters.ModelDataDownloadTimeoutInSeconds) {
				delta.Add("Spec.Specification.StartupParameters.ModelDataDownloadTimeoutInSeconds", a.ko.Spec.Specification.StartupParameters.ModelDataDownloadTimeoutInSeconds, b.ko.Spec.Specification.StartupParameters.ModelDataDownloadTimeoutInSeconds)
			} else if a.ko.Spec.Specification.StartupParameters.ModelDataDownloadTimeoutInSeconds != nil && b.ko.Spec.Specification.StartupParameters.ModelDataDownloadTimeoutInSeconds != nil {
				if *a.ko.Spec.Specification.StartupParameters.ModelDataDownloadTimeoutInSeconds != *b.ko.Spec.Specification.StartupParameters.ModelDataDownloadTimeoutInSeconds {
					delta.Add("Spec.Specification.StartupParameters.ModelDataDownloadTimeoutInSeconds", a.ko.Spec.Specification.StartupParameters.ModelDataDownloadTimeoutInSeconds, b.ko.Spec.Specification.StartupParameters.ModelDataDownloadTimeoutInSeconds)
				}
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.VariantName, b.ko.Spec.VariantName) {
		delta.Add("Spec.VariantName", a.ko.Spec.VariantName, b.ko.Spec.VariantName)
	} else if a.ko.Spec.VariantName != nil && b.ko.Spec.VariantName != nil {
		if *a.ko.Spec.VariantName != *b.ko.Spec.VariantName {
			delta.Add("Spec.VariantName", a.ko.Spec.VariantName, b.ko.Spec.VariantName)
		}
	}

	return delta
}
