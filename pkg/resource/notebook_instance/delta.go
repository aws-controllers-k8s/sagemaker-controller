// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package notebook_instance

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktags "github.com/aws-controllers-k8s/runtime/pkg/tags"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
	_ = &acktags.Tags{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}
	customSetDefaults(a, b)

	if len(a.ko.Spec.AcceleratorTypes) != len(b.ko.Spec.AcceleratorTypes) {
		delta.Add("Spec.AcceleratorTypes", a.ko.Spec.AcceleratorTypes, b.ko.Spec.AcceleratorTypes)
	} else if len(a.ko.Spec.AcceleratorTypes) > 0 {
		if !ackcompare.SliceStringPEqual(a.ko.Spec.AcceleratorTypes, b.ko.Spec.AcceleratorTypes) {
			delta.Add("Spec.AcceleratorTypes", a.ko.Spec.AcceleratorTypes, b.ko.Spec.AcceleratorTypes)
		}
	}
	if len(a.ko.Spec.AdditionalCodeRepositories) != len(b.ko.Spec.AdditionalCodeRepositories) {
		delta.Add("Spec.AdditionalCodeRepositories", a.ko.Spec.AdditionalCodeRepositories, b.ko.Spec.AdditionalCodeRepositories)
	} else if len(a.ko.Spec.AdditionalCodeRepositories) > 0 {
		if !ackcompare.SliceStringPEqual(a.ko.Spec.AdditionalCodeRepositories, b.ko.Spec.AdditionalCodeRepositories) {
			delta.Add("Spec.AdditionalCodeRepositories", a.ko.Spec.AdditionalCodeRepositories, b.ko.Spec.AdditionalCodeRepositories)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.DefaultCodeRepository, b.ko.Spec.DefaultCodeRepository) {
		delta.Add("Spec.DefaultCodeRepository", a.ko.Spec.DefaultCodeRepository, b.ko.Spec.DefaultCodeRepository)
	} else if a.ko.Spec.DefaultCodeRepository != nil && b.ko.Spec.DefaultCodeRepository != nil {
		if *a.ko.Spec.DefaultCodeRepository != *b.ko.Spec.DefaultCodeRepository {
			delta.Add("Spec.DefaultCodeRepository", a.ko.Spec.DefaultCodeRepository, b.ko.Spec.DefaultCodeRepository)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.DirectInternetAccess, b.ko.Spec.DirectInternetAccess) {
		delta.Add("Spec.DirectInternetAccess", a.ko.Spec.DirectInternetAccess, b.ko.Spec.DirectInternetAccess)
	} else if a.ko.Spec.DirectInternetAccess != nil && b.ko.Spec.DirectInternetAccess != nil {
		if *a.ko.Spec.DirectInternetAccess != *b.ko.Spec.DirectInternetAccess {
			delta.Add("Spec.DirectInternetAccess", a.ko.Spec.DirectInternetAccess, b.ko.Spec.DirectInternetAccess)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.InstanceType, b.ko.Spec.InstanceType) {
		delta.Add("Spec.InstanceType", a.ko.Spec.InstanceType, b.ko.Spec.InstanceType)
	} else if a.ko.Spec.InstanceType != nil && b.ko.Spec.InstanceType != nil {
		if *a.ko.Spec.InstanceType != *b.ko.Spec.InstanceType {
			delta.Add("Spec.InstanceType", a.ko.Spec.InstanceType, b.ko.Spec.InstanceType)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.KMSKeyID, b.ko.Spec.KMSKeyID) {
		delta.Add("Spec.KMSKeyID", a.ko.Spec.KMSKeyID, b.ko.Spec.KMSKeyID)
	} else if a.ko.Spec.KMSKeyID != nil && b.ko.Spec.KMSKeyID != nil {
		if *a.ko.Spec.KMSKeyID != *b.ko.Spec.KMSKeyID {
			delta.Add("Spec.KMSKeyID", a.ko.Spec.KMSKeyID, b.ko.Spec.KMSKeyID)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.LifecycleConfigName, b.ko.Spec.LifecycleConfigName) {
		delta.Add("Spec.LifecycleConfigName", a.ko.Spec.LifecycleConfigName, b.ko.Spec.LifecycleConfigName)
	} else if a.ko.Spec.LifecycleConfigName != nil && b.ko.Spec.LifecycleConfigName != nil {
		if *a.ko.Spec.LifecycleConfigName != *b.ko.Spec.LifecycleConfigName {
			delta.Add("Spec.LifecycleConfigName", a.ko.Spec.LifecycleConfigName, b.ko.Spec.LifecycleConfigName)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.NotebookInstanceName, b.ko.Spec.NotebookInstanceName) {
		delta.Add("Spec.NotebookInstanceName", a.ko.Spec.NotebookInstanceName, b.ko.Spec.NotebookInstanceName)
	} else if a.ko.Spec.NotebookInstanceName != nil && b.ko.Spec.NotebookInstanceName != nil {
		if *a.ko.Spec.NotebookInstanceName != *b.ko.Spec.NotebookInstanceName {
			delta.Add("Spec.NotebookInstanceName", a.ko.Spec.NotebookInstanceName, b.ko.Spec.NotebookInstanceName)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.PlatformIdentifier, b.ko.Spec.PlatformIdentifier) {
		delta.Add("Spec.PlatformIdentifier", a.ko.Spec.PlatformIdentifier, b.ko.Spec.PlatformIdentifier)
	} else if a.ko.Spec.PlatformIdentifier != nil && b.ko.Spec.PlatformIdentifier != nil {
		if *a.ko.Spec.PlatformIdentifier != *b.ko.Spec.PlatformIdentifier {
			delta.Add("Spec.PlatformIdentifier", a.ko.Spec.PlatformIdentifier, b.ko.Spec.PlatformIdentifier)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.RoleARN, b.ko.Spec.RoleARN) {
		delta.Add("Spec.RoleARN", a.ko.Spec.RoleARN, b.ko.Spec.RoleARN)
	} else if a.ko.Spec.RoleARN != nil && b.ko.Spec.RoleARN != nil {
		if *a.ko.Spec.RoleARN != *b.ko.Spec.RoleARN {
			delta.Add("Spec.RoleARN", a.ko.Spec.RoleARN, b.ko.Spec.RoleARN)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.RootAccess, b.ko.Spec.RootAccess) {
		delta.Add("Spec.RootAccess", a.ko.Spec.RootAccess, b.ko.Spec.RootAccess)
	} else if a.ko.Spec.RootAccess != nil && b.ko.Spec.RootAccess != nil {
		if *a.ko.Spec.RootAccess != *b.ko.Spec.RootAccess {
			delta.Add("Spec.RootAccess", a.ko.Spec.RootAccess, b.ko.Spec.RootAccess)
		}
	}
	if len(a.ko.Spec.SecurityGroupIDs) != len(b.ko.Spec.SecurityGroupIDs) {
		delta.Add("Spec.SecurityGroupIDs", a.ko.Spec.SecurityGroupIDs, b.ko.Spec.SecurityGroupIDs)
	} else if len(a.ko.Spec.SecurityGroupIDs) > 0 {
		if !ackcompare.SliceStringPEqual(a.ko.Spec.SecurityGroupIDs, b.ko.Spec.SecurityGroupIDs) {
			delta.Add("Spec.SecurityGroupIDs", a.ko.Spec.SecurityGroupIDs, b.ko.Spec.SecurityGroupIDs)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.SubnetID, b.ko.Spec.SubnetID) {
		delta.Add("Spec.SubnetID", a.ko.Spec.SubnetID, b.ko.Spec.SubnetID)
	} else if a.ko.Spec.SubnetID != nil && b.ko.Spec.SubnetID != nil {
		if *a.ko.Spec.SubnetID != *b.ko.Spec.SubnetID {
			delta.Add("Spec.SubnetID", a.ko.Spec.SubnetID, b.ko.Spec.SubnetID)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.VolumeSizeInGB, b.ko.Spec.VolumeSizeInGB) {
		delta.Add("Spec.VolumeSizeInGB", a.ko.Spec.VolumeSizeInGB, b.ko.Spec.VolumeSizeInGB)
	} else if a.ko.Spec.VolumeSizeInGB != nil && b.ko.Spec.VolumeSizeInGB != nil {
		if *a.ko.Spec.VolumeSizeInGB != *b.ko.Spec.VolumeSizeInGB {
			delta.Add("Spec.VolumeSizeInGB", a.ko.Spec.VolumeSizeInGB, b.ko.Spec.VolumeSizeInGB)
		}
	}

	return delta
}
