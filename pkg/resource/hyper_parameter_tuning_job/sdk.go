// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package hyper_parameter_tuning_job

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/sagemaker"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/sagemaker-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.SageMaker{}
	_ = &svcapitypes.HyperParameterTuningJob{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.DescribeHyperParameterTuningJobOutput
	resp, err = rm.sdkapi.DescribeHyperParameterTuningJobWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "DescribeHyperParameterTuningJob", err)
	if err != nil {
		if reqErr, ok := ackerr.AWSRequestFailure(err); ok && reqErr.StatusCode() == 404 {
			return nil, ackerr.NotFound
		}
		if awsErr, ok := ackerr.AWSError(err); ok && awsErr.Code() == "ResourceNotFound" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.Autotune != nil {
		f0 := &svcapitypes.Autotune{}
		if resp.Autotune.Mode != nil {
			f0.Mode = resp.Autotune.Mode
		}
		ko.Spec.Autotune = f0
	} else {
		ko.Spec.Autotune = nil
	}
	if resp.BestTrainingJob != nil {
		f1 := &svcapitypes.HyperParameterTrainingJobSummary{}
		if resp.BestTrainingJob.CreationTime != nil {
			f1.CreationTime = &metav1.Time{*resp.BestTrainingJob.CreationTime}
		}
		if resp.BestTrainingJob.FailureReason != nil {
			f1.FailureReason = resp.BestTrainingJob.FailureReason
		}
		if resp.BestTrainingJob.FinalHyperParameterTuningJobObjectiveMetric != nil {
			f1f2 := &svcapitypes.FinalHyperParameterTuningJobObjectiveMetric{}
			if resp.BestTrainingJob.FinalHyperParameterTuningJobObjectiveMetric.MetricName != nil {
				f1f2.MetricName = resp.BestTrainingJob.FinalHyperParameterTuningJobObjectiveMetric.MetricName
			}
			if resp.BestTrainingJob.FinalHyperParameterTuningJobObjectiveMetric.Type != nil {
				f1f2.Type = resp.BestTrainingJob.FinalHyperParameterTuningJobObjectiveMetric.Type
			}
			if resp.BestTrainingJob.FinalHyperParameterTuningJobObjectiveMetric.Value != nil {
				f1f2.Value = resp.BestTrainingJob.FinalHyperParameterTuningJobObjectiveMetric.Value
			}
			f1.FinalHyperParameterTuningJobObjectiveMetric = f1f2
		}
		if resp.BestTrainingJob.ObjectiveStatus != nil {
			f1.ObjectiveStatus = resp.BestTrainingJob.ObjectiveStatus
		}
		if resp.BestTrainingJob.TrainingEndTime != nil {
			f1.TrainingEndTime = &metav1.Time{*resp.BestTrainingJob.TrainingEndTime}
		}
		if resp.BestTrainingJob.TrainingJobArn != nil {
			f1.TrainingJobARN = resp.BestTrainingJob.TrainingJobArn
		}
		if resp.BestTrainingJob.TrainingJobDefinitionName != nil {
			f1.TrainingJobDefinitionName = resp.BestTrainingJob.TrainingJobDefinitionName
		}
		if resp.BestTrainingJob.TrainingJobName != nil {
			f1.TrainingJobName = resp.BestTrainingJob.TrainingJobName
		}
		if resp.BestTrainingJob.TrainingJobStatus != nil {
			f1.TrainingJobStatus = resp.BestTrainingJob.TrainingJobStatus
		}
		if resp.BestTrainingJob.TrainingStartTime != nil {
			f1.TrainingStartTime = &metav1.Time{*resp.BestTrainingJob.TrainingStartTime}
		}
		if resp.BestTrainingJob.TunedHyperParameters != nil {
			f1f10 := map[string]*string{}
			for f1f10key, f1f10valiter := range resp.BestTrainingJob.TunedHyperParameters {
				var f1f10val string
				f1f10val = *f1f10valiter
				f1f10[f1f10key] = &f1f10val
			}
			f1.TunedHyperParameters = f1f10
		}
		if resp.BestTrainingJob.TuningJobName != nil {
			f1.TuningJobName = resp.BestTrainingJob.TuningJobName
		}
		ko.Status.BestTrainingJob = f1
	} else {
		ko.Status.BestTrainingJob = nil
	}
	if resp.FailureReason != nil {
		ko.Status.FailureReason = resp.FailureReason
	} else {
		ko.Status.FailureReason = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.HyperParameterTuningJobArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.HyperParameterTuningJobArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.HyperParameterTuningJobConfig != nil {
		f7 := &svcapitypes.HyperParameterTuningJobConfig{}
		if resp.HyperParameterTuningJobConfig.HyperParameterTuningJobObjective != nil {
			f7f0 := &svcapitypes.HyperParameterTuningJobObjective{}
			if resp.HyperParameterTuningJobConfig.HyperParameterTuningJobObjective.MetricName != nil {
				f7f0.MetricName = resp.HyperParameterTuningJobConfig.HyperParameterTuningJobObjective.MetricName
			}
			if resp.HyperParameterTuningJobConfig.HyperParameterTuningJobObjective.Type != nil {
				f7f0.Type = resp.HyperParameterTuningJobConfig.HyperParameterTuningJobObjective.Type
			}
			f7.HyperParameterTuningJobObjective = f7f0
		}
		if resp.HyperParameterTuningJobConfig.ParameterRanges != nil {
			f7f1 := &svcapitypes.ParameterRanges{}
			if resp.HyperParameterTuningJobConfig.ParameterRanges.AutoParameters != nil {
				f7f1f0 := []*svcapitypes.AutoParameter{}
				for _, f7f1f0iter := range resp.HyperParameterTuningJobConfig.ParameterRanges.AutoParameters {
					f7f1f0elem := &svcapitypes.AutoParameter{}
					if f7f1f0iter.Name != nil {
						f7f1f0elem.Name = f7f1f0iter.Name
					}
					if f7f1f0iter.ValueHint != nil {
						f7f1f0elem.ValueHint = f7f1f0iter.ValueHint
					}
					f7f1f0 = append(f7f1f0, f7f1f0elem)
				}
				f7f1.AutoParameters = f7f1f0
			}
			if resp.HyperParameterTuningJobConfig.ParameterRanges.CategoricalParameterRanges != nil {
				f7f1f1 := []*svcapitypes.CategoricalParameterRange{}
				for _, f7f1f1iter := range resp.HyperParameterTuningJobConfig.ParameterRanges.CategoricalParameterRanges {
					f7f1f1elem := &svcapitypes.CategoricalParameterRange{}
					if f7f1f1iter.Name != nil {
						f7f1f1elem.Name = f7f1f1iter.Name
					}
					if f7f1f1iter.Values != nil {
						f7f1f1elemf1 := []*string{}
						for _, f7f1f1elemf1iter := range f7f1f1iter.Values {
							var f7f1f1elemf1elem string
							f7f1f1elemf1elem = *f7f1f1elemf1iter
							f7f1f1elemf1 = append(f7f1f1elemf1, &f7f1f1elemf1elem)
						}
						f7f1f1elem.Values = f7f1f1elemf1
					}
					f7f1f1 = append(f7f1f1, f7f1f1elem)
				}
				f7f1.CategoricalParameterRanges = f7f1f1
			}
			if resp.HyperParameterTuningJobConfig.ParameterRanges.ContinuousParameterRanges != nil {
				f7f1f2 := []*svcapitypes.ContinuousParameterRange{}
				for _, f7f1f2iter := range resp.HyperParameterTuningJobConfig.ParameterRanges.ContinuousParameterRanges {
					f7f1f2elem := &svcapitypes.ContinuousParameterRange{}
					if f7f1f2iter.MaxValue != nil {
						f7f1f2elem.MaxValue = f7f1f2iter.MaxValue
					}
					if f7f1f2iter.MinValue != nil {
						f7f1f2elem.MinValue = f7f1f2iter.MinValue
					}
					if f7f1f2iter.Name != nil {
						f7f1f2elem.Name = f7f1f2iter.Name
					}
					if f7f1f2iter.ScalingType != nil {
						f7f1f2elem.ScalingType = f7f1f2iter.ScalingType
					}
					f7f1f2 = append(f7f1f2, f7f1f2elem)
				}
				f7f1.ContinuousParameterRanges = f7f1f2
			}
			if resp.HyperParameterTuningJobConfig.ParameterRanges.IntegerParameterRanges != nil {
				f7f1f3 := []*svcapitypes.IntegerParameterRange{}
				for _, f7f1f3iter := range resp.HyperParameterTuningJobConfig.ParameterRanges.IntegerParameterRanges {
					f7f1f3elem := &svcapitypes.IntegerParameterRange{}
					if f7f1f3iter.MaxValue != nil {
						f7f1f3elem.MaxValue = f7f1f3iter.MaxValue
					}
					if f7f1f3iter.MinValue != nil {
						f7f1f3elem.MinValue = f7f1f3iter.MinValue
					}
					if f7f1f3iter.Name != nil {
						f7f1f3elem.Name = f7f1f3iter.Name
					}
					if f7f1f3iter.ScalingType != nil {
						f7f1f3elem.ScalingType = f7f1f3iter.ScalingType
					}
					f7f1f3 = append(f7f1f3, f7f1f3elem)
				}
				f7f1.IntegerParameterRanges = f7f1f3
			}
			f7.ParameterRanges = f7f1
		}
		if resp.HyperParameterTuningJobConfig.ResourceLimits != nil {
			f7f2 := &svcapitypes.ResourceLimits{}
			if resp.HyperParameterTuningJobConfig.ResourceLimits.MaxNumberOfTrainingJobs != nil {
				f7f2.MaxNumberOfTrainingJobs = resp.HyperParameterTuningJobConfig.ResourceLimits.MaxNumberOfTrainingJobs
			}
			if resp.HyperParameterTuningJobConfig.ResourceLimits.MaxParallelTrainingJobs != nil {
				f7f2.MaxParallelTrainingJobs = resp.HyperParameterTuningJobConfig.ResourceLimits.MaxParallelTrainingJobs
			}
			f7.ResourceLimits = f7f2
		}
		if resp.HyperParameterTuningJobConfig.Strategy != nil {
			f7.Strategy = resp.HyperParameterTuningJobConfig.Strategy
		}
		if resp.HyperParameterTuningJobConfig.TrainingJobEarlyStoppingType != nil {
			f7.TrainingJobEarlyStoppingType = resp.HyperParameterTuningJobConfig.TrainingJobEarlyStoppingType
		}
		if resp.HyperParameterTuningJobConfig.TuningJobCompletionCriteria != nil {
			f7f5 := &svcapitypes.TuningJobCompletionCriteria{}
			if resp.HyperParameterTuningJobConfig.TuningJobCompletionCriteria.TargetObjectiveMetricValue != nil {
				f7f5.TargetObjectiveMetricValue = resp.HyperParameterTuningJobConfig.TuningJobCompletionCriteria.TargetObjectiveMetricValue
			}
			f7.TuningJobCompletionCriteria = f7f5
		}
		ko.Spec.HyperParameterTuningJobConfig = f7
	} else {
		ko.Spec.HyperParameterTuningJobConfig = nil
	}
	if resp.HyperParameterTuningJobName != nil {
		ko.Spec.HyperParameterTuningJobName = resp.HyperParameterTuningJobName
	} else {
		ko.Spec.HyperParameterTuningJobName = nil
	}
	if resp.HyperParameterTuningJobStatus != nil {
		ko.Status.HyperParameterTuningJobStatus = resp.HyperParameterTuningJobStatus
	} else {
		ko.Status.HyperParameterTuningJobStatus = nil
	}
	if resp.OverallBestTrainingJob != nil {
		f12 := &svcapitypes.HyperParameterTrainingJobSummary{}
		if resp.OverallBestTrainingJob.CreationTime != nil {
			f12.CreationTime = &metav1.Time{*resp.OverallBestTrainingJob.CreationTime}
		}
		if resp.OverallBestTrainingJob.FailureReason != nil {
			f12.FailureReason = resp.OverallBestTrainingJob.FailureReason
		}
		if resp.OverallBestTrainingJob.FinalHyperParameterTuningJobObjectiveMetric != nil {
			f12f2 := &svcapitypes.FinalHyperParameterTuningJobObjectiveMetric{}
			if resp.OverallBestTrainingJob.FinalHyperParameterTuningJobObjectiveMetric.MetricName != nil {
				f12f2.MetricName = resp.OverallBestTrainingJob.FinalHyperParameterTuningJobObjectiveMetric.MetricName
			}
			if resp.OverallBestTrainingJob.FinalHyperParameterTuningJobObjectiveMetric.Type != nil {
				f12f2.Type = resp.OverallBestTrainingJob.FinalHyperParameterTuningJobObjectiveMetric.Type
			}
			if resp.OverallBestTrainingJob.FinalHyperParameterTuningJobObjectiveMetric.Value != nil {
				f12f2.Value = resp.OverallBestTrainingJob.FinalHyperParameterTuningJobObjectiveMetric.Value
			}
			f12.FinalHyperParameterTuningJobObjectiveMetric = f12f2
		}
		if resp.OverallBestTrainingJob.ObjectiveStatus != nil {
			f12.ObjectiveStatus = resp.OverallBestTrainingJob.ObjectiveStatus
		}
		if resp.OverallBestTrainingJob.TrainingEndTime != nil {
			f12.TrainingEndTime = &metav1.Time{*resp.OverallBestTrainingJob.TrainingEndTime}
		}
		if resp.OverallBestTrainingJob.TrainingJobArn != nil {
			f12.TrainingJobARN = resp.OverallBestTrainingJob.TrainingJobArn
		}
		if resp.OverallBestTrainingJob.TrainingJobDefinitionName != nil {
			f12.TrainingJobDefinitionName = resp.OverallBestTrainingJob.TrainingJobDefinitionName
		}
		if resp.OverallBestTrainingJob.TrainingJobName != nil {
			f12.TrainingJobName = resp.OverallBestTrainingJob.TrainingJobName
		}
		if resp.OverallBestTrainingJob.TrainingJobStatus != nil {
			f12.TrainingJobStatus = resp.OverallBestTrainingJob.TrainingJobStatus
		}
		if resp.OverallBestTrainingJob.TrainingStartTime != nil {
			f12.TrainingStartTime = &metav1.Time{*resp.OverallBestTrainingJob.TrainingStartTime}
		}
		if resp.OverallBestTrainingJob.TunedHyperParameters != nil {
			f12f10 := map[string]*string{}
			for f12f10key, f12f10valiter := range resp.OverallBestTrainingJob.TunedHyperParameters {
				var f12f10val string
				f12f10val = *f12f10valiter
				f12f10[f12f10key] = &f12f10val
			}
			f12.TunedHyperParameters = f12f10
		}
		if resp.OverallBestTrainingJob.TuningJobName != nil {
			f12.TuningJobName = resp.OverallBestTrainingJob.TuningJobName
		}
		ko.Status.OverallBestTrainingJob = f12
	} else {
		ko.Status.OverallBestTrainingJob = nil
	}
	if resp.TrainingJobDefinition != nil {
		f13 := &svcapitypes.HyperParameterTrainingJobDefinition{}
		if resp.TrainingJobDefinition.AlgorithmSpecification != nil {
			f13f0 := &svcapitypes.HyperParameterAlgorithmSpecification{}
			if resp.TrainingJobDefinition.AlgorithmSpecification.AlgorithmName != nil {
				f13f0.AlgorithmName = resp.TrainingJobDefinition.AlgorithmSpecification.AlgorithmName
			}
			if resp.TrainingJobDefinition.AlgorithmSpecification.MetricDefinitions != nil {
				f13f0f1 := []*svcapitypes.MetricDefinition{}
				for _, f13f0f1iter := range resp.TrainingJobDefinition.AlgorithmSpecification.MetricDefinitions {
					f13f0f1elem := &svcapitypes.MetricDefinition{}
					if f13f0f1iter.Name != nil {
						f13f0f1elem.Name = f13f0f1iter.Name
					}
					if f13f0f1iter.Regex != nil {
						f13f0f1elem.Regex = f13f0f1iter.Regex
					}
					f13f0f1 = append(f13f0f1, f13f0f1elem)
				}
				f13f0.MetricDefinitions = f13f0f1
			}
			if resp.TrainingJobDefinition.AlgorithmSpecification.TrainingImage != nil {
				f13f0.TrainingImage = resp.TrainingJobDefinition.AlgorithmSpecification.TrainingImage
			}
			if resp.TrainingJobDefinition.AlgorithmSpecification.TrainingInputMode != nil {
				f13f0.TrainingInputMode = resp.TrainingJobDefinition.AlgorithmSpecification.TrainingInputMode
			}
			f13.AlgorithmSpecification = f13f0
		}
		if resp.TrainingJobDefinition.CheckpointConfig != nil {
			f13f1 := &svcapitypes.CheckpointConfig{}
			if resp.TrainingJobDefinition.CheckpointConfig.LocalPath != nil {
				f13f1.LocalPath = resp.TrainingJobDefinition.CheckpointConfig.LocalPath
			}
			if resp.TrainingJobDefinition.CheckpointConfig.S3Uri != nil {
				f13f1.S3URI = resp.TrainingJobDefinition.CheckpointConfig.S3Uri
			}
			f13.CheckpointConfig = f13f1
		}
		if resp.TrainingJobDefinition.DefinitionName != nil {
			f13.DefinitionName = resp.TrainingJobDefinition.DefinitionName
		}
		if resp.TrainingJobDefinition.EnableInterContainerTrafficEncryption != nil {
			f13.EnableInterContainerTrafficEncryption = resp.TrainingJobDefinition.EnableInterContainerTrafficEncryption
		}
		if resp.TrainingJobDefinition.EnableManagedSpotTraining != nil {
			f13.EnableManagedSpotTraining = resp.TrainingJobDefinition.EnableManagedSpotTraining
		}
		if resp.TrainingJobDefinition.EnableNetworkIsolation != nil {
			f13.EnableNetworkIsolation = resp.TrainingJobDefinition.EnableNetworkIsolation
		}
		if resp.TrainingJobDefinition.HyperParameterRanges != nil {
			f13f6 := &svcapitypes.ParameterRanges{}
			if resp.TrainingJobDefinition.HyperParameterRanges.AutoParameters != nil {
				f13f6f0 := []*svcapitypes.AutoParameter{}
				for _, f13f6f0iter := range resp.TrainingJobDefinition.HyperParameterRanges.AutoParameters {
					f13f6f0elem := &svcapitypes.AutoParameter{}
					if f13f6f0iter.Name != nil {
						f13f6f0elem.Name = f13f6f0iter.Name
					}
					if f13f6f0iter.ValueHint != nil {
						f13f6f0elem.ValueHint = f13f6f0iter.ValueHint
					}
					f13f6f0 = append(f13f6f0, f13f6f0elem)
				}
				f13f6.AutoParameters = f13f6f0
			}
			if resp.TrainingJobDefinition.HyperParameterRanges.CategoricalParameterRanges != nil {
				f13f6f1 := []*svcapitypes.CategoricalParameterRange{}
				for _, f13f6f1iter := range resp.TrainingJobDefinition.HyperParameterRanges.CategoricalParameterRanges {
					f13f6f1elem := &svcapitypes.CategoricalParameterRange{}
					if f13f6f1iter.Name != nil {
						f13f6f1elem.Name = f13f6f1iter.Name
					}
					if f13f6f1iter.Values != nil {
						f13f6f1elemf1 := []*string{}
						for _, f13f6f1elemf1iter := range f13f6f1iter.Values {
							var f13f6f1elemf1elem string
							f13f6f1elemf1elem = *f13f6f1elemf1iter
							f13f6f1elemf1 = append(f13f6f1elemf1, &f13f6f1elemf1elem)
						}
						f13f6f1elem.Values = f13f6f1elemf1
					}
					f13f6f1 = append(f13f6f1, f13f6f1elem)
				}
				f13f6.CategoricalParameterRanges = f13f6f1
			}
			if resp.TrainingJobDefinition.HyperParameterRanges.ContinuousParameterRanges != nil {
				f13f6f2 := []*svcapitypes.ContinuousParameterRange{}
				for _, f13f6f2iter := range resp.TrainingJobDefinition.HyperParameterRanges.ContinuousParameterRanges {
					f13f6f2elem := &svcapitypes.ContinuousParameterRange{}
					if f13f6f2iter.MaxValue != nil {
						f13f6f2elem.MaxValue = f13f6f2iter.MaxValue
					}
					if f13f6f2iter.MinValue != nil {
						f13f6f2elem.MinValue = f13f6f2iter.MinValue
					}
					if f13f6f2iter.Name != nil {
						f13f6f2elem.Name = f13f6f2iter.Name
					}
					if f13f6f2iter.ScalingType != nil {
						f13f6f2elem.ScalingType = f13f6f2iter.ScalingType
					}
					f13f6f2 = append(f13f6f2, f13f6f2elem)
				}
				f13f6.ContinuousParameterRanges = f13f6f2
			}
			if resp.TrainingJobDefinition.HyperParameterRanges.IntegerParameterRanges != nil {
				f13f6f3 := []*svcapitypes.IntegerParameterRange{}
				for _, f13f6f3iter := range resp.TrainingJobDefinition.HyperParameterRanges.IntegerParameterRanges {
					f13f6f3elem := &svcapitypes.IntegerParameterRange{}
					if f13f6f3iter.MaxValue != nil {
						f13f6f3elem.MaxValue = f13f6f3iter.MaxValue
					}
					if f13f6f3iter.MinValue != nil {
						f13f6f3elem.MinValue = f13f6f3iter.MinValue
					}
					if f13f6f3iter.Name != nil {
						f13f6f3elem.Name = f13f6f3iter.Name
					}
					if f13f6f3iter.ScalingType != nil {
						f13f6f3elem.ScalingType = f13f6f3iter.ScalingType
					}
					f13f6f3 = append(f13f6f3, f13f6f3elem)
				}
				f13f6.IntegerParameterRanges = f13f6f3
			}
			f13.HyperParameterRanges = f13f6
		}
		if resp.TrainingJobDefinition.InputDataConfig != nil {
			f13f7 := []*svcapitypes.Channel{}
			for _, f13f7iter := range resp.TrainingJobDefinition.InputDataConfig {
				f13f7elem := &svcapitypes.Channel{}
				if f13f7iter.ChannelName != nil {
					f13f7elem.ChannelName = f13f7iter.ChannelName
				}
				if f13f7iter.CompressionType != nil {
					f13f7elem.CompressionType = f13f7iter.CompressionType
				}
				if f13f7iter.ContentType != nil {
					f13f7elem.ContentType = f13f7iter.ContentType
				}
				if f13f7iter.DataSource != nil {
					f13f7elemf3 := &svcapitypes.DataSource{}
					if f13f7iter.DataSource.FileSystemDataSource != nil {
						f13f7elemf3f0 := &svcapitypes.FileSystemDataSource{}
						if f13f7iter.DataSource.FileSystemDataSource.DirectoryPath != nil {
							f13f7elemf3f0.DirectoryPath = f13f7iter.DataSource.FileSystemDataSource.DirectoryPath
						}
						if f13f7iter.DataSource.FileSystemDataSource.FileSystemAccessMode != nil {
							f13f7elemf3f0.FileSystemAccessMode = f13f7iter.DataSource.FileSystemDataSource.FileSystemAccessMode
						}
						if f13f7iter.DataSource.FileSystemDataSource.FileSystemId != nil {
							f13f7elemf3f0.FileSystemID = f13f7iter.DataSource.FileSystemDataSource.FileSystemId
						}
						if f13f7iter.DataSource.FileSystemDataSource.FileSystemType != nil {
							f13f7elemf3f0.FileSystemType = f13f7iter.DataSource.FileSystemDataSource.FileSystemType
						}
						f13f7elemf3.FileSystemDataSource = f13f7elemf3f0
					}
					if f13f7iter.DataSource.S3DataSource != nil {
						f13f7elemf3f1 := &svcapitypes.S3DataSource{}
						if f13f7iter.DataSource.S3DataSource.AttributeNames != nil {
							f13f7elemf3f1f0 := []*string{}
							for _, f13f7elemf3f1f0iter := range f13f7iter.DataSource.S3DataSource.AttributeNames {
								var f13f7elemf3f1f0elem string
								f13f7elemf3f1f0elem = *f13f7elemf3f1f0iter
								f13f7elemf3f1f0 = append(f13f7elemf3f1f0, &f13f7elemf3f1f0elem)
							}
							f13f7elemf3f1.AttributeNames = f13f7elemf3f1f0
						}
						if f13f7iter.DataSource.S3DataSource.InstanceGroupNames != nil {
							f13f7elemf3f1f1 := []*string{}
							for _, f13f7elemf3f1f1iter := range f13f7iter.DataSource.S3DataSource.InstanceGroupNames {
								var f13f7elemf3f1f1elem string
								f13f7elemf3f1f1elem = *f13f7elemf3f1f1iter
								f13f7elemf3f1f1 = append(f13f7elemf3f1f1, &f13f7elemf3f1f1elem)
							}
							f13f7elemf3f1.InstanceGroupNames = f13f7elemf3f1f1
						}
						if f13f7iter.DataSource.S3DataSource.S3DataDistributionType != nil {
							f13f7elemf3f1.S3DataDistributionType = f13f7iter.DataSource.S3DataSource.S3DataDistributionType
						}
						if f13f7iter.DataSource.S3DataSource.S3DataType != nil {
							f13f7elemf3f1.S3DataType = f13f7iter.DataSource.S3DataSource.S3DataType
						}
						if f13f7iter.DataSource.S3DataSource.S3Uri != nil {
							f13f7elemf3f1.S3URI = f13f7iter.DataSource.S3DataSource.S3Uri
						}
						f13f7elemf3.S3DataSource = f13f7elemf3f1
					}
					f13f7elem.DataSource = f13f7elemf3
				}
				if f13f7iter.InputMode != nil {
					f13f7elem.InputMode = f13f7iter.InputMode
				}
				if f13f7iter.RecordWrapperType != nil {
					f13f7elem.RecordWrapperType = f13f7iter.RecordWrapperType
				}
				if f13f7iter.ShuffleConfig != nil {
					f13f7elemf6 := &svcapitypes.ShuffleConfig{}
					if f13f7iter.ShuffleConfig.Seed != nil {
						f13f7elemf6.Seed = f13f7iter.ShuffleConfig.Seed
					}
					f13f7elem.ShuffleConfig = f13f7elemf6
				}
				f13f7 = append(f13f7, f13f7elem)
			}
			f13.InputDataConfig = f13f7
		}
		if resp.TrainingJobDefinition.OutputDataConfig != nil {
			f13f8 := &svcapitypes.OutputDataConfig{}
			if resp.TrainingJobDefinition.OutputDataConfig.CompressionType != nil {
				f13f8.CompressionType = resp.TrainingJobDefinition.OutputDataConfig.CompressionType
			}
			if resp.TrainingJobDefinition.OutputDataConfig.KmsKeyId != nil {
				f13f8.KMSKeyID = resp.TrainingJobDefinition.OutputDataConfig.KmsKeyId
			}
			if resp.TrainingJobDefinition.OutputDataConfig.S3OutputPath != nil {
				f13f8.S3OutputPath = resp.TrainingJobDefinition.OutputDataConfig.S3OutputPath
			}
			f13.OutputDataConfig = f13f8
		}
		if resp.TrainingJobDefinition.ResourceConfig != nil {
			f13f9 := &svcapitypes.ResourceConfig{}
			if resp.TrainingJobDefinition.ResourceConfig.InstanceCount != nil {
				f13f9.InstanceCount = resp.TrainingJobDefinition.ResourceConfig.InstanceCount
			}
			if resp.TrainingJobDefinition.ResourceConfig.InstanceGroups != nil {
				f13f9f1 := []*svcapitypes.InstanceGroup{}
				for _, f13f9f1iter := range resp.TrainingJobDefinition.ResourceConfig.InstanceGroups {
					f13f9f1elem := &svcapitypes.InstanceGroup{}
					if f13f9f1iter.InstanceCount != nil {
						f13f9f1elem.InstanceCount = f13f9f1iter.InstanceCount
					}
					if f13f9f1iter.InstanceGroupName != nil {
						f13f9f1elem.InstanceGroupName = f13f9f1iter.InstanceGroupName
					}
					if f13f9f1iter.InstanceType != nil {
						f13f9f1elem.InstanceType = f13f9f1iter.InstanceType
					}
					f13f9f1 = append(f13f9f1, f13f9f1elem)
				}
				f13f9.InstanceGroups = f13f9f1
			}
			if resp.TrainingJobDefinition.ResourceConfig.InstanceType != nil {
				f13f9.InstanceType = resp.TrainingJobDefinition.ResourceConfig.InstanceType
			}
			if resp.TrainingJobDefinition.ResourceConfig.KeepAlivePeriodInSeconds != nil {
				f13f9.KeepAlivePeriodInSeconds = resp.TrainingJobDefinition.ResourceConfig.KeepAlivePeriodInSeconds
			}
			if resp.TrainingJobDefinition.ResourceConfig.VolumeKmsKeyId != nil {
				f13f9.VolumeKMSKeyID = resp.TrainingJobDefinition.ResourceConfig.VolumeKmsKeyId
			}
			if resp.TrainingJobDefinition.ResourceConfig.VolumeSizeInGB != nil {
				f13f9.VolumeSizeInGB = resp.TrainingJobDefinition.ResourceConfig.VolumeSizeInGB
			}
			f13.ResourceConfig = f13f9
		}
		if resp.TrainingJobDefinition.RetryStrategy != nil {
			f13f10 := &svcapitypes.RetryStrategy{}
			if resp.TrainingJobDefinition.RetryStrategy.MaximumRetryAttempts != nil {
				f13f10.MaximumRetryAttempts = resp.TrainingJobDefinition.RetryStrategy.MaximumRetryAttempts
			}
			f13.RetryStrategy = f13f10
		}
		if resp.TrainingJobDefinition.RoleArn != nil {
			f13.RoleARN = resp.TrainingJobDefinition.RoleArn
		}
		if resp.TrainingJobDefinition.StaticHyperParameters != nil {
			f13f12 := map[string]*string{}
			for f13f12key, f13f12valiter := range resp.TrainingJobDefinition.StaticHyperParameters {
				var f13f12val string
				f13f12val = *f13f12valiter
				f13f12[f13f12key] = &f13f12val
			}
			f13.StaticHyperParameters = f13f12
		}
		if resp.TrainingJobDefinition.StoppingCondition != nil {
			f13f13 := &svcapitypes.StoppingCondition{}
			if resp.TrainingJobDefinition.StoppingCondition.MaxPendingTimeInSeconds != nil {
				f13f13.MaxPendingTimeInSeconds = resp.TrainingJobDefinition.StoppingCondition.MaxPendingTimeInSeconds
			}
			if resp.TrainingJobDefinition.StoppingCondition.MaxRuntimeInSeconds != nil {
				f13f13.MaxRuntimeInSeconds = resp.TrainingJobDefinition.StoppingCondition.MaxRuntimeInSeconds
			}
			if resp.TrainingJobDefinition.StoppingCondition.MaxWaitTimeInSeconds != nil {
				f13f13.MaxWaitTimeInSeconds = resp.TrainingJobDefinition.StoppingCondition.MaxWaitTimeInSeconds
			}
			f13.StoppingCondition = f13f13
		}
		if resp.TrainingJobDefinition.TuningObjective != nil {
			f13f14 := &svcapitypes.HyperParameterTuningJobObjective{}
			if resp.TrainingJobDefinition.TuningObjective.MetricName != nil {
				f13f14.MetricName = resp.TrainingJobDefinition.TuningObjective.MetricName
			}
			if resp.TrainingJobDefinition.TuningObjective.Type != nil {
				f13f14.Type = resp.TrainingJobDefinition.TuningObjective.Type
			}
			f13.TuningObjective = f13f14
		}
		if resp.TrainingJobDefinition.VpcConfig != nil {
			f13f15 := &svcapitypes.VPCConfig{}
			if resp.TrainingJobDefinition.VpcConfig.SecurityGroupIds != nil {
				f13f15f0 := []*string{}
				for _, f13f15f0iter := range resp.TrainingJobDefinition.VpcConfig.SecurityGroupIds {
					var f13f15f0elem string
					f13f15f0elem = *f13f15f0iter
					f13f15f0 = append(f13f15f0, &f13f15f0elem)
				}
				f13f15.SecurityGroupIDs = f13f15f0
			}
			if resp.TrainingJobDefinition.VpcConfig.Subnets != nil {
				f13f15f1 := []*string{}
				for _, f13f15f1iter := range resp.TrainingJobDefinition.VpcConfig.Subnets {
					var f13f15f1elem string
					f13f15f1elem = *f13f15f1iter
					f13f15f1 = append(f13f15f1, &f13f15f1elem)
				}
				f13f15.Subnets = f13f15f1
			}
			f13.VPCConfig = f13f15
		}
		ko.Spec.TrainingJobDefinition = f13
	} else {
		ko.Spec.TrainingJobDefinition = nil
	}
	if resp.TrainingJobDefinitions != nil {
		f14 := []*svcapitypes.HyperParameterTrainingJobDefinition{}
		for _, f14iter := range resp.TrainingJobDefinitions {
			f14elem := &svcapitypes.HyperParameterTrainingJobDefinition{}
			if f14iter.AlgorithmSpecification != nil {
				f14elemf0 := &svcapitypes.HyperParameterAlgorithmSpecification{}
				if f14iter.AlgorithmSpecification.AlgorithmName != nil {
					f14elemf0.AlgorithmName = f14iter.AlgorithmSpecification.AlgorithmName
				}
				if f14iter.AlgorithmSpecification.MetricDefinitions != nil {
					f14elemf0f1 := []*svcapitypes.MetricDefinition{}
					for _, f14elemf0f1iter := range f14iter.AlgorithmSpecification.MetricDefinitions {
						f14elemf0f1elem := &svcapitypes.MetricDefinition{}
						if f14elemf0f1iter.Name != nil {
							f14elemf0f1elem.Name = f14elemf0f1iter.Name
						}
						if f14elemf0f1iter.Regex != nil {
							f14elemf0f1elem.Regex = f14elemf0f1iter.Regex
						}
						f14elemf0f1 = append(f14elemf0f1, f14elemf0f1elem)
					}
					f14elemf0.MetricDefinitions = f14elemf0f1
				}
				if f14iter.AlgorithmSpecification.TrainingImage != nil {
					f14elemf0.TrainingImage = f14iter.AlgorithmSpecification.TrainingImage
				}
				if f14iter.AlgorithmSpecification.TrainingInputMode != nil {
					f14elemf0.TrainingInputMode = f14iter.AlgorithmSpecification.TrainingInputMode
				}
				f14elem.AlgorithmSpecification = f14elemf0
			}
			if f14iter.CheckpointConfig != nil {
				f14elemf1 := &svcapitypes.CheckpointConfig{}
				if f14iter.CheckpointConfig.LocalPath != nil {
					f14elemf1.LocalPath = f14iter.CheckpointConfig.LocalPath
				}
				if f14iter.CheckpointConfig.S3Uri != nil {
					f14elemf1.S3URI = f14iter.CheckpointConfig.S3Uri
				}
				f14elem.CheckpointConfig = f14elemf1
			}
			if f14iter.DefinitionName != nil {
				f14elem.DefinitionName = f14iter.DefinitionName
			}
			if f14iter.EnableInterContainerTrafficEncryption != nil {
				f14elem.EnableInterContainerTrafficEncryption = f14iter.EnableInterContainerTrafficEncryption
			}
			if f14iter.EnableManagedSpotTraining != nil {
				f14elem.EnableManagedSpotTraining = f14iter.EnableManagedSpotTraining
			}
			if f14iter.EnableNetworkIsolation != nil {
				f14elem.EnableNetworkIsolation = f14iter.EnableNetworkIsolation
			}
			if f14iter.HyperParameterRanges != nil {
				f14elemf6 := &svcapitypes.ParameterRanges{}
				if f14iter.HyperParameterRanges.AutoParameters != nil {
					f14elemf6f0 := []*svcapitypes.AutoParameter{}
					for _, f14elemf6f0iter := range f14iter.HyperParameterRanges.AutoParameters {
						f14elemf6f0elem := &svcapitypes.AutoParameter{}
						if f14elemf6f0iter.Name != nil {
							f14elemf6f0elem.Name = f14elemf6f0iter.Name
						}
						if f14elemf6f0iter.ValueHint != nil {
							f14elemf6f0elem.ValueHint = f14elemf6f0iter.ValueHint
						}
						f14elemf6f0 = append(f14elemf6f0, f14elemf6f0elem)
					}
					f14elemf6.AutoParameters = f14elemf6f0
				}
				if f14iter.HyperParameterRanges.CategoricalParameterRanges != nil {
					f14elemf6f1 := []*svcapitypes.CategoricalParameterRange{}
					for _, f14elemf6f1iter := range f14iter.HyperParameterRanges.CategoricalParameterRanges {
						f14elemf6f1elem := &svcapitypes.CategoricalParameterRange{}
						if f14elemf6f1iter.Name != nil {
							f14elemf6f1elem.Name = f14elemf6f1iter.Name
						}
						if f14elemf6f1iter.Values != nil {
							f14elemf6f1elemf1 := []*string{}
							for _, f14elemf6f1elemf1iter := range f14elemf6f1iter.Values {
								var f14elemf6f1elemf1elem string
								f14elemf6f1elemf1elem = *f14elemf6f1elemf1iter
								f14elemf6f1elemf1 = append(f14elemf6f1elemf1, &f14elemf6f1elemf1elem)
							}
							f14elemf6f1elem.Values = f14elemf6f1elemf1
						}
						f14elemf6f1 = append(f14elemf6f1, f14elemf6f1elem)
					}
					f14elemf6.CategoricalParameterRanges = f14elemf6f1
				}
				if f14iter.HyperParameterRanges.ContinuousParameterRanges != nil {
					f14elemf6f2 := []*svcapitypes.ContinuousParameterRange{}
					for _, f14elemf6f2iter := range f14iter.HyperParameterRanges.ContinuousParameterRanges {
						f14elemf6f2elem := &svcapitypes.ContinuousParameterRange{}
						if f14elemf6f2iter.MaxValue != nil {
							f14elemf6f2elem.MaxValue = f14elemf6f2iter.MaxValue
						}
						if f14elemf6f2iter.MinValue != nil {
							f14elemf6f2elem.MinValue = f14elemf6f2iter.MinValue
						}
						if f14elemf6f2iter.Name != nil {
							f14elemf6f2elem.Name = f14elemf6f2iter.Name
						}
						if f14elemf6f2iter.ScalingType != nil {
							f14elemf6f2elem.ScalingType = f14elemf6f2iter.ScalingType
						}
						f14elemf6f2 = append(f14elemf6f2, f14elemf6f2elem)
					}
					f14elemf6.ContinuousParameterRanges = f14elemf6f2
				}
				if f14iter.HyperParameterRanges.IntegerParameterRanges != nil {
					f14elemf6f3 := []*svcapitypes.IntegerParameterRange{}
					for _, f14elemf6f3iter := range f14iter.HyperParameterRanges.IntegerParameterRanges {
						f14elemf6f3elem := &svcapitypes.IntegerParameterRange{}
						if f14elemf6f3iter.MaxValue != nil {
							f14elemf6f3elem.MaxValue = f14elemf6f3iter.MaxValue
						}
						if f14elemf6f3iter.MinValue != nil {
							f14elemf6f3elem.MinValue = f14elemf6f3iter.MinValue
						}
						if f14elemf6f3iter.Name != nil {
							f14elemf6f3elem.Name = f14elemf6f3iter.Name
						}
						if f14elemf6f3iter.ScalingType != nil {
							f14elemf6f3elem.ScalingType = f14elemf6f3iter.ScalingType
						}
						f14elemf6f3 = append(f14elemf6f3, f14elemf6f3elem)
					}
					f14elemf6.IntegerParameterRanges = f14elemf6f3
				}
				f14elem.HyperParameterRanges = f14elemf6
			}
			if f14iter.InputDataConfig != nil {
				f14elemf7 := []*svcapitypes.Channel{}
				for _, f14elemf7iter := range f14iter.InputDataConfig {
					f14elemf7elem := &svcapitypes.Channel{}
					if f14elemf7iter.ChannelName != nil {
						f14elemf7elem.ChannelName = f14elemf7iter.ChannelName
					}
					if f14elemf7iter.CompressionType != nil {
						f14elemf7elem.CompressionType = f14elemf7iter.CompressionType
					}
					if f14elemf7iter.ContentType != nil {
						f14elemf7elem.ContentType = f14elemf7iter.ContentType
					}
					if f14elemf7iter.DataSource != nil {
						f14elemf7elemf3 := &svcapitypes.DataSource{}
						if f14elemf7iter.DataSource.FileSystemDataSource != nil {
							f14elemf7elemf3f0 := &svcapitypes.FileSystemDataSource{}
							if f14elemf7iter.DataSource.FileSystemDataSource.DirectoryPath != nil {
								f14elemf7elemf3f0.DirectoryPath = f14elemf7iter.DataSource.FileSystemDataSource.DirectoryPath
							}
							if f14elemf7iter.DataSource.FileSystemDataSource.FileSystemAccessMode != nil {
								f14elemf7elemf3f0.FileSystemAccessMode = f14elemf7iter.DataSource.FileSystemDataSource.FileSystemAccessMode
							}
							if f14elemf7iter.DataSource.FileSystemDataSource.FileSystemId != nil {
								f14elemf7elemf3f0.FileSystemID = f14elemf7iter.DataSource.FileSystemDataSource.FileSystemId
							}
							if f14elemf7iter.DataSource.FileSystemDataSource.FileSystemType != nil {
								f14elemf7elemf3f0.FileSystemType = f14elemf7iter.DataSource.FileSystemDataSource.FileSystemType
							}
							f14elemf7elemf3.FileSystemDataSource = f14elemf7elemf3f0
						}
						if f14elemf7iter.DataSource.S3DataSource != nil {
							f14elemf7elemf3f1 := &svcapitypes.S3DataSource{}
							if f14elemf7iter.DataSource.S3DataSource.AttributeNames != nil {
								f14elemf7elemf3f1f0 := []*string{}
								for _, f14elemf7elemf3f1f0iter := range f14elemf7iter.DataSource.S3DataSource.AttributeNames {
									var f14elemf7elemf3f1f0elem string
									f14elemf7elemf3f1f0elem = *f14elemf7elemf3f1f0iter
									f14elemf7elemf3f1f0 = append(f14elemf7elemf3f1f0, &f14elemf7elemf3f1f0elem)
								}
								f14elemf7elemf3f1.AttributeNames = f14elemf7elemf3f1f0
							}
							if f14elemf7iter.DataSource.S3DataSource.InstanceGroupNames != nil {
								f14elemf7elemf3f1f1 := []*string{}
								for _, f14elemf7elemf3f1f1iter := range f14elemf7iter.DataSource.S3DataSource.InstanceGroupNames {
									var f14elemf7elemf3f1f1elem string
									f14elemf7elemf3f1f1elem = *f14elemf7elemf3f1f1iter
									f14elemf7elemf3f1f1 = append(f14elemf7elemf3f1f1, &f14elemf7elemf3f1f1elem)
								}
								f14elemf7elemf3f1.InstanceGroupNames = f14elemf7elemf3f1f1
							}
							if f14elemf7iter.DataSource.S3DataSource.S3DataDistributionType != nil {
								f14elemf7elemf3f1.S3DataDistributionType = f14elemf7iter.DataSource.S3DataSource.S3DataDistributionType
							}
							if f14elemf7iter.DataSource.S3DataSource.S3DataType != nil {
								f14elemf7elemf3f1.S3DataType = f14elemf7iter.DataSource.S3DataSource.S3DataType
							}
							if f14elemf7iter.DataSource.S3DataSource.S3Uri != nil {
								f14elemf7elemf3f1.S3URI = f14elemf7iter.DataSource.S3DataSource.S3Uri
							}
							f14elemf7elemf3.S3DataSource = f14elemf7elemf3f1
						}
						f14elemf7elem.DataSource = f14elemf7elemf3
					}
					if f14elemf7iter.InputMode != nil {
						f14elemf7elem.InputMode = f14elemf7iter.InputMode
					}
					if f14elemf7iter.RecordWrapperType != nil {
						f14elemf7elem.RecordWrapperType = f14elemf7iter.RecordWrapperType
					}
					if f14elemf7iter.ShuffleConfig != nil {
						f14elemf7elemf6 := &svcapitypes.ShuffleConfig{}
						if f14elemf7iter.ShuffleConfig.Seed != nil {
							f14elemf7elemf6.Seed = f14elemf7iter.ShuffleConfig.Seed
						}
						f14elemf7elem.ShuffleConfig = f14elemf7elemf6
					}
					f14elemf7 = append(f14elemf7, f14elemf7elem)
				}
				f14elem.InputDataConfig = f14elemf7
			}
			if f14iter.OutputDataConfig != nil {
				f14elemf8 := &svcapitypes.OutputDataConfig{}
				if f14iter.OutputDataConfig.CompressionType != nil {
					f14elemf8.CompressionType = f14iter.OutputDataConfig.CompressionType
				}
				if f14iter.OutputDataConfig.KmsKeyId != nil {
					f14elemf8.KMSKeyID = f14iter.OutputDataConfig.KmsKeyId
				}
				if f14iter.OutputDataConfig.S3OutputPath != nil {
					f14elemf8.S3OutputPath = f14iter.OutputDataConfig.S3OutputPath
				}
				f14elem.OutputDataConfig = f14elemf8
			}
			if f14iter.ResourceConfig != nil {
				f14elemf9 := &svcapitypes.ResourceConfig{}
				if f14iter.ResourceConfig.InstanceCount != nil {
					f14elemf9.InstanceCount = f14iter.ResourceConfig.InstanceCount
				}
				if f14iter.ResourceConfig.InstanceGroups != nil {
					f14elemf9f1 := []*svcapitypes.InstanceGroup{}
					for _, f14elemf9f1iter := range f14iter.ResourceConfig.InstanceGroups {
						f14elemf9f1elem := &svcapitypes.InstanceGroup{}
						if f14elemf9f1iter.InstanceCount != nil {
							f14elemf9f1elem.InstanceCount = f14elemf9f1iter.InstanceCount
						}
						if f14elemf9f1iter.InstanceGroupName != nil {
							f14elemf9f1elem.InstanceGroupName = f14elemf9f1iter.InstanceGroupName
						}
						if f14elemf9f1iter.InstanceType != nil {
							f14elemf9f1elem.InstanceType = f14elemf9f1iter.InstanceType
						}
						f14elemf9f1 = append(f14elemf9f1, f14elemf9f1elem)
					}
					f14elemf9.InstanceGroups = f14elemf9f1
				}
				if f14iter.ResourceConfig.InstanceType != nil {
					f14elemf9.InstanceType = f14iter.ResourceConfig.InstanceType
				}
				if f14iter.ResourceConfig.KeepAlivePeriodInSeconds != nil {
					f14elemf9.KeepAlivePeriodInSeconds = f14iter.ResourceConfig.KeepAlivePeriodInSeconds
				}
				if f14iter.ResourceConfig.VolumeKmsKeyId != nil {
					f14elemf9.VolumeKMSKeyID = f14iter.ResourceConfig.VolumeKmsKeyId
				}
				if f14iter.ResourceConfig.VolumeSizeInGB != nil {
					f14elemf9.VolumeSizeInGB = f14iter.ResourceConfig.VolumeSizeInGB
				}
				f14elem.ResourceConfig = f14elemf9
			}
			if f14iter.RetryStrategy != nil {
				f14elemf10 := &svcapitypes.RetryStrategy{}
				if f14iter.RetryStrategy.MaximumRetryAttempts != nil {
					f14elemf10.MaximumRetryAttempts = f14iter.RetryStrategy.MaximumRetryAttempts
				}
				f14elem.RetryStrategy = f14elemf10
			}
			if f14iter.RoleArn != nil {
				f14elem.RoleARN = f14iter.RoleArn
			}
			if f14iter.StaticHyperParameters != nil {
				f14elemf12 := map[string]*string{}
				for f14elemf12key, f14elemf12valiter := range f14iter.StaticHyperParameters {
					var f14elemf12val string
					f14elemf12val = *f14elemf12valiter
					f14elemf12[f14elemf12key] = &f14elemf12val
				}
				f14elem.StaticHyperParameters = f14elemf12
			}
			if f14iter.StoppingCondition != nil {
				f14elemf13 := &svcapitypes.StoppingCondition{}
				if f14iter.StoppingCondition.MaxPendingTimeInSeconds != nil {
					f14elemf13.MaxPendingTimeInSeconds = f14iter.StoppingCondition.MaxPendingTimeInSeconds
				}
				if f14iter.StoppingCondition.MaxRuntimeInSeconds != nil {
					f14elemf13.MaxRuntimeInSeconds = f14iter.StoppingCondition.MaxRuntimeInSeconds
				}
				if f14iter.StoppingCondition.MaxWaitTimeInSeconds != nil {
					f14elemf13.MaxWaitTimeInSeconds = f14iter.StoppingCondition.MaxWaitTimeInSeconds
				}
				f14elem.StoppingCondition = f14elemf13
			}
			if f14iter.TuningObjective != nil {
				f14elemf14 := &svcapitypes.HyperParameterTuningJobObjective{}
				if f14iter.TuningObjective.MetricName != nil {
					f14elemf14.MetricName = f14iter.TuningObjective.MetricName
				}
				if f14iter.TuningObjective.Type != nil {
					f14elemf14.Type = f14iter.TuningObjective.Type
				}
				f14elem.TuningObjective = f14elemf14
			}
			if f14iter.VpcConfig != nil {
				f14elemf15 := &svcapitypes.VPCConfig{}
				if f14iter.VpcConfig.SecurityGroupIds != nil {
					f14elemf15f0 := []*string{}
					for _, f14elemf15f0iter := range f14iter.VpcConfig.SecurityGroupIds {
						var f14elemf15f0elem string
						f14elemf15f0elem = *f14elemf15f0iter
						f14elemf15f0 = append(f14elemf15f0, &f14elemf15f0elem)
					}
					f14elemf15.SecurityGroupIDs = f14elemf15f0
				}
				if f14iter.VpcConfig.Subnets != nil {
					f14elemf15f1 := []*string{}
					for _, f14elemf15f1iter := range f14iter.VpcConfig.Subnets {
						var f14elemf15f1elem string
						f14elemf15f1elem = *f14elemf15f1iter
						f14elemf15f1 = append(f14elemf15f1, &f14elemf15f1elem)
					}
					f14elemf15.Subnets = f14elemf15f1
				}
				f14elem.VPCConfig = f14elemf15
			}
			f14 = append(f14, f14elem)
		}
		ko.Spec.TrainingJobDefinitions = f14
	} else {
		ko.Spec.TrainingJobDefinitions = nil
	}
	if resp.WarmStartConfig != nil {
		f17 := &svcapitypes.HyperParameterTuningJobWarmStartConfig{}
		if resp.WarmStartConfig.ParentHyperParameterTuningJobs != nil {
			f17f0 := []*svcapitypes.ParentHyperParameterTuningJob{}
			for _, f17f0iter := range resp.WarmStartConfig.ParentHyperParameterTuningJobs {
				f17f0elem := &svcapitypes.ParentHyperParameterTuningJob{}
				if f17f0iter.HyperParameterTuningJobName != nil {
					f17f0elem.HyperParameterTuningJobName = f17f0iter.HyperParameterTuningJobName
				}
				f17f0 = append(f17f0, f17f0elem)
			}
			f17.ParentHyperParameterTuningJobs = f17f0
		}
		if resp.WarmStartConfig.WarmStartType != nil {
			f17.WarmStartType = resp.WarmStartConfig.WarmStartType
		}
		ko.Spec.WarmStartConfig = f17
	} else {
		ko.Spec.WarmStartConfig = nil
	}

	rm.setStatusDefaults(ko)
	rm.customSetOutput(&resource{ko})
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Spec.HyperParameterTuningJobName == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.DescribeHyperParameterTuningJobInput, error) {
	res := &svcsdk.DescribeHyperParameterTuningJobInput{}

	if r.ko.Spec.HyperParameterTuningJobName != nil {
		res.SetHyperParameterTuningJobName(*r.ko.Spec.HyperParameterTuningJobName)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateHyperParameterTuningJobOutput
	_ = resp
	resp, err = rm.sdkapi.CreateHyperParameterTuningJobWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateHyperParameterTuningJob", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.HyperParameterTuningJobArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.HyperParameterTuningJobArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateHyperParameterTuningJobInput, error) {
	res := &svcsdk.CreateHyperParameterTuningJobInput{}

	if r.ko.Spec.Autotune != nil {
		f0 := &svcsdk.Autotune{}
		if r.ko.Spec.Autotune.Mode != nil {
			f0.SetMode(*r.ko.Spec.Autotune.Mode)
		}
		res.SetAutotune(f0)
	}
	if r.ko.Spec.HyperParameterTuningJobConfig != nil {
		f1 := &svcsdk.HyperParameterTuningJobConfig{}
		if r.ko.Spec.HyperParameterTuningJobConfig.HyperParameterTuningJobObjective != nil {
			f1f0 := &svcsdk.HyperParameterTuningJobObjective{}
			if r.ko.Spec.HyperParameterTuningJobConfig.HyperParameterTuningJobObjective.MetricName != nil {
				f1f0.SetMetricName(*r.ko.Spec.HyperParameterTuningJobConfig.HyperParameterTuningJobObjective.MetricName)
			}
			if r.ko.Spec.HyperParameterTuningJobConfig.HyperParameterTuningJobObjective.Type != nil {
				f1f0.SetType(*r.ko.Spec.HyperParameterTuningJobConfig.HyperParameterTuningJobObjective.Type)
			}
			f1.SetHyperParameterTuningJobObjective(f1f0)
		}
		if r.ko.Spec.HyperParameterTuningJobConfig.ParameterRanges != nil {
			f1f1 := &svcsdk.ParameterRanges{}
			if r.ko.Spec.HyperParameterTuningJobConfig.ParameterRanges.AutoParameters != nil {
				f1f1f0 := []*svcsdk.AutoParameter{}
				for _, f1f1f0iter := range r.ko.Spec.HyperParameterTuningJobConfig.ParameterRanges.AutoParameters {
					f1f1f0elem := &svcsdk.AutoParameter{}
					if f1f1f0iter.Name != nil {
						f1f1f0elem.SetName(*f1f1f0iter.Name)
					}
					if f1f1f0iter.ValueHint != nil {
						f1f1f0elem.SetValueHint(*f1f1f0iter.ValueHint)
					}
					f1f1f0 = append(f1f1f0, f1f1f0elem)
				}
				f1f1.SetAutoParameters(f1f1f0)
			}
			if r.ko.Spec.HyperParameterTuningJobConfig.ParameterRanges.CategoricalParameterRanges != nil {
				f1f1f1 := []*svcsdk.CategoricalParameterRange{}
				for _, f1f1f1iter := range r.ko.Spec.HyperParameterTuningJobConfig.ParameterRanges.CategoricalParameterRanges {
					f1f1f1elem := &svcsdk.CategoricalParameterRange{}
					if f1f1f1iter.Name != nil {
						f1f1f1elem.SetName(*f1f1f1iter.Name)
					}
					if f1f1f1iter.Values != nil {
						f1f1f1elemf1 := []*string{}
						for _, f1f1f1elemf1iter := range f1f1f1iter.Values {
							var f1f1f1elemf1elem string
							f1f1f1elemf1elem = *f1f1f1elemf1iter
							f1f1f1elemf1 = append(f1f1f1elemf1, &f1f1f1elemf1elem)
						}
						f1f1f1elem.SetValues(f1f1f1elemf1)
					}
					f1f1f1 = append(f1f1f1, f1f1f1elem)
				}
				f1f1.SetCategoricalParameterRanges(f1f1f1)
			}
			if r.ko.Spec.HyperParameterTuningJobConfig.ParameterRanges.ContinuousParameterRanges != nil {
				f1f1f2 := []*svcsdk.ContinuousParameterRange{}
				for _, f1f1f2iter := range r.ko.Spec.HyperParameterTuningJobConfig.ParameterRanges.ContinuousParameterRanges {
					f1f1f2elem := &svcsdk.ContinuousParameterRange{}
					if f1f1f2iter.MaxValue != nil {
						f1f1f2elem.SetMaxValue(*f1f1f2iter.MaxValue)
					}
					if f1f1f2iter.MinValue != nil {
						f1f1f2elem.SetMinValue(*f1f1f2iter.MinValue)
					}
					if f1f1f2iter.Name != nil {
						f1f1f2elem.SetName(*f1f1f2iter.Name)
					}
					if f1f1f2iter.ScalingType != nil {
						f1f1f2elem.SetScalingType(*f1f1f2iter.ScalingType)
					}
					f1f1f2 = append(f1f1f2, f1f1f2elem)
				}
				f1f1.SetContinuousParameterRanges(f1f1f2)
			}
			if r.ko.Spec.HyperParameterTuningJobConfig.ParameterRanges.IntegerParameterRanges != nil {
				f1f1f3 := []*svcsdk.IntegerParameterRange{}
				for _, f1f1f3iter := range r.ko.Spec.HyperParameterTuningJobConfig.ParameterRanges.IntegerParameterRanges {
					f1f1f3elem := &svcsdk.IntegerParameterRange{}
					if f1f1f3iter.MaxValue != nil {
						f1f1f3elem.SetMaxValue(*f1f1f3iter.MaxValue)
					}
					if f1f1f3iter.MinValue != nil {
						f1f1f3elem.SetMinValue(*f1f1f3iter.MinValue)
					}
					if f1f1f3iter.Name != nil {
						f1f1f3elem.SetName(*f1f1f3iter.Name)
					}
					if f1f1f3iter.ScalingType != nil {
						f1f1f3elem.SetScalingType(*f1f1f3iter.ScalingType)
					}
					f1f1f3 = append(f1f1f3, f1f1f3elem)
				}
				f1f1.SetIntegerParameterRanges(f1f1f3)
			}
			f1.SetParameterRanges(f1f1)
		}
		if r.ko.Spec.HyperParameterTuningJobConfig.ResourceLimits != nil {
			f1f2 := &svcsdk.ResourceLimits{}
			if r.ko.Spec.HyperParameterTuningJobConfig.ResourceLimits.MaxNumberOfTrainingJobs != nil {
				f1f2.SetMaxNumberOfTrainingJobs(*r.ko.Spec.HyperParameterTuningJobConfig.ResourceLimits.MaxNumberOfTrainingJobs)
			}
			if r.ko.Spec.HyperParameterTuningJobConfig.ResourceLimits.MaxParallelTrainingJobs != nil {
				f1f2.SetMaxParallelTrainingJobs(*r.ko.Spec.HyperParameterTuningJobConfig.ResourceLimits.MaxParallelTrainingJobs)
			}
			f1.SetResourceLimits(f1f2)
		}
		if r.ko.Spec.HyperParameterTuningJobConfig.Strategy != nil {
			f1.SetStrategy(*r.ko.Spec.HyperParameterTuningJobConfig.Strategy)
		}
		if r.ko.Spec.HyperParameterTuningJobConfig.TrainingJobEarlyStoppingType != nil {
			f1.SetTrainingJobEarlyStoppingType(*r.ko.Spec.HyperParameterTuningJobConfig.TrainingJobEarlyStoppingType)
		}
		if r.ko.Spec.HyperParameterTuningJobConfig.TuningJobCompletionCriteria != nil {
			f1f5 := &svcsdk.TuningJobCompletionCriteria{}
			if r.ko.Spec.HyperParameterTuningJobConfig.TuningJobCompletionCriteria.TargetObjectiveMetricValue != nil {
				f1f5.SetTargetObjectiveMetricValue(*r.ko.Spec.HyperParameterTuningJobConfig.TuningJobCompletionCriteria.TargetObjectiveMetricValue)
			}
			f1.SetTuningJobCompletionCriteria(f1f5)
		}
		res.SetHyperParameterTuningJobConfig(f1)
	}
	if r.ko.Spec.HyperParameterTuningJobName != nil {
		res.SetHyperParameterTuningJobName(*r.ko.Spec.HyperParameterTuningJobName)
	}
	if r.ko.Spec.Tags != nil {
		f3 := []*svcsdk.Tag{}
		for _, f3iter := range r.ko.Spec.Tags {
			f3elem := &svcsdk.Tag{}
			if f3iter.Key != nil {
				f3elem.SetKey(*f3iter.Key)
			}
			if f3iter.Value != nil {
				f3elem.SetValue(*f3iter.Value)
			}
			f3 = append(f3, f3elem)
		}
		res.SetTags(f3)
	}
	if r.ko.Spec.TrainingJobDefinition != nil {
		f4 := &svcsdk.HyperParameterTrainingJobDefinition{}
		if r.ko.Spec.TrainingJobDefinition.AlgorithmSpecification != nil {
			f4f0 := &svcsdk.HyperParameterAlgorithmSpecification{}
			if r.ko.Spec.TrainingJobDefinition.AlgorithmSpecification.AlgorithmName != nil {
				f4f0.SetAlgorithmName(*r.ko.Spec.TrainingJobDefinition.AlgorithmSpecification.AlgorithmName)
			}
			if r.ko.Spec.TrainingJobDefinition.AlgorithmSpecification.MetricDefinitions != nil {
				f4f0f1 := []*svcsdk.MetricDefinition{}
				for _, f4f0f1iter := range r.ko.Spec.TrainingJobDefinition.AlgorithmSpecification.MetricDefinitions {
					f4f0f1elem := &svcsdk.MetricDefinition{}
					if f4f0f1iter.Name != nil {
						f4f0f1elem.SetName(*f4f0f1iter.Name)
					}
					if f4f0f1iter.Regex != nil {
						f4f0f1elem.SetRegex(*f4f0f1iter.Regex)
					}
					f4f0f1 = append(f4f0f1, f4f0f1elem)
				}
				f4f0.SetMetricDefinitions(f4f0f1)
			}
			if r.ko.Spec.TrainingJobDefinition.AlgorithmSpecification.TrainingImage != nil {
				f4f0.SetTrainingImage(*r.ko.Spec.TrainingJobDefinition.AlgorithmSpecification.TrainingImage)
			}
			if r.ko.Spec.TrainingJobDefinition.AlgorithmSpecification.TrainingInputMode != nil {
				f4f0.SetTrainingInputMode(*r.ko.Spec.TrainingJobDefinition.AlgorithmSpecification.TrainingInputMode)
			}
			f4.SetAlgorithmSpecification(f4f0)
		}
		if r.ko.Spec.TrainingJobDefinition.CheckpointConfig != nil {
			f4f1 := &svcsdk.CheckpointConfig{}
			if r.ko.Spec.TrainingJobDefinition.CheckpointConfig.LocalPath != nil {
				f4f1.SetLocalPath(*r.ko.Spec.TrainingJobDefinition.CheckpointConfig.LocalPath)
			}
			if r.ko.Spec.TrainingJobDefinition.CheckpointConfig.S3URI != nil {
				f4f1.SetS3Uri(*r.ko.Spec.TrainingJobDefinition.CheckpointConfig.S3URI)
			}
			f4.SetCheckpointConfig(f4f1)
		}
		if r.ko.Spec.TrainingJobDefinition.DefinitionName != nil {
			f4.SetDefinitionName(*r.ko.Spec.TrainingJobDefinition.DefinitionName)
		}
		if r.ko.Spec.TrainingJobDefinition.EnableInterContainerTrafficEncryption != nil {
			f4.SetEnableInterContainerTrafficEncryption(*r.ko.Spec.TrainingJobDefinition.EnableInterContainerTrafficEncryption)
		}
		if r.ko.Spec.TrainingJobDefinition.EnableManagedSpotTraining != nil {
			f4.SetEnableManagedSpotTraining(*r.ko.Spec.TrainingJobDefinition.EnableManagedSpotTraining)
		}
		if r.ko.Spec.TrainingJobDefinition.EnableNetworkIsolation != nil {
			f4.SetEnableNetworkIsolation(*r.ko.Spec.TrainingJobDefinition.EnableNetworkIsolation)
		}
		if r.ko.Spec.TrainingJobDefinition.HyperParameterRanges != nil {
			f4f6 := &svcsdk.ParameterRanges{}
			if r.ko.Spec.TrainingJobDefinition.HyperParameterRanges.AutoParameters != nil {
				f4f6f0 := []*svcsdk.AutoParameter{}
				for _, f4f6f0iter := range r.ko.Spec.TrainingJobDefinition.HyperParameterRanges.AutoParameters {
					f4f6f0elem := &svcsdk.AutoParameter{}
					if f4f6f0iter.Name != nil {
						f4f6f0elem.SetName(*f4f6f0iter.Name)
					}
					if f4f6f0iter.ValueHint != nil {
						f4f6f0elem.SetValueHint(*f4f6f0iter.ValueHint)
					}
					f4f6f0 = append(f4f6f0, f4f6f0elem)
				}
				f4f6.SetAutoParameters(f4f6f0)
			}
			if r.ko.Spec.TrainingJobDefinition.HyperParameterRanges.CategoricalParameterRanges != nil {
				f4f6f1 := []*svcsdk.CategoricalParameterRange{}
				for _, f4f6f1iter := range r.ko.Spec.TrainingJobDefinition.HyperParameterRanges.CategoricalParameterRanges {
					f4f6f1elem := &svcsdk.CategoricalParameterRange{}
					if f4f6f1iter.Name != nil {
						f4f6f1elem.SetName(*f4f6f1iter.Name)
					}
					if f4f6f1iter.Values != nil {
						f4f6f1elemf1 := []*string{}
						for _, f4f6f1elemf1iter := range f4f6f1iter.Values {
							var f4f6f1elemf1elem string
							f4f6f1elemf1elem = *f4f6f1elemf1iter
							f4f6f1elemf1 = append(f4f6f1elemf1, &f4f6f1elemf1elem)
						}
						f4f6f1elem.SetValues(f4f6f1elemf1)
					}
					f4f6f1 = append(f4f6f1, f4f6f1elem)
				}
				f4f6.SetCategoricalParameterRanges(f4f6f1)
			}
			if r.ko.Spec.TrainingJobDefinition.HyperParameterRanges.ContinuousParameterRanges != nil {
				f4f6f2 := []*svcsdk.ContinuousParameterRange{}
				for _, f4f6f2iter := range r.ko.Spec.TrainingJobDefinition.HyperParameterRanges.ContinuousParameterRanges {
					f4f6f2elem := &svcsdk.ContinuousParameterRange{}
					if f4f6f2iter.MaxValue != nil {
						f4f6f2elem.SetMaxValue(*f4f6f2iter.MaxValue)
					}
					if f4f6f2iter.MinValue != nil {
						f4f6f2elem.SetMinValue(*f4f6f2iter.MinValue)
					}
					if f4f6f2iter.Name != nil {
						f4f6f2elem.SetName(*f4f6f2iter.Name)
					}
					if f4f6f2iter.ScalingType != nil {
						f4f6f2elem.SetScalingType(*f4f6f2iter.ScalingType)
					}
					f4f6f2 = append(f4f6f2, f4f6f2elem)
				}
				f4f6.SetContinuousParameterRanges(f4f6f2)
			}
			if r.ko.Spec.TrainingJobDefinition.HyperParameterRanges.IntegerParameterRanges != nil {
				f4f6f3 := []*svcsdk.IntegerParameterRange{}
				for _, f4f6f3iter := range r.ko.Spec.TrainingJobDefinition.HyperParameterRanges.IntegerParameterRanges {
					f4f6f3elem := &svcsdk.IntegerParameterRange{}
					if f4f6f3iter.MaxValue != nil {
						f4f6f3elem.SetMaxValue(*f4f6f3iter.MaxValue)
					}
					if f4f6f3iter.MinValue != nil {
						f4f6f3elem.SetMinValue(*f4f6f3iter.MinValue)
					}
					if f4f6f3iter.Name != nil {
						f4f6f3elem.SetName(*f4f6f3iter.Name)
					}
					if f4f6f3iter.ScalingType != nil {
						f4f6f3elem.SetScalingType(*f4f6f3iter.ScalingType)
					}
					f4f6f3 = append(f4f6f3, f4f6f3elem)
				}
				f4f6.SetIntegerParameterRanges(f4f6f3)
			}
			f4.SetHyperParameterRanges(f4f6)
		}
		if r.ko.Spec.TrainingJobDefinition.InputDataConfig != nil {
			f4f7 := []*svcsdk.Channel{}
			for _, f4f7iter := range r.ko.Spec.TrainingJobDefinition.InputDataConfig {
				f4f7elem := &svcsdk.Channel{}
				if f4f7iter.ChannelName != nil {
					f4f7elem.SetChannelName(*f4f7iter.ChannelName)
				}
				if f4f7iter.CompressionType != nil {
					f4f7elem.SetCompressionType(*f4f7iter.CompressionType)
				}
				if f4f7iter.ContentType != nil {
					f4f7elem.SetContentType(*f4f7iter.ContentType)
				}
				if f4f7iter.DataSource != nil {
					f4f7elemf3 := &svcsdk.DataSource{}
					if f4f7iter.DataSource.FileSystemDataSource != nil {
						f4f7elemf3f0 := &svcsdk.FileSystemDataSource{}
						if f4f7iter.DataSource.FileSystemDataSource.DirectoryPath != nil {
							f4f7elemf3f0.SetDirectoryPath(*f4f7iter.DataSource.FileSystemDataSource.DirectoryPath)
						}
						if f4f7iter.DataSource.FileSystemDataSource.FileSystemAccessMode != nil {
							f4f7elemf3f0.SetFileSystemAccessMode(*f4f7iter.DataSource.FileSystemDataSource.FileSystemAccessMode)
						}
						if f4f7iter.DataSource.FileSystemDataSource.FileSystemID != nil {
							f4f7elemf3f0.SetFileSystemId(*f4f7iter.DataSource.FileSystemDataSource.FileSystemID)
						}
						if f4f7iter.DataSource.FileSystemDataSource.FileSystemType != nil {
							f4f7elemf3f0.SetFileSystemType(*f4f7iter.DataSource.FileSystemDataSource.FileSystemType)
						}
						f4f7elemf3.SetFileSystemDataSource(f4f7elemf3f0)
					}
					if f4f7iter.DataSource.S3DataSource != nil {
						f4f7elemf3f1 := &svcsdk.S3DataSource{}
						if f4f7iter.DataSource.S3DataSource.AttributeNames != nil {
							f4f7elemf3f1f0 := []*string{}
							for _, f4f7elemf3f1f0iter := range f4f7iter.DataSource.S3DataSource.AttributeNames {
								var f4f7elemf3f1f0elem string
								f4f7elemf3f1f0elem = *f4f7elemf3f1f0iter
								f4f7elemf3f1f0 = append(f4f7elemf3f1f0, &f4f7elemf3f1f0elem)
							}
							f4f7elemf3f1.SetAttributeNames(f4f7elemf3f1f0)
						}
						if f4f7iter.DataSource.S3DataSource.InstanceGroupNames != nil {
							f4f7elemf3f1f1 := []*string{}
							for _, f4f7elemf3f1f1iter := range f4f7iter.DataSource.S3DataSource.InstanceGroupNames {
								var f4f7elemf3f1f1elem string
								f4f7elemf3f1f1elem = *f4f7elemf3f1f1iter
								f4f7elemf3f1f1 = append(f4f7elemf3f1f1, &f4f7elemf3f1f1elem)
							}
							f4f7elemf3f1.SetInstanceGroupNames(f4f7elemf3f1f1)
						}
						if f4f7iter.DataSource.S3DataSource.S3DataDistributionType != nil {
							f4f7elemf3f1.SetS3DataDistributionType(*f4f7iter.DataSource.S3DataSource.S3DataDistributionType)
						}
						if f4f7iter.DataSource.S3DataSource.S3DataType != nil {
							f4f7elemf3f1.SetS3DataType(*f4f7iter.DataSource.S3DataSource.S3DataType)
						}
						if f4f7iter.DataSource.S3DataSource.S3URI != nil {
							f4f7elemf3f1.SetS3Uri(*f4f7iter.DataSource.S3DataSource.S3URI)
						}
						f4f7elemf3.SetS3DataSource(f4f7elemf3f1)
					}
					f4f7elem.SetDataSource(f4f7elemf3)
				}
				if f4f7iter.InputMode != nil {
					f4f7elem.SetInputMode(*f4f7iter.InputMode)
				}
				if f4f7iter.RecordWrapperType != nil {
					f4f7elem.SetRecordWrapperType(*f4f7iter.RecordWrapperType)
				}
				if f4f7iter.ShuffleConfig != nil {
					f4f7elemf6 := &svcsdk.ShuffleConfig{}
					if f4f7iter.ShuffleConfig.Seed != nil {
						f4f7elemf6.SetSeed(*f4f7iter.ShuffleConfig.Seed)
					}
					f4f7elem.SetShuffleConfig(f4f7elemf6)
				}
				f4f7 = append(f4f7, f4f7elem)
			}
			f4.SetInputDataConfig(f4f7)
		}
		if r.ko.Spec.TrainingJobDefinition.OutputDataConfig != nil {
			f4f8 := &svcsdk.OutputDataConfig{}
			if r.ko.Spec.TrainingJobDefinition.OutputDataConfig.CompressionType != nil {
				f4f8.SetCompressionType(*r.ko.Spec.TrainingJobDefinition.OutputDataConfig.CompressionType)
			}
			if r.ko.Spec.TrainingJobDefinition.OutputDataConfig.KMSKeyID != nil {
				f4f8.SetKmsKeyId(*r.ko.Spec.TrainingJobDefinition.OutputDataConfig.KMSKeyID)
			}
			if r.ko.Spec.TrainingJobDefinition.OutputDataConfig.S3OutputPath != nil {
				f4f8.SetS3OutputPath(*r.ko.Spec.TrainingJobDefinition.OutputDataConfig.S3OutputPath)
			}
			f4.SetOutputDataConfig(f4f8)
		}
		if r.ko.Spec.TrainingJobDefinition.ResourceConfig != nil {
			f4f9 := &svcsdk.ResourceConfig{}
			if r.ko.Spec.TrainingJobDefinition.ResourceConfig.InstanceCount != nil {
				f4f9.SetInstanceCount(*r.ko.Spec.TrainingJobDefinition.ResourceConfig.InstanceCount)
			}
			if r.ko.Spec.TrainingJobDefinition.ResourceConfig.InstanceGroups != nil {
				f4f9f1 := []*svcsdk.InstanceGroup{}
				for _, f4f9f1iter := range r.ko.Spec.TrainingJobDefinition.ResourceConfig.InstanceGroups {
					f4f9f1elem := &svcsdk.InstanceGroup{}
					if f4f9f1iter.InstanceCount != nil {
						f4f9f1elem.SetInstanceCount(*f4f9f1iter.InstanceCount)
					}
					if f4f9f1iter.InstanceGroupName != nil {
						f4f9f1elem.SetInstanceGroupName(*f4f9f1iter.InstanceGroupName)
					}
					if f4f9f1iter.InstanceType != nil {
						f4f9f1elem.SetInstanceType(*f4f9f1iter.InstanceType)
					}
					f4f9f1 = append(f4f9f1, f4f9f1elem)
				}
				f4f9.SetInstanceGroups(f4f9f1)
			}
			if r.ko.Spec.TrainingJobDefinition.ResourceConfig.InstanceType != nil {
				f4f9.SetInstanceType(*r.ko.Spec.TrainingJobDefinition.ResourceConfig.InstanceType)
			}
			if r.ko.Spec.TrainingJobDefinition.ResourceConfig.KeepAlivePeriodInSeconds != nil {
				f4f9.SetKeepAlivePeriodInSeconds(*r.ko.Spec.TrainingJobDefinition.ResourceConfig.KeepAlivePeriodInSeconds)
			}
			if r.ko.Spec.TrainingJobDefinition.ResourceConfig.VolumeKMSKeyID != nil {
				f4f9.SetVolumeKmsKeyId(*r.ko.Spec.TrainingJobDefinition.ResourceConfig.VolumeKMSKeyID)
			}
			if r.ko.Spec.TrainingJobDefinition.ResourceConfig.VolumeSizeInGB != nil {
				f4f9.SetVolumeSizeInGB(*r.ko.Spec.TrainingJobDefinition.ResourceConfig.VolumeSizeInGB)
			}
			f4.SetResourceConfig(f4f9)
		}
		if r.ko.Spec.TrainingJobDefinition.RetryStrategy != nil {
			f4f10 := &svcsdk.RetryStrategy{}
			if r.ko.Spec.TrainingJobDefinition.RetryStrategy.MaximumRetryAttempts != nil {
				f4f10.SetMaximumRetryAttempts(*r.ko.Spec.TrainingJobDefinition.RetryStrategy.MaximumRetryAttempts)
			}
			f4.SetRetryStrategy(f4f10)
		}
		if r.ko.Spec.TrainingJobDefinition.RoleARN != nil {
			f4.SetRoleArn(*r.ko.Spec.TrainingJobDefinition.RoleARN)
		}
		if r.ko.Spec.TrainingJobDefinition.StaticHyperParameters != nil {
			f4f12 := map[string]*string{}
			for f4f12key, f4f12valiter := range r.ko.Spec.TrainingJobDefinition.StaticHyperParameters {
				var f4f12val string
				f4f12val = *f4f12valiter
				f4f12[f4f12key] = &f4f12val
			}
			f4.SetStaticHyperParameters(f4f12)
		}
		if r.ko.Spec.TrainingJobDefinition.StoppingCondition != nil {
			f4f13 := &svcsdk.StoppingCondition{}
			if r.ko.Spec.TrainingJobDefinition.StoppingCondition.MaxPendingTimeInSeconds != nil {
				f4f13.SetMaxPendingTimeInSeconds(*r.ko.Spec.TrainingJobDefinition.StoppingCondition.MaxPendingTimeInSeconds)
			}
			if r.ko.Spec.TrainingJobDefinition.StoppingCondition.MaxRuntimeInSeconds != nil {
				f4f13.SetMaxRuntimeInSeconds(*r.ko.Spec.TrainingJobDefinition.StoppingCondition.MaxRuntimeInSeconds)
			}
			if r.ko.Spec.TrainingJobDefinition.StoppingCondition.MaxWaitTimeInSeconds != nil {
				f4f13.SetMaxWaitTimeInSeconds(*r.ko.Spec.TrainingJobDefinition.StoppingCondition.MaxWaitTimeInSeconds)
			}
			f4.SetStoppingCondition(f4f13)
		}
		if r.ko.Spec.TrainingJobDefinition.TuningObjective != nil {
			f4f14 := &svcsdk.HyperParameterTuningJobObjective{}
			if r.ko.Spec.TrainingJobDefinition.TuningObjective.MetricName != nil {
				f4f14.SetMetricName(*r.ko.Spec.TrainingJobDefinition.TuningObjective.MetricName)
			}
			if r.ko.Spec.TrainingJobDefinition.TuningObjective.Type != nil {
				f4f14.SetType(*r.ko.Spec.TrainingJobDefinition.TuningObjective.Type)
			}
			f4.SetTuningObjective(f4f14)
		}
		if r.ko.Spec.TrainingJobDefinition.VPCConfig != nil {
			f4f15 := &svcsdk.VpcConfig{}
			if r.ko.Spec.TrainingJobDefinition.VPCConfig.SecurityGroupIDs != nil {
				f4f15f0 := []*string{}
				for _, f4f15f0iter := range r.ko.Spec.TrainingJobDefinition.VPCConfig.SecurityGroupIDs {
					var f4f15f0elem string
					f4f15f0elem = *f4f15f0iter
					f4f15f0 = append(f4f15f0, &f4f15f0elem)
				}
				f4f15.SetSecurityGroupIds(f4f15f0)
			}
			if r.ko.Spec.TrainingJobDefinition.VPCConfig.Subnets != nil {
				f4f15f1 := []*string{}
				for _, f4f15f1iter := range r.ko.Spec.TrainingJobDefinition.VPCConfig.Subnets {
					var f4f15f1elem string
					f4f15f1elem = *f4f15f1iter
					f4f15f1 = append(f4f15f1, &f4f15f1elem)
				}
				f4f15.SetSubnets(f4f15f1)
			}
			f4.SetVpcConfig(f4f15)
		}
		res.SetTrainingJobDefinition(f4)
	}
	if r.ko.Spec.TrainingJobDefinitions != nil {
		f5 := []*svcsdk.HyperParameterTrainingJobDefinition{}
		for _, f5iter := range r.ko.Spec.TrainingJobDefinitions {
			f5elem := &svcsdk.HyperParameterTrainingJobDefinition{}
			if f5iter.AlgorithmSpecification != nil {
				f5elemf0 := &svcsdk.HyperParameterAlgorithmSpecification{}
				if f5iter.AlgorithmSpecification.AlgorithmName != nil {
					f5elemf0.SetAlgorithmName(*f5iter.AlgorithmSpecification.AlgorithmName)
				}
				if f5iter.AlgorithmSpecification.MetricDefinitions != nil {
					f5elemf0f1 := []*svcsdk.MetricDefinition{}
					for _, f5elemf0f1iter := range f5iter.AlgorithmSpecification.MetricDefinitions {
						f5elemf0f1elem := &svcsdk.MetricDefinition{}
						if f5elemf0f1iter.Name != nil {
							f5elemf0f1elem.SetName(*f5elemf0f1iter.Name)
						}
						if f5elemf0f1iter.Regex != nil {
							f5elemf0f1elem.SetRegex(*f5elemf0f1iter.Regex)
						}
						f5elemf0f1 = append(f5elemf0f1, f5elemf0f1elem)
					}
					f5elemf0.SetMetricDefinitions(f5elemf0f1)
				}
				if f5iter.AlgorithmSpecification.TrainingImage != nil {
					f5elemf0.SetTrainingImage(*f5iter.AlgorithmSpecification.TrainingImage)
				}
				if f5iter.AlgorithmSpecification.TrainingInputMode != nil {
					f5elemf0.SetTrainingInputMode(*f5iter.AlgorithmSpecification.TrainingInputMode)
				}
				f5elem.SetAlgorithmSpecification(f5elemf0)
			}
			if f5iter.CheckpointConfig != nil {
				f5elemf1 := &svcsdk.CheckpointConfig{}
				if f5iter.CheckpointConfig.LocalPath != nil {
					f5elemf1.SetLocalPath(*f5iter.CheckpointConfig.LocalPath)
				}
				if f5iter.CheckpointConfig.S3URI != nil {
					f5elemf1.SetS3Uri(*f5iter.CheckpointConfig.S3URI)
				}
				f5elem.SetCheckpointConfig(f5elemf1)
			}
			if f5iter.DefinitionName != nil {
				f5elem.SetDefinitionName(*f5iter.DefinitionName)
			}
			if f5iter.EnableInterContainerTrafficEncryption != nil {
				f5elem.SetEnableInterContainerTrafficEncryption(*f5iter.EnableInterContainerTrafficEncryption)
			}
			if f5iter.EnableManagedSpotTraining != nil {
				f5elem.SetEnableManagedSpotTraining(*f5iter.EnableManagedSpotTraining)
			}
			if f5iter.EnableNetworkIsolation != nil {
				f5elem.SetEnableNetworkIsolation(*f5iter.EnableNetworkIsolation)
			}
			if f5iter.HyperParameterRanges != nil {
				f5elemf6 := &svcsdk.ParameterRanges{}
				if f5iter.HyperParameterRanges.AutoParameters != nil {
					f5elemf6f0 := []*svcsdk.AutoParameter{}
					for _, f5elemf6f0iter := range f5iter.HyperParameterRanges.AutoParameters {
						f5elemf6f0elem := &svcsdk.AutoParameter{}
						if f5elemf6f0iter.Name != nil {
							f5elemf6f0elem.SetName(*f5elemf6f0iter.Name)
						}
						if f5elemf6f0iter.ValueHint != nil {
							f5elemf6f0elem.SetValueHint(*f5elemf6f0iter.ValueHint)
						}
						f5elemf6f0 = append(f5elemf6f0, f5elemf6f0elem)
					}
					f5elemf6.SetAutoParameters(f5elemf6f0)
				}
				if f5iter.HyperParameterRanges.CategoricalParameterRanges != nil {
					f5elemf6f1 := []*svcsdk.CategoricalParameterRange{}
					for _, f5elemf6f1iter := range f5iter.HyperParameterRanges.CategoricalParameterRanges {
						f5elemf6f1elem := &svcsdk.CategoricalParameterRange{}
						if f5elemf6f1iter.Name != nil {
							f5elemf6f1elem.SetName(*f5elemf6f1iter.Name)
						}
						if f5elemf6f1iter.Values != nil {
							f5elemf6f1elemf1 := []*string{}
							for _, f5elemf6f1elemf1iter := range f5elemf6f1iter.Values {
								var f5elemf6f1elemf1elem string
								f5elemf6f1elemf1elem = *f5elemf6f1elemf1iter
								f5elemf6f1elemf1 = append(f5elemf6f1elemf1, &f5elemf6f1elemf1elem)
							}
							f5elemf6f1elem.SetValues(f5elemf6f1elemf1)
						}
						f5elemf6f1 = append(f5elemf6f1, f5elemf6f1elem)
					}
					f5elemf6.SetCategoricalParameterRanges(f5elemf6f1)
				}
				if f5iter.HyperParameterRanges.ContinuousParameterRanges != nil {
					f5elemf6f2 := []*svcsdk.ContinuousParameterRange{}
					for _, f5elemf6f2iter := range f5iter.HyperParameterRanges.ContinuousParameterRanges {
						f5elemf6f2elem := &svcsdk.ContinuousParameterRange{}
						if f5elemf6f2iter.MaxValue != nil {
							f5elemf6f2elem.SetMaxValue(*f5elemf6f2iter.MaxValue)
						}
						if f5elemf6f2iter.MinValue != nil {
							f5elemf6f2elem.SetMinValue(*f5elemf6f2iter.MinValue)
						}
						if f5elemf6f2iter.Name != nil {
							f5elemf6f2elem.SetName(*f5elemf6f2iter.Name)
						}
						if f5elemf6f2iter.ScalingType != nil {
							f5elemf6f2elem.SetScalingType(*f5elemf6f2iter.ScalingType)
						}
						f5elemf6f2 = append(f5elemf6f2, f5elemf6f2elem)
					}
					f5elemf6.SetContinuousParameterRanges(f5elemf6f2)
				}
				if f5iter.HyperParameterRanges.IntegerParameterRanges != nil {
					f5elemf6f3 := []*svcsdk.IntegerParameterRange{}
					for _, f5elemf6f3iter := range f5iter.HyperParameterRanges.IntegerParameterRanges {
						f5elemf6f3elem := &svcsdk.IntegerParameterRange{}
						if f5elemf6f3iter.MaxValue != nil {
							f5elemf6f3elem.SetMaxValue(*f5elemf6f3iter.MaxValue)
						}
						if f5elemf6f3iter.MinValue != nil {
							f5elemf6f3elem.SetMinValue(*f5elemf6f3iter.MinValue)
						}
						if f5elemf6f3iter.Name != nil {
							f5elemf6f3elem.SetName(*f5elemf6f3iter.Name)
						}
						if f5elemf6f3iter.ScalingType != nil {
							f5elemf6f3elem.SetScalingType(*f5elemf6f3iter.ScalingType)
						}
						f5elemf6f3 = append(f5elemf6f3, f5elemf6f3elem)
					}
					f5elemf6.SetIntegerParameterRanges(f5elemf6f3)
				}
				f5elem.SetHyperParameterRanges(f5elemf6)
			}
			if f5iter.InputDataConfig != nil {
				f5elemf7 := []*svcsdk.Channel{}
				for _, f5elemf7iter := range f5iter.InputDataConfig {
					f5elemf7elem := &svcsdk.Channel{}
					if f5elemf7iter.ChannelName != nil {
						f5elemf7elem.SetChannelName(*f5elemf7iter.ChannelName)
					}
					if f5elemf7iter.CompressionType != nil {
						f5elemf7elem.SetCompressionType(*f5elemf7iter.CompressionType)
					}
					if f5elemf7iter.ContentType != nil {
						f5elemf7elem.SetContentType(*f5elemf7iter.ContentType)
					}
					if f5elemf7iter.DataSource != nil {
						f5elemf7elemf3 := &svcsdk.DataSource{}
						if f5elemf7iter.DataSource.FileSystemDataSource != nil {
							f5elemf7elemf3f0 := &svcsdk.FileSystemDataSource{}
							if f5elemf7iter.DataSource.FileSystemDataSource.DirectoryPath != nil {
								f5elemf7elemf3f0.SetDirectoryPath(*f5elemf7iter.DataSource.FileSystemDataSource.DirectoryPath)
							}
							if f5elemf7iter.DataSource.FileSystemDataSource.FileSystemAccessMode != nil {
								f5elemf7elemf3f0.SetFileSystemAccessMode(*f5elemf7iter.DataSource.FileSystemDataSource.FileSystemAccessMode)
							}
							if f5elemf7iter.DataSource.FileSystemDataSource.FileSystemID != nil {
								f5elemf7elemf3f0.SetFileSystemId(*f5elemf7iter.DataSource.FileSystemDataSource.FileSystemID)
							}
							if f5elemf7iter.DataSource.FileSystemDataSource.FileSystemType != nil {
								f5elemf7elemf3f0.SetFileSystemType(*f5elemf7iter.DataSource.FileSystemDataSource.FileSystemType)
							}
							f5elemf7elemf3.SetFileSystemDataSource(f5elemf7elemf3f0)
						}
						if f5elemf7iter.DataSource.S3DataSource != nil {
							f5elemf7elemf3f1 := &svcsdk.S3DataSource{}
							if f5elemf7iter.DataSource.S3DataSource.AttributeNames != nil {
								f5elemf7elemf3f1f0 := []*string{}
								for _, f5elemf7elemf3f1f0iter := range f5elemf7iter.DataSource.S3DataSource.AttributeNames {
									var f5elemf7elemf3f1f0elem string
									f5elemf7elemf3f1f0elem = *f5elemf7elemf3f1f0iter
									f5elemf7elemf3f1f0 = append(f5elemf7elemf3f1f0, &f5elemf7elemf3f1f0elem)
								}
								f5elemf7elemf3f1.SetAttributeNames(f5elemf7elemf3f1f0)
							}
							if f5elemf7iter.DataSource.S3DataSource.InstanceGroupNames != nil {
								f5elemf7elemf3f1f1 := []*string{}
								for _, f5elemf7elemf3f1f1iter := range f5elemf7iter.DataSource.S3DataSource.InstanceGroupNames {
									var f5elemf7elemf3f1f1elem string
									f5elemf7elemf3f1f1elem = *f5elemf7elemf3f1f1iter
									f5elemf7elemf3f1f1 = append(f5elemf7elemf3f1f1, &f5elemf7elemf3f1f1elem)
								}
								f5elemf7elemf3f1.SetInstanceGroupNames(f5elemf7elemf3f1f1)
							}
							if f5elemf7iter.DataSource.S3DataSource.S3DataDistributionType != nil {
								f5elemf7elemf3f1.SetS3DataDistributionType(*f5elemf7iter.DataSource.S3DataSource.S3DataDistributionType)
							}
							if f5elemf7iter.DataSource.S3DataSource.S3DataType != nil {
								f5elemf7elemf3f1.SetS3DataType(*f5elemf7iter.DataSource.S3DataSource.S3DataType)
							}
							if f5elemf7iter.DataSource.S3DataSource.S3URI != nil {
								f5elemf7elemf3f1.SetS3Uri(*f5elemf7iter.DataSource.S3DataSource.S3URI)
							}
							f5elemf7elemf3.SetS3DataSource(f5elemf7elemf3f1)
						}
						f5elemf7elem.SetDataSource(f5elemf7elemf3)
					}
					if f5elemf7iter.InputMode != nil {
						f5elemf7elem.SetInputMode(*f5elemf7iter.InputMode)
					}
					if f5elemf7iter.RecordWrapperType != nil {
						f5elemf7elem.SetRecordWrapperType(*f5elemf7iter.RecordWrapperType)
					}
					if f5elemf7iter.ShuffleConfig != nil {
						f5elemf7elemf6 := &svcsdk.ShuffleConfig{}
						if f5elemf7iter.ShuffleConfig.Seed != nil {
							f5elemf7elemf6.SetSeed(*f5elemf7iter.ShuffleConfig.Seed)
						}
						f5elemf7elem.SetShuffleConfig(f5elemf7elemf6)
					}
					f5elemf7 = append(f5elemf7, f5elemf7elem)
				}
				f5elem.SetInputDataConfig(f5elemf7)
			}
			if f5iter.OutputDataConfig != nil {
				f5elemf8 := &svcsdk.OutputDataConfig{}
				if f5iter.OutputDataConfig.CompressionType != nil {
					f5elemf8.SetCompressionType(*f5iter.OutputDataConfig.CompressionType)
				}
				if f5iter.OutputDataConfig.KMSKeyID != nil {
					f5elemf8.SetKmsKeyId(*f5iter.OutputDataConfig.KMSKeyID)
				}
				if f5iter.OutputDataConfig.S3OutputPath != nil {
					f5elemf8.SetS3OutputPath(*f5iter.OutputDataConfig.S3OutputPath)
				}
				f5elem.SetOutputDataConfig(f5elemf8)
			}
			if f5iter.ResourceConfig != nil {
				f5elemf9 := &svcsdk.ResourceConfig{}
				if f5iter.ResourceConfig.InstanceCount != nil {
					f5elemf9.SetInstanceCount(*f5iter.ResourceConfig.InstanceCount)
				}
				if f5iter.ResourceConfig.InstanceGroups != nil {
					f5elemf9f1 := []*svcsdk.InstanceGroup{}
					for _, f5elemf9f1iter := range f5iter.ResourceConfig.InstanceGroups {
						f5elemf9f1elem := &svcsdk.InstanceGroup{}
						if f5elemf9f1iter.InstanceCount != nil {
							f5elemf9f1elem.SetInstanceCount(*f5elemf9f1iter.InstanceCount)
						}
						if f5elemf9f1iter.InstanceGroupName != nil {
							f5elemf9f1elem.SetInstanceGroupName(*f5elemf9f1iter.InstanceGroupName)
						}
						if f5elemf9f1iter.InstanceType != nil {
							f5elemf9f1elem.SetInstanceType(*f5elemf9f1iter.InstanceType)
						}
						f5elemf9f1 = append(f5elemf9f1, f5elemf9f1elem)
					}
					f5elemf9.SetInstanceGroups(f5elemf9f1)
				}
				if f5iter.ResourceConfig.InstanceType != nil {
					f5elemf9.SetInstanceType(*f5iter.ResourceConfig.InstanceType)
				}
				if f5iter.ResourceConfig.KeepAlivePeriodInSeconds != nil {
					f5elemf9.SetKeepAlivePeriodInSeconds(*f5iter.ResourceConfig.KeepAlivePeriodInSeconds)
				}
				if f5iter.ResourceConfig.VolumeKMSKeyID != nil {
					f5elemf9.SetVolumeKmsKeyId(*f5iter.ResourceConfig.VolumeKMSKeyID)
				}
				if f5iter.ResourceConfig.VolumeSizeInGB != nil {
					f5elemf9.SetVolumeSizeInGB(*f5iter.ResourceConfig.VolumeSizeInGB)
				}
				f5elem.SetResourceConfig(f5elemf9)
			}
			if f5iter.RetryStrategy != nil {
				f5elemf10 := &svcsdk.RetryStrategy{}
				if f5iter.RetryStrategy.MaximumRetryAttempts != nil {
					f5elemf10.SetMaximumRetryAttempts(*f5iter.RetryStrategy.MaximumRetryAttempts)
				}
				f5elem.SetRetryStrategy(f5elemf10)
			}
			if f5iter.RoleARN != nil {
				f5elem.SetRoleArn(*f5iter.RoleARN)
			}
			if f5iter.StaticHyperParameters != nil {
				f5elemf12 := map[string]*string{}
				for f5elemf12key, f5elemf12valiter := range f5iter.StaticHyperParameters {
					var f5elemf12val string
					f5elemf12val = *f5elemf12valiter
					f5elemf12[f5elemf12key] = &f5elemf12val
				}
				f5elem.SetStaticHyperParameters(f5elemf12)
			}
			if f5iter.StoppingCondition != nil {
				f5elemf13 := &svcsdk.StoppingCondition{}
				if f5iter.StoppingCondition.MaxPendingTimeInSeconds != nil {
					f5elemf13.SetMaxPendingTimeInSeconds(*f5iter.StoppingCondition.MaxPendingTimeInSeconds)
				}
				if f5iter.StoppingCondition.MaxRuntimeInSeconds != nil {
					f5elemf13.SetMaxRuntimeInSeconds(*f5iter.StoppingCondition.MaxRuntimeInSeconds)
				}
				if f5iter.StoppingCondition.MaxWaitTimeInSeconds != nil {
					f5elemf13.SetMaxWaitTimeInSeconds(*f5iter.StoppingCondition.MaxWaitTimeInSeconds)
				}
				f5elem.SetStoppingCondition(f5elemf13)
			}
			if f5iter.TuningObjective != nil {
				f5elemf14 := &svcsdk.HyperParameterTuningJobObjective{}
				if f5iter.TuningObjective.MetricName != nil {
					f5elemf14.SetMetricName(*f5iter.TuningObjective.MetricName)
				}
				if f5iter.TuningObjective.Type != nil {
					f5elemf14.SetType(*f5iter.TuningObjective.Type)
				}
				f5elem.SetTuningObjective(f5elemf14)
			}
			if f5iter.VPCConfig != nil {
				f5elemf15 := &svcsdk.VpcConfig{}
				if f5iter.VPCConfig.SecurityGroupIDs != nil {
					f5elemf15f0 := []*string{}
					for _, f5elemf15f0iter := range f5iter.VPCConfig.SecurityGroupIDs {
						var f5elemf15f0elem string
						f5elemf15f0elem = *f5elemf15f0iter
						f5elemf15f0 = append(f5elemf15f0, &f5elemf15f0elem)
					}
					f5elemf15.SetSecurityGroupIds(f5elemf15f0)
				}
				if f5iter.VPCConfig.Subnets != nil {
					f5elemf15f1 := []*string{}
					for _, f5elemf15f1iter := range f5iter.VPCConfig.Subnets {
						var f5elemf15f1elem string
						f5elemf15f1elem = *f5elemf15f1iter
						f5elemf15f1 = append(f5elemf15f1, &f5elemf15f1elem)
					}
					f5elemf15.SetSubnets(f5elemf15f1)
				}
				f5elem.SetVpcConfig(f5elemf15)
			}
			f5 = append(f5, f5elem)
		}
		res.SetTrainingJobDefinitions(f5)
	}
	if r.ko.Spec.WarmStartConfig != nil {
		f6 := &svcsdk.HyperParameterTuningJobWarmStartConfig{}
		if r.ko.Spec.WarmStartConfig.ParentHyperParameterTuningJobs != nil {
			f6f0 := []*svcsdk.ParentHyperParameterTuningJob{}
			for _, f6f0iter := range r.ko.Spec.WarmStartConfig.ParentHyperParameterTuningJobs {
				f6f0elem := &svcsdk.ParentHyperParameterTuningJob{}
				if f6f0iter.HyperParameterTuningJobName != nil {
					f6f0elem.SetHyperParameterTuningJobName(*f6f0iter.HyperParameterTuningJobName)
				}
				f6f0 = append(f6f0, f6f0elem)
			}
			f6.SetParentHyperParameterTuningJobs(f6f0)
		}
		if r.ko.Spec.WarmStartConfig.WarmStartType != nil {
			f6.SetWarmStartType(*r.ko.Spec.WarmStartConfig.WarmStartType)
		}
		res.SetWarmStartConfig(f6)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (*resource, error) {
	return nil, ackerr.NewTerminalError(ackerr.NotImplemented)
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	latestStatus := r.ko.Status.HyperParameterTuningJobStatus
	if latestStatus != nil {
		if *latestStatus == svcsdk.HyperParameterTuningJobStatusStopping {
			return r, requeueWaitWhileDeleting
		}

		// Call StopHyperParameterTuningJob only if the job is InProgress, otherwise just
		// return nil to mark the resource Unmanaged
		if *latestStatus != svcsdk.HyperParameterTuningJobStatusInProgress {
			return r, err
		}
	}
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.StopHyperParameterTuningJobOutput
	_ = resp
	resp, err = rm.sdkapi.StopHyperParameterTuningJobWithContext(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "StopHyperParameterTuningJob", err)

	if err == nil {
		if observed, err := rm.sdkFind(ctx, r); err != ackerr.NotFound {
			if err != nil {
				return nil, err
			}
			r.SetStatus(observed)
			return r, requeueWaitWhileDeleting
		}
	}

	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.StopHyperParameterTuningJobInput, error) {
	res := &svcsdk.StopHyperParameterTuningJobInput{}

	if r.ko.Spec.HyperParameterTuningJobName != nil {
		res.SetHyperParameterTuningJobName(*r.ko.Spec.HyperParameterTuningJobName)
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.HyperParameterTuningJob,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}
	awsErr, ok := ackerr.AWSError(err)
	if !ok {
		return false
	}
	switch awsErr.Code() {
	case "ResourceNotFound",
		"ResourceInUse",
		"InvalidParameterCombination",
		"InvalidParameterValue",
		"MissingParameter":
		return true
	default:
		return false
	}
}
