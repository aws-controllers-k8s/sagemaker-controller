// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package hyper_parameter_tuning_job

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/sagemaker"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/sagemaker-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.SageMaker{}
	_ = &svcapitypes.HyperParameterTuningJob{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.DescribeHyperParameterTuningJobOutput
	resp, err = rm.sdkapi.DescribeHyperParameterTuningJobWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "DescribeHyperParameterTuningJob", err)
	if err != nil {
		if awsErr, ok := ackerr.AWSError(err); ok && awsErr.Code() == "ResourceNotFound" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.BestTrainingJob != nil {
		f0 := &svcapitypes.HyperParameterTrainingJobSummary{}
		if resp.BestTrainingJob.CreationTime != nil {
			f0.CreationTime = &metav1.Time{*resp.BestTrainingJob.CreationTime}
		}
		if resp.BestTrainingJob.FailureReason != nil {
			f0.FailureReason = resp.BestTrainingJob.FailureReason
		}
		if resp.BestTrainingJob.FinalHyperParameterTuningJobObjectiveMetric != nil {
			f0f2 := &svcapitypes.FinalHyperParameterTuningJobObjectiveMetric{}
			if resp.BestTrainingJob.FinalHyperParameterTuningJobObjectiveMetric.MetricName != nil {
				f0f2.MetricName = resp.BestTrainingJob.FinalHyperParameterTuningJobObjectiveMetric.MetricName
			}
			if resp.BestTrainingJob.FinalHyperParameterTuningJobObjectiveMetric.Type != nil {
				f0f2.Type = resp.BestTrainingJob.FinalHyperParameterTuningJobObjectiveMetric.Type
			}
			if resp.BestTrainingJob.FinalHyperParameterTuningJobObjectiveMetric.Value != nil {
				f0f2.Value = resp.BestTrainingJob.FinalHyperParameterTuningJobObjectiveMetric.Value
			}
			f0.FinalHyperParameterTuningJobObjectiveMetric = f0f2
		}
		if resp.BestTrainingJob.ObjectiveStatus != nil {
			f0.ObjectiveStatus = resp.BestTrainingJob.ObjectiveStatus
		}
		if resp.BestTrainingJob.TrainingEndTime != nil {
			f0.TrainingEndTime = &metav1.Time{*resp.BestTrainingJob.TrainingEndTime}
		}
		if resp.BestTrainingJob.TrainingJobArn != nil {
			f0.TrainingJobARN = resp.BestTrainingJob.TrainingJobArn
		}
		if resp.BestTrainingJob.TrainingJobDefinitionName != nil {
			f0.TrainingJobDefinitionName = resp.BestTrainingJob.TrainingJobDefinitionName
		}
		if resp.BestTrainingJob.TrainingJobName != nil {
			f0.TrainingJobName = resp.BestTrainingJob.TrainingJobName
		}
		if resp.BestTrainingJob.TrainingJobStatus != nil {
			f0.TrainingJobStatus = resp.BestTrainingJob.TrainingJobStatus
		}
		if resp.BestTrainingJob.TrainingStartTime != nil {
			f0.TrainingStartTime = &metav1.Time{*resp.BestTrainingJob.TrainingStartTime}
		}
		if resp.BestTrainingJob.TunedHyperParameters != nil {
			f0f10 := map[string]*string{}
			for f0f10key, f0f10valiter := range resp.BestTrainingJob.TunedHyperParameters {
				var f0f10val string
				f0f10val = *f0f10valiter
				f0f10[f0f10key] = &f0f10val
			}
			f0.TunedHyperParameters = f0f10
		}
		if resp.BestTrainingJob.TuningJobName != nil {
			f0.TuningJobName = resp.BestTrainingJob.TuningJobName
		}
		ko.Status.BestTrainingJob = f0
	} else {
		ko.Status.BestTrainingJob = nil
	}
	if resp.FailureReason != nil {
		ko.Status.FailureReason = resp.FailureReason
	} else {
		ko.Status.FailureReason = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.HyperParameterTuningJobArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.HyperParameterTuningJobArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.HyperParameterTuningJobConfig != nil {
		f5 := &svcapitypes.HyperParameterTuningJobConfig{}
		if resp.HyperParameterTuningJobConfig.HyperParameterTuningJobObjective != nil {
			f5f0 := &svcapitypes.HyperParameterTuningJobObjective{}
			if resp.HyperParameterTuningJobConfig.HyperParameterTuningJobObjective.MetricName != nil {
				f5f0.MetricName = resp.HyperParameterTuningJobConfig.HyperParameterTuningJobObjective.MetricName
			}
			if resp.HyperParameterTuningJobConfig.HyperParameterTuningJobObjective.Type != nil {
				f5f0.Type = resp.HyperParameterTuningJobConfig.HyperParameterTuningJobObjective.Type
			}
			f5.HyperParameterTuningJobObjective = f5f0
		}
		if resp.HyperParameterTuningJobConfig.ParameterRanges != nil {
			f5f1 := &svcapitypes.ParameterRanges{}
			if resp.HyperParameterTuningJobConfig.ParameterRanges.CategoricalParameterRanges != nil {
				f5f1f0 := []*svcapitypes.CategoricalParameterRange{}
				for _, f5f1f0iter := range resp.HyperParameterTuningJobConfig.ParameterRanges.CategoricalParameterRanges {
					f5f1f0elem := &svcapitypes.CategoricalParameterRange{}
					if f5f1f0iter.Name != nil {
						f5f1f0elem.Name = f5f1f0iter.Name
					}
					if f5f1f0iter.Values != nil {
						f5f1f0elemf1 := []*string{}
						for _, f5f1f0elemf1iter := range f5f1f0iter.Values {
							var f5f1f0elemf1elem string
							f5f1f0elemf1elem = *f5f1f0elemf1iter
							f5f1f0elemf1 = append(f5f1f0elemf1, &f5f1f0elemf1elem)
						}
						f5f1f0elem.Values = f5f1f0elemf1
					}
					f5f1f0 = append(f5f1f0, f5f1f0elem)
				}
				f5f1.CategoricalParameterRanges = f5f1f0
			}
			if resp.HyperParameterTuningJobConfig.ParameterRanges.ContinuousParameterRanges != nil {
				f5f1f1 := []*svcapitypes.ContinuousParameterRange{}
				for _, f5f1f1iter := range resp.HyperParameterTuningJobConfig.ParameterRanges.ContinuousParameterRanges {
					f5f1f1elem := &svcapitypes.ContinuousParameterRange{}
					if f5f1f1iter.MaxValue != nil {
						f5f1f1elem.MaxValue = f5f1f1iter.MaxValue
					}
					if f5f1f1iter.MinValue != nil {
						f5f1f1elem.MinValue = f5f1f1iter.MinValue
					}
					if f5f1f1iter.Name != nil {
						f5f1f1elem.Name = f5f1f1iter.Name
					}
					if f5f1f1iter.ScalingType != nil {
						f5f1f1elem.ScalingType = f5f1f1iter.ScalingType
					}
					f5f1f1 = append(f5f1f1, f5f1f1elem)
				}
				f5f1.ContinuousParameterRanges = f5f1f1
			}
			if resp.HyperParameterTuningJobConfig.ParameterRanges.IntegerParameterRanges != nil {
				f5f1f2 := []*svcapitypes.IntegerParameterRange{}
				for _, f5f1f2iter := range resp.HyperParameterTuningJobConfig.ParameterRanges.IntegerParameterRanges {
					f5f1f2elem := &svcapitypes.IntegerParameterRange{}
					if f5f1f2iter.MaxValue != nil {
						f5f1f2elem.MaxValue = f5f1f2iter.MaxValue
					}
					if f5f1f2iter.MinValue != nil {
						f5f1f2elem.MinValue = f5f1f2iter.MinValue
					}
					if f5f1f2iter.Name != nil {
						f5f1f2elem.Name = f5f1f2iter.Name
					}
					if f5f1f2iter.ScalingType != nil {
						f5f1f2elem.ScalingType = f5f1f2iter.ScalingType
					}
					f5f1f2 = append(f5f1f2, f5f1f2elem)
				}
				f5f1.IntegerParameterRanges = f5f1f2
			}
			f5.ParameterRanges = f5f1
		}
		if resp.HyperParameterTuningJobConfig.ResourceLimits != nil {
			f5f2 := &svcapitypes.ResourceLimits{}
			if resp.HyperParameterTuningJobConfig.ResourceLimits.MaxNumberOfTrainingJobs != nil {
				f5f2.MaxNumberOfTrainingJobs = resp.HyperParameterTuningJobConfig.ResourceLimits.MaxNumberOfTrainingJobs
			}
			if resp.HyperParameterTuningJobConfig.ResourceLimits.MaxParallelTrainingJobs != nil {
				f5f2.MaxParallelTrainingJobs = resp.HyperParameterTuningJobConfig.ResourceLimits.MaxParallelTrainingJobs
			}
			f5.ResourceLimits = f5f2
		}
		if resp.HyperParameterTuningJobConfig.Strategy != nil {
			f5.Strategy = resp.HyperParameterTuningJobConfig.Strategy
		}
		if resp.HyperParameterTuningJobConfig.TrainingJobEarlyStoppingType != nil {
			f5.TrainingJobEarlyStoppingType = resp.HyperParameterTuningJobConfig.TrainingJobEarlyStoppingType
		}
		if resp.HyperParameterTuningJobConfig.TuningJobCompletionCriteria != nil {
			f5f5 := &svcapitypes.TuningJobCompletionCriteria{}
			if resp.HyperParameterTuningJobConfig.TuningJobCompletionCriteria.TargetObjectiveMetricValue != nil {
				f5f5.TargetObjectiveMetricValue = resp.HyperParameterTuningJobConfig.TuningJobCompletionCriteria.TargetObjectiveMetricValue
			}
			f5.TuningJobCompletionCriteria = f5f5
		}
		ko.Spec.HyperParameterTuningJobConfig = f5
	} else {
		ko.Spec.HyperParameterTuningJobConfig = nil
	}
	if resp.HyperParameterTuningJobName != nil {
		ko.Spec.HyperParameterTuningJobName = resp.HyperParameterTuningJobName
	} else {
		ko.Spec.HyperParameterTuningJobName = nil
	}
	if resp.HyperParameterTuningJobStatus != nil {
		ko.Status.HyperParameterTuningJobStatus = resp.HyperParameterTuningJobStatus
	} else {
		ko.Status.HyperParameterTuningJobStatus = nil
	}
	if resp.OverallBestTrainingJob != nil {
		f10 := &svcapitypes.HyperParameterTrainingJobSummary{}
		if resp.OverallBestTrainingJob.CreationTime != nil {
			f10.CreationTime = &metav1.Time{*resp.OverallBestTrainingJob.CreationTime}
		}
		if resp.OverallBestTrainingJob.FailureReason != nil {
			f10.FailureReason = resp.OverallBestTrainingJob.FailureReason
		}
		if resp.OverallBestTrainingJob.FinalHyperParameterTuningJobObjectiveMetric != nil {
			f10f2 := &svcapitypes.FinalHyperParameterTuningJobObjectiveMetric{}
			if resp.OverallBestTrainingJob.FinalHyperParameterTuningJobObjectiveMetric.MetricName != nil {
				f10f2.MetricName = resp.OverallBestTrainingJob.FinalHyperParameterTuningJobObjectiveMetric.MetricName
			}
			if resp.OverallBestTrainingJob.FinalHyperParameterTuningJobObjectiveMetric.Type != nil {
				f10f2.Type = resp.OverallBestTrainingJob.FinalHyperParameterTuningJobObjectiveMetric.Type
			}
			if resp.OverallBestTrainingJob.FinalHyperParameterTuningJobObjectiveMetric.Value != nil {
				f10f2.Value = resp.OverallBestTrainingJob.FinalHyperParameterTuningJobObjectiveMetric.Value
			}
			f10.FinalHyperParameterTuningJobObjectiveMetric = f10f2
		}
		if resp.OverallBestTrainingJob.ObjectiveStatus != nil {
			f10.ObjectiveStatus = resp.OverallBestTrainingJob.ObjectiveStatus
		}
		if resp.OverallBestTrainingJob.TrainingEndTime != nil {
			f10.TrainingEndTime = &metav1.Time{*resp.OverallBestTrainingJob.TrainingEndTime}
		}
		if resp.OverallBestTrainingJob.TrainingJobArn != nil {
			f10.TrainingJobARN = resp.OverallBestTrainingJob.TrainingJobArn
		}
		if resp.OverallBestTrainingJob.TrainingJobDefinitionName != nil {
			f10.TrainingJobDefinitionName = resp.OverallBestTrainingJob.TrainingJobDefinitionName
		}
		if resp.OverallBestTrainingJob.TrainingJobName != nil {
			f10.TrainingJobName = resp.OverallBestTrainingJob.TrainingJobName
		}
		if resp.OverallBestTrainingJob.TrainingJobStatus != nil {
			f10.TrainingJobStatus = resp.OverallBestTrainingJob.TrainingJobStatus
		}
		if resp.OverallBestTrainingJob.TrainingStartTime != nil {
			f10.TrainingStartTime = &metav1.Time{*resp.OverallBestTrainingJob.TrainingStartTime}
		}
		if resp.OverallBestTrainingJob.TunedHyperParameters != nil {
			f10f10 := map[string]*string{}
			for f10f10key, f10f10valiter := range resp.OverallBestTrainingJob.TunedHyperParameters {
				var f10f10val string
				f10f10val = *f10f10valiter
				f10f10[f10f10key] = &f10f10val
			}
			f10.TunedHyperParameters = f10f10
		}
		if resp.OverallBestTrainingJob.TuningJobName != nil {
			f10.TuningJobName = resp.OverallBestTrainingJob.TuningJobName
		}
		ko.Status.OverallBestTrainingJob = f10
	} else {
		ko.Status.OverallBestTrainingJob = nil
	}
	if resp.TrainingJobDefinition != nil {
		f11 := &svcapitypes.HyperParameterTrainingJobDefinition{}
		if resp.TrainingJobDefinition.AlgorithmSpecification != nil {
			f11f0 := &svcapitypes.HyperParameterAlgorithmSpecification{}
			if resp.TrainingJobDefinition.AlgorithmSpecification.AlgorithmName != nil {
				f11f0.AlgorithmName = resp.TrainingJobDefinition.AlgorithmSpecification.AlgorithmName
			}
			if resp.TrainingJobDefinition.AlgorithmSpecification.MetricDefinitions != nil {
				f11f0f1 := []*svcapitypes.MetricDefinition{}
				for _, f11f0f1iter := range resp.TrainingJobDefinition.AlgorithmSpecification.MetricDefinitions {
					f11f0f1elem := &svcapitypes.MetricDefinition{}
					if f11f0f1iter.Name != nil {
						f11f0f1elem.Name = f11f0f1iter.Name
					}
					if f11f0f1iter.Regex != nil {
						f11f0f1elem.Regex = f11f0f1iter.Regex
					}
					f11f0f1 = append(f11f0f1, f11f0f1elem)
				}
				f11f0.MetricDefinitions = f11f0f1
			}
			if resp.TrainingJobDefinition.AlgorithmSpecification.TrainingImage != nil {
				f11f0.TrainingImage = resp.TrainingJobDefinition.AlgorithmSpecification.TrainingImage
			}
			if resp.TrainingJobDefinition.AlgorithmSpecification.TrainingInputMode != nil {
				f11f0.TrainingInputMode = resp.TrainingJobDefinition.AlgorithmSpecification.TrainingInputMode
			}
			f11.AlgorithmSpecification = f11f0
		}
		if resp.TrainingJobDefinition.CheckpointConfig != nil {
			f11f1 := &svcapitypes.CheckpointConfig{}
			if resp.TrainingJobDefinition.CheckpointConfig.LocalPath != nil {
				f11f1.LocalPath = resp.TrainingJobDefinition.CheckpointConfig.LocalPath
			}
			if resp.TrainingJobDefinition.CheckpointConfig.S3Uri != nil {
				f11f1.S3URI = resp.TrainingJobDefinition.CheckpointConfig.S3Uri
			}
			f11.CheckpointConfig = f11f1
		}
		if resp.TrainingJobDefinition.DefinitionName != nil {
			f11.DefinitionName = resp.TrainingJobDefinition.DefinitionName
		}
		if resp.TrainingJobDefinition.EnableInterContainerTrafficEncryption != nil {
			f11.EnableInterContainerTrafficEncryption = resp.TrainingJobDefinition.EnableInterContainerTrafficEncryption
		}
		if resp.TrainingJobDefinition.EnableManagedSpotTraining != nil {
			f11.EnableManagedSpotTraining = resp.TrainingJobDefinition.EnableManagedSpotTraining
		}
		if resp.TrainingJobDefinition.EnableNetworkIsolation != nil {
			f11.EnableNetworkIsolation = resp.TrainingJobDefinition.EnableNetworkIsolation
		}
		if resp.TrainingJobDefinition.HyperParameterRanges != nil {
			f11f6 := &svcapitypes.ParameterRanges{}
			if resp.TrainingJobDefinition.HyperParameterRanges.CategoricalParameterRanges != nil {
				f11f6f0 := []*svcapitypes.CategoricalParameterRange{}
				for _, f11f6f0iter := range resp.TrainingJobDefinition.HyperParameterRanges.CategoricalParameterRanges {
					f11f6f0elem := &svcapitypes.CategoricalParameterRange{}
					if f11f6f0iter.Name != nil {
						f11f6f0elem.Name = f11f6f0iter.Name
					}
					if f11f6f0iter.Values != nil {
						f11f6f0elemf1 := []*string{}
						for _, f11f6f0elemf1iter := range f11f6f0iter.Values {
							var f11f6f0elemf1elem string
							f11f6f0elemf1elem = *f11f6f0elemf1iter
							f11f6f0elemf1 = append(f11f6f0elemf1, &f11f6f0elemf1elem)
						}
						f11f6f0elem.Values = f11f6f0elemf1
					}
					f11f6f0 = append(f11f6f0, f11f6f0elem)
				}
				f11f6.CategoricalParameterRanges = f11f6f0
			}
			if resp.TrainingJobDefinition.HyperParameterRanges.ContinuousParameterRanges != nil {
				f11f6f1 := []*svcapitypes.ContinuousParameterRange{}
				for _, f11f6f1iter := range resp.TrainingJobDefinition.HyperParameterRanges.ContinuousParameterRanges {
					f11f6f1elem := &svcapitypes.ContinuousParameterRange{}
					if f11f6f1iter.MaxValue != nil {
						f11f6f1elem.MaxValue = f11f6f1iter.MaxValue
					}
					if f11f6f1iter.MinValue != nil {
						f11f6f1elem.MinValue = f11f6f1iter.MinValue
					}
					if f11f6f1iter.Name != nil {
						f11f6f1elem.Name = f11f6f1iter.Name
					}
					if f11f6f1iter.ScalingType != nil {
						f11f6f1elem.ScalingType = f11f6f1iter.ScalingType
					}
					f11f6f1 = append(f11f6f1, f11f6f1elem)
				}
				f11f6.ContinuousParameterRanges = f11f6f1
			}
			if resp.TrainingJobDefinition.HyperParameterRanges.IntegerParameterRanges != nil {
				f11f6f2 := []*svcapitypes.IntegerParameterRange{}
				for _, f11f6f2iter := range resp.TrainingJobDefinition.HyperParameterRanges.IntegerParameterRanges {
					f11f6f2elem := &svcapitypes.IntegerParameterRange{}
					if f11f6f2iter.MaxValue != nil {
						f11f6f2elem.MaxValue = f11f6f2iter.MaxValue
					}
					if f11f6f2iter.MinValue != nil {
						f11f6f2elem.MinValue = f11f6f2iter.MinValue
					}
					if f11f6f2iter.Name != nil {
						f11f6f2elem.Name = f11f6f2iter.Name
					}
					if f11f6f2iter.ScalingType != nil {
						f11f6f2elem.ScalingType = f11f6f2iter.ScalingType
					}
					f11f6f2 = append(f11f6f2, f11f6f2elem)
				}
				f11f6.IntegerParameterRanges = f11f6f2
			}
			f11.HyperParameterRanges = f11f6
		}
		if resp.TrainingJobDefinition.InputDataConfig != nil {
			f11f7 := []*svcapitypes.Channel{}
			for _, f11f7iter := range resp.TrainingJobDefinition.InputDataConfig {
				f11f7elem := &svcapitypes.Channel{}
				if f11f7iter.ChannelName != nil {
					f11f7elem.ChannelName = f11f7iter.ChannelName
				}
				if f11f7iter.CompressionType != nil {
					f11f7elem.CompressionType = f11f7iter.CompressionType
				}
				if f11f7iter.ContentType != nil {
					f11f7elem.ContentType = f11f7iter.ContentType
				}
				if f11f7iter.DataSource != nil {
					f11f7elemf3 := &svcapitypes.DataSource{}
					if f11f7iter.DataSource.FileSystemDataSource != nil {
						f11f7elemf3f0 := &svcapitypes.FileSystemDataSource{}
						if f11f7iter.DataSource.FileSystemDataSource.DirectoryPath != nil {
							f11f7elemf3f0.DirectoryPath = f11f7iter.DataSource.FileSystemDataSource.DirectoryPath
						}
						if f11f7iter.DataSource.FileSystemDataSource.FileSystemAccessMode != nil {
							f11f7elemf3f0.FileSystemAccessMode = f11f7iter.DataSource.FileSystemDataSource.FileSystemAccessMode
						}
						if f11f7iter.DataSource.FileSystemDataSource.FileSystemId != nil {
							f11f7elemf3f0.FileSystemID = f11f7iter.DataSource.FileSystemDataSource.FileSystemId
						}
						if f11f7iter.DataSource.FileSystemDataSource.FileSystemType != nil {
							f11f7elemf3f0.FileSystemType = f11f7iter.DataSource.FileSystemDataSource.FileSystemType
						}
						f11f7elemf3.FileSystemDataSource = f11f7elemf3f0
					}
					if f11f7iter.DataSource.S3DataSource != nil {
						f11f7elemf3f1 := &svcapitypes.S3DataSource{}
						if f11f7iter.DataSource.S3DataSource.AttributeNames != nil {
							f11f7elemf3f1f0 := []*string{}
							for _, f11f7elemf3f1f0iter := range f11f7iter.DataSource.S3DataSource.AttributeNames {
								var f11f7elemf3f1f0elem string
								f11f7elemf3f1f0elem = *f11f7elemf3f1f0iter
								f11f7elemf3f1f0 = append(f11f7elemf3f1f0, &f11f7elemf3f1f0elem)
							}
							f11f7elemf3f1.AttributeNames = f11f7elemf3f1f0
						}
						if f11f7iter.DataSource.S3DataSource.InstanceGroupNames != nil {
							f11f7elemf3f1f1 := []*string{}
							for _, f11f7elemf3f1f1iter := range f11f7iter.DataSource.S3DataSource.InstanceGroupNames {
								var f11f7elemf3f1f1elem string
								f11f7elemf3f1f1elem = *f11f7elemf3f1f1iter
								f11f7elemf3f1f1 = append(f11f7elemf3f1f1, &f11f7elemf3f1f1elem)
							}
							f11f7elemf3f1.InstanceGroupNames = f11f7elemf3f1f1
						}
						if f11f7iter.DataSource.S3DataSource.S3DataDistributionType != nil {
							f11f7elemf3f1.S3DataDistributionType = f11f7iter.DataSource.S3DataSource.S3DataDistributionType
						}
						if f11f7iter.DataSource.S3DataSource.S3DataType != nil {
							f11f7elemf3f1.S3DataType = f11f7iter.DataSource.S3DataSource.S3DataType
						}
						if f11f7iter.DataSource.S3DataSource.S3Uri != nil {
							f11f7elemf3f1.S3URI = f11f7iter.DataSource.S3DataSource.S3Uri
						}
						f11f7elemf3.S3DataSource = f11f7elemf3f1
					}
					f11f7elem.DataSource = f11f7elemf3
				}
				if f11f7iter.InputMode != nil {
					f11f7elem.InputMode = f11f7iter.InputMode
				}
				if f11f7iter.RecordWrapperType != nil {
					f11f7elem.RecordWrapperType = f11f7iter.RecordWrapperType
				}
				if f11f7iter.ShuffleConfig != nil {
					f11f7elemf6 := &svcapitypes.ShuffleConfig{}
					if f11f7iter.ShuffleConfig.Seed != nil {
						f11f7elemf6.Seed = f11f7iter.ShuffleConfig.Seed
					}
					f11f7elem.ShuffleConfig = f11f7elemf6
				}
				f11f7 = append(f11f7, f11f7elem)
			}
			f11.InputDataConfig = f11f7
		}
		if resp.TrainingJobDefinition.OutputDataConfig != nil {
			f11f8 := &svcapitypes.OutputDataConfig{}
			if resp.TrainingJobDefinition.OutputDataConfig.KmsKeyId != nil {
				f11f8.KMSKeyID = resp.TrainingJobDefinition.OutputDataConfig.KmsKeyId
			}
			if resp.TrainingJobDefinition.OutputDataConfig.S3OutputPath != nil {
				f11f8.S3OutputPath = resp.TrainingJobDefinition.OutputDataConfig.S3OutputPath
			}
			f11.OutputDataConfig = f11f8
		}
		if resp.TrainingJobDefinition.ResourceConfig != nil {
			f11f9 := &svcapitypes.ResourceConfig{}
			if resp.TrainingJobDefinition.ResourceConfig.InstanceCount != nil {
				f11f9.InstanceCount = resp.TrainingJobDefinition.ResourceConfig.InstanceCount
			}
			if resp.TrainingJobDefinition.ResourceConfig.InstanceGroups != nil {
				f11f9f1 := []*svcapitypes.InstanceGroup{}
				for _, f11f9f1iter := range resp.TrainingJobDefinition.ResourceConfig.InstanceGroups {
					f11f9f1elem := &svcapitypes.InstanceGroup{}
					if f11f9f1iter.InstanceCount != nil {
						f11f9f1elem.InstanceCount = f11f9f1iter.InstanceCount
					}
					if f11f9f1iter.InstanceGroupName != nil {
						f11f9f1elem.InstanceGroupName = f11f9f1iter.InstanceGroupName
					}
					if f11f9f1iter.InstanceType != nil {
						f11f9f1elem.InstanceType = f11f9f1iter.InstanceType
					}
					f11f9f1 = append(f11f9f1, f11f9f1elem)
				}
				f11f9.InstanceGroups = f11f9f1
			}
			if resp.TrainingJobDefinition.ResourceConfig.InstanceType != nil {
				f11f9.InstanceType = resp.TrainingJobDefinition.ResourceConfig.InstanceType
			}
			if resp.TrainingJobDefinition.ResourceConfig.VolumeKmsKeyId != nil {
				f11f9.VolumeKMSKeyID = resp.TrainingJobDefinition.ResourceConfig.VolumeKmsKeyId
			}
			if resp.TrainingJobDefinition.ResourceConfig.VolumeSizeInGB != nil {
				f11f9.VolumeSizeInGB = resp.TrainingJobDefinition.ResourceConfig.VolumeSizeInGB
			}
			f11.ResourceConfig = f11f9
		}
		if resp.TrainingJobDefinition.RetryStrategy != nil {
			f11f10 := &svcapitypes.RetryStrategy{}
			if resp.TrainingJobDefinition.RetryStrategy.MaximumRetryAttempts != nil {
				f11f10.MaximumRetryAttempts = resp.TrainingJobDefinition.RetryStrategy.MaximumRetryAttempts
			}
			f11.RetryStrategy = f11f10
		}
		if resp.TrainingJobDefinition.RoleArn != nil {
			f11.RoleARN = resp.TrainingJobDefinition.RoleArn
		}
		if resp.TrainingJobDefinition.StaticHyperParameters != nil {
			f11f12 := map[string]*string{}
			for f11f12key, f11f12valiter := range resp.TrainingJobDefinition.StaticHyperParameters {
				var f11f12val string
				f11f12val = *f11f12valiter
				f11f12[f11f12key] = &f11f12val
			}
			f11.StaticHyperParameters = f11f12
		}
		if resp.TrainingJobDefinition.StoppingCondition != nil {
			f11f13 := &svcapitypes.StoppingCondition{}
			if resp.TrainingJobDefinition.StoppingCondition.MaxRuntimeInSeconds != nil {
				f11f13.MaxRuntimeInSeconds = resp.TrainingJobDefinition.StoppingCondition.MaxRuntimeInSeconds
			}
			if resp.TrainingJobDefinition.StoppingCondition.MaxWaitTimeInSeconds != nil {
				f11f13.MaxWaitTimeInSeconds = resp.TrainingJobDefinition.StoppingCondition.MaxWaitTimeInSeconds
			}
			f11.StoppingCondition = f11f13
		}
		if resp.TrainingJobDefinition.TuningObjective != nil {
			f11f14 := &svcapitypes.HyperParameterTuningJobObjective{}
			if resp.TrainingJobDefinition.TuningObjective.MetricName != nil {
				f11f14.MetricName = resp.TrainingJobDefinition.TuningObjective.MetricName
			}
			if resp.TrainingJobDefinition.TuningObjective.Type != nil {
				f11f14.Type = resp.TrainingJobDefinition.TuningObjective.Type
			}
			f11.TuningObjective = f11f14
		}
		if resp.TrainingJobDefinition.VpcConfig != nil {
			f11f15 := &svcapitypes.VPCConfig{}
			if resp.TrainingJobDefinition.VpcConfig.SecurityGroupIds != nil {
				f11f15f0 := []*string{}
				for _, f11f15f0iter := range resp.TrainingJobDefinition.VpcConfig.SecurityGroupIds {
					var f11f15f0elem string
					f11f15f0elem = *f11f15f0iter
					f11f15f0 = append(f11f15f0, &f11f15f0elem)
				}
				f11f15.SecurityGroupIDs = f11f15f0
			}
			if resp.TrainingJobDefinition.VpcConfig.Subnets != nil {
				f11f15f1 := []*string{}
				for _, f11f15f1iter := range resp.TrainingJobDefinition.VpcConfig.Subnets {
					var f11f15f1elem string
					f11f15f1elem = *f11f15f1iter
					f11f15f1 = append(f11f15f1, &f11f15f1elem)
				}
				f11f15.Subnets = f11f15f1
			}
			f11.VPCConfig = f11f15
		}
		ko.Spec.TrainingJobDefinition = f11
	} else {
		ko.Spec.TrainingJobDefinition = nil
	}
	if resp.TrainingJobDefinitions != nil {
		f12 := []*svcapitypes.HyperParameterTrainingJobDefinition{}
		for _, f12iter := range resp.TrainingJobDefinitions {
			f12elem := &svcapitypes.HyperParameterTrainingJobDefinition{}
			if f12iter.AlgorithmSpecification != nil {
				f12elemf0 := &svcapitypes.HyperParameterAlgorithmSpecification{}
				if f12iter.AlgorithmSpecification.AlgorithmName != nil {
					f12elemf0.AlgorithmName = f12iter.AlgorithmSpecification.AlgorithmName
				}
				if f12iter.AlgorithmSpecification.MetricDefinitions != nil {
					f12elemf0f1 := []*svcapitypes.MetricDefinition{}
					for _, f12elemf0f1iter := range f12iter.AlgorithmSpecification.MetricDefinitions {
						f12elemf0f1elem := &svcapitypes.MetricDefinition{}
						if f12elemf0f1iter.Name != nil {
							f12elemf0f1elem.Name = f12elemf0f1iter.Name
						}
						if f12elemf0f1iter.Regex != nil {
							f12elemf0f1elem.Regex = f12elemf0f1iter.Regex
						}
						f12elemf0f1 = append(f12elemf0f1, f12elemf0f1elem)
					}
					f12elemf0.MetricDefinitions = f12elemf0f1
				}
				if f12iter.AlgorithmSpecification.TrainingImage != nil {
					f12elemf0.TrainingImage = f12iter.AlgorithmSpecification.TrainingImage
				}
				if f12iter.AlgorithmSpecification.TrainingInputMode != nil {
					f12elemf0.TrainingInputMode = f12iter.AlgorithmSpecification.TrainingInputMode
				}
				f12elem.AlgorithmSpecification = f12elemf0
			}
			if f12iter.CheckpointConfig != nil {
				f12elemf1 := &svcapitypes.CheckpointConfig{}
				if f12iter.CheckpointConfig.LocalPath != nil {
					f12elemf1.LocalPath = f12iter.CheckpointConfig.LocalPath
				}
				if f12iter.CheckpointConfig.S3Uri != nil {
					f12elemf1.S3URI = f12iter.CheckpointConfig.S3Uri
				}
				f12elem.CheckpointConfig = f12elemf1
			}
			if f12iter.DefinitionName != nil {
				f12elem.DefinitionName = f12iter.DefinitionName
			}
			if f12iter.EnableInterContainerTrafficEncryption != nil {
				f12elem.EnableInterContainerTrafficEncryption = f12iter.EnableInterContainerTrafficEncryption
			}
			if f12iter.EnableManagedSpotTraining != nil {
				f12elem.EnableManagedSpotTraining = f12iter.EnableManagedSpotTraining
			}
			if f12iter.EnableNetworkIsolation != nil {
				f12elem.EnableNetworkIsolation = f12iter.EnableNetworkIsolation
			}
			if f12iter.HyperParameterRanges != nil {
				f12elemf6 := &svcapitypes.ParameterRanges{}
				if f12iter.HyperParameterRanges.CategoricalParameterRanges != nil {
					f12elemf6f0 := []*svcapitypes.CategoricalParameterRange{}
					for _, f12elemf6f0iter := range f12iter.HyperParameterRanges.CategoricalParameterRanges {
						f12elemf6f0elem := &svcapitypes.CategoricalParameterRange{}
						if f12elemf6f0iter.Name != nil {
							f12elemf6f0elem.Name = f12elemf6f0iter.Name
						}
						if f12elemf6f0iter.Values != nil {
							f12elemf6f0elemf1 := []*string{}
							for _, f12elemf6f0elemf1iter := range f12elemf6f0iter.Values {
								var f12elemf6f0elemf1elem string
								f12elemf6f0elemf1elem = *f12elemf6f0elemf1iter
								f12elemf6f0elemf1 = append(f12elemf6f0elemf1, &f12elemf6f0elemf1elem)
							}
							f12elemf6f0elem.Values = f12elemf6f0elemf1
						}
						f12elemf6f0 = append(f12elemf6f0, f12elemf6f0elem)
					}
					f12elemf6.CategoricalParameterRanges = f12elemf6f0
				}
				if f12iter.HyperParameterRanges.ContinuousParameterRanges != nil {
					f12elemf6f1 := []*svcapitypes.ContinuousParameterRange{}
					for _, f12elemf6f1iter := range f12iter.HyperParameterRanges.ContinuousParameterRanges {
						f12elemf6f1elem := &svcapitypes.ContinuousParameterRange{}
						if f12elemf6f1iter.MaxValue != nil {
							f12elemf6f1elem.MaxValue = f12elemf6f1iter.MaxValue
						}
						if f12elemf6f1iter.MinValue != nil {
							f12elemf6f1elem.MinValue = f12elemf6f1iter.MinValue
						}
						if f12elemf6f1iter.Name != nil {
							f12elemf6f1elem.Name = f12elemf6f1iter.Name
						}
						if f12elemf6f1iter.ScalingType != nil {
							f12elemf6f1elem.ScalingType = f12elemf6f1iter.ScalingType
						}
						f12elemf6f1 = append(f12elemf6f1, f12elemf6f1elem)
					}
					f12elemf6.ContinuousParameterRanges = f12elemf6f1
				}
				if f12iter.HyperParameterRanges.IntegerParameterRanges != nil {
					f12elemf6f2 := []*svcapitypes.IntegerParameterRange{}
					for _, f12elemf6f2iter := range f12iter.HyperParameterRanges.IntegerParameterRanges {
						f12elemf6f2elem := &svcapitypes.IntegerParameterRange{}
						if f12elemf6f2iter.MaxValue != nil {
							f12elemf6f2elem.MaxValue = f12elemf6f2iter.MaxValue
						}
						if f12elemf6f2iter.MinValue != nil {
							f12elemf6f2elem.MinValue = f12elemf6f2iter.MinValue
						}
						if f12elemf6f2iter.Name != nil {
							f12elemf6f2elem.Name = f12elemf6f2iter.Name
						}
						if f12elemf6f2iter.ScalingType != nil {
							f12elemf6f2elem.ScalingType = f12elemf6f2iter.ScalingType
						}
						f12elemf6f2 = append(f12elemf6f2, f12elemf6f2elem)
					}
					f12elemf6.IntegerParameterRanges = f12elemf6f2
				}
				f12elem.HyperParameterRanges = f12elemf6
			}
			if f12iter.InputDataConfig != nil {
				f12elemf7 := []*svcapitypes.Channel{}
				for _, f12elemf7iter := range f12iter.InputDataConfig {
					f12elemf7elem := &svcapitypes.Channel{}
					if f12elemf7iter.ChannelName != nil {
						f12elemf7elem.ChannelName = f12elemf7iter.ChannelName
					}
					if f12elemf7iter.CompressionType != nil {
						f12elemf7elem.CompressionType = f12elemf7iter.CompressionType
					}
					if f12elemf7iter.ContentType != nil {
						f12elemf7elem.ContentType = f12elemf7iter.ContentType
					}
					if f12elemf7iter.DataSource != nil {
						f12elemf7elemf3 := &svcapitypes.DataSource{}
						if f12elemf7iter.DataSource.FileSystemDataSource != nil {
							f12elemf7elemf3f0 := &svcapitypes.FileSystemDataSource{}
							if f12elemf7iter.DataSource.FileSystemDataSource.DirectoryPath != nil {
								f12elemf7elemf3f0.DirectoryPath = f12elemf7iter.DataSource.FileSystemDataSource.DirectoryPath
							}
							if f12elemf7iter.DataSource.FileSystemDataSource.FileSystemAccessMode != nil {
								f12elemf7elemf3f0.FileSystemAccessMode = f12elemf7iter.DataSource.FileSystemDataSource.FileSystemAccessMode
							}
							if f12elemf7iter.DataSource.FileSystemDataSource.FileSystemId != nil {
								f12elemf7elemf3f0.FileSystemID = f12elemf7iter.DataSource.FileSystemDataSource.FileSystemId
							}
							if f12elemf7iter.DataSource.FileSystemDataSource.FileSystemType != nil {
								f12elemf7elemf3f0.FileSystemType = f12elemf7iter.DataSource.FileSystemDataSource.FileSystemType
							}
							f12elemf7elemf3.FileSystemDataSource = f12elemf7elemf3f0
						}
						if f12elemf7iter.DataSource.S3DataSource != nil {
							f12elemf7elemf3f1 := &svcapitypes.S3DataSource{}
							if f12elemf7iter.DataSource.S3DataSource.AttributeNames != nil {
								f12elemf7elemf3f1f0 := []*string{}
								for _, f12elemf7elemf3f1f0iter := range f12elemf7iter.DataSource.S3DataSource.AttributeNames {
									var f12elemf7elemf3f1f0elem string
									f12elemf7elemf3f1f0elem = *f12elemf7elemf3f1f0iter
									f12elemf7elemf3f1f0 = append(f12elemf7elemf3f1f0, &f12elemf7elemf3f1f0elem)
								}
								f12elemf7elemf3f1.AttributeNames = f12elemf7elemf3f1f0
							}
							if f12elemf7iter.DataSource.S3DataSource.InstanceGroupNames != nil {
								f12elemf7elemf3f1f1 := []*string{}
								for _, f12elemf7elemf3f1f1iter := range f12elemf7iter.DataSource.S3DataSource.InstanceGroupNames {
									var f12elemf7elemf3f1f1elem string
									f12elemf7elemf3f1f1elem = *f12elemf7elemf3f1f1iter
									f12elemf7elemf3f1f1 = append(f12elemf7elemf3f1f1, &f12elemf7elemf3f1f1elem)
								}
								f12elemf7elemf3f1.InstanceGroupNames = f12elemf7elemf3f1f1
							}
							if f12elemf7iter.DataSource.S3DataSource.S3DataDistributionType != nil {
								f12elemf7elemf3f1.S3DataDistributionType = f12elemf7iter.DataSource.S3DataSource.S3DataDistributionType
							}
							if f12elemf7iter.DataSource.S3DataSource.S3DataType != nil {
								f12elemf7elemf3f1.S3DataType = f12elemf7iter.DataSource.S3DataSource.S3DataType
							}
							if f12elemf7iter.DataSource.S3DataSource.S3Uri != nil {
								f12elemf7elemf3f1.S3URI = f12elemf7iter.DataSource.S3DataSource.S3Uri
							}
							f12elemf7elemf3.S3DataSource = f12elemf7elemf3f1
						}
						f12elemf7elem.DataSource = f12elemf7elemf3
					}
					if f12elemf7iter.InputMode != nil {
						f12elemf7elem.InputMode = f12elemf7iter.InputMode
					}
					if f12elemf7iter.RecordWrapperType != nil {
						f12elemf7elem.RecordWrapperType = f12elemf7iter.RecordWrapperType
					}
					if f12elemf7iter.ShuffleConfig != nil {
						f12elemf7elemf6 := &svcapitypes.ShuffleConfig{}
						if f12elemf7iter.ShuffleConfig.Seed != nil {
							f12elemf7elemf6.Seed = f12elemf7iter.ShuffleConfig.Seed
						}
						f12elemf7elem.ShuffleConfig = f12elemf7elemf6
					}
					f12elemf7 = append(f12elemf7, f12elemf7elem)
				}
				f12elem.InputDataConfig = f12elemf7
			}
			if f12iter.OutputDataConfig != nil {
				f12elemf8 := &svcapitypes.OutputDataConfig{}
				if f12iter.OutputDataConfig.KmsKeyId != nil {
					f12elemf8.KMSKeyID = f12iter.OutputDataConfig.KmsKeyId
				}
				if f12iter.OutputDataConfig.S3OutputPath != nil {
					f12elemf8.S3OutputPath = f12iter.OutputDataConfig.S3OutputPath
				}
				f12elem.OutputDataConfig = f12elemf8
			}
			if f12iter.ResourceConfig != nil {
				f12elemf9 := &svcapitypes.ResourceConfig{}
				if f12iter.ResourceConfig.InstanceCount != nil {
					f12elemf9.InstanceCount = f12iter.ResourceConfig.InstanceCount
				}
				if f12iter.ResourceConfig.InstanceGroups != nil {
					f12elemf9f1 := []*svcapitypes.InstanceGroup{}
					for _, f12elemf9f1iter := range f12iter.ResourceConfig.InstanceGroups {
						f12elemf9f1elem := &svcapitypes.InstanceGroup{}
						if f12elemf9f1iter.InstanceCount != nil {
							f12elemf9f1elem.InstanceCount = f12elemf9f1iter.InstanceCount
						}
						if f12elemf9f1iter.InstanceGroupName != nil {
							f12elemf9f1elem.InstanceGroupName = f12elemf9f1iter.InstanceGroupName
						}
						if f12elemf9f1iter.InstanceType != nil {
							f12elemf9f1elem.InstanceType = f12elemf9f1iter.InstanceType
						}
						f12elemf9f1 = append(f12elemf9f1, f12elemf9f1elem)
					}
					f12elemf9.InstanceGroups = f12elemf9f1
				}
				if f12iter.ResourceConfig.InstanceType != nil {
					f12elemf9.InstanceType = f12iter.ResourceConfig.InstanceType
				}
				if f12iter.ResourceConfig.VolumeKmsKeyId != nil {
					f12elemf9.VolumeKMSKeyID = f12iter.ResourceConfig.VolumeKmsKeyId
				}
				if f12iter.ResourceConfig.VolumeSizeInGB != nil {
					f12elemf9.VolumeSizeInGB = f12iter.ResourceConfig.VolumeSizeInGB
				}
				f12elem.ResourceConfig = f12elemf9
			}
			if f12iter.RetryStrategy != nil {
				f12elemf10 := &svcapitypes.RetryStrategy{}
				if f12iter.RetryStrategy.MaximumRetryAttempts != nil {
					f12elemf10.MaximumRetryAttempts = f12iter.RetryStrategy.MaximumRetryAttempts
				}
				f12elem.RetryStrategy = f12elemf10
			}
			if f12iter.RoleArn != nil {
				f12elem.RoleARN = f12iter.RoleArn
			}
			if f12iter.StaticHyperParameters != nil {
				f12elemf12 := map[string]*string{}
				for f12elemf12key, f12elemf12valiter := range f12iter.StaticHyperParameters {
					var f12elemf12val string
					f12elemf12val = *f12elemf12valiter
					f12elemf12[f12elemf12key] = &f12elemf12val
				}
				f12elem.StaticHyperParameters = f12elemf12
			}
			if f12iter.StoppingCondition != nil {
				f12elemf13 := &svcapitypes.StoppingCondition{}
				if f12iter.StoppingCondition.MaxRuntimeInSeconds != nil {
					f12elemf13.MaxRuntimeInSeconds = f12iter.StoppingCondition.MaxRuntimeInSeconds
				}
				if f12iter.StoppingCondition.MaxWaitTimeInSeconds != nil {
					f12elemf13.MaxWaitTimeInSeconds = f12iter.StoppingCondition.MaxWaitTimeInSeconds
				}
				f12elem.StoppingCondition = f12elemf13
			}
			if f12iter.TuningObjective != nil {
				f12elemf14 := &svcapitypes.HyperParameterTuningJobObjective{}
				if f12iter.TuningObjective.MetricName != nil {
					f12elemf14.MetricName = f12iter.TuningObjective.MetricName
				}
				if f12iter.TuningObjective.Type != nil {
					f12elemf14.Type = f12iter.TuningObjective.Type
				}
				f12elem.TuningObjective = f12elemf14
			}
			if f12iter.VpcConfig != nil {
				f12elemf15 := &svcapitypes.VPCConfig{}
				if f12iter.VpcConfig.SecurityGroupIds != nil {
					f12elemf15f0 := []*string{}
					for _, f12elemf15f0iter := range f12iter.VpcConfig.SecurityGroupIds {
						var f12elemf15f0elem string
						f12elemf15f0elem = *f12elemf15f0iter
						f12elemf15f0 = append(f12elemf15f0, &f12elemf15f0elem)
					}
					f12elemf15.SecurityGroupIDs = f12elemf15f0
				}
				if f12iter.VpcConfig.Subnets != nil {
					f12elemf15f1 := []*string{}
					for _, f12elemf15f1iter := range f12iter.VpcConfig.Subnets {
						var f12elemf15f1elem string
						f12elemf15f1elem = *f12elemf15f1iter
						f12elemf15f1 = append(f12elemf15f1, &f12elemf15f1elem)
					}
					f12elemf15.Subnets = f12elemf15f1
				}
				f12elem.VPCConfig = f12elemf15
			}
			f12 = append(f12, f12elem)
		}
		ko.Spec.TrainingJobDefinitions = f12
	} else {
		ko.Spec.TrainingJobDefinitions = nil
	}
	if resp.WarmStartConfig != nil {
		f14 := &svcapitypes.HyperParameterTuningJobWarmStartConfig{}
		if resp.WarmStartConfig.ParentHyperParameterTuningJobs != nil {
			f14f0 := []*svcapitypes.ParentHyperParameterTuningJob{}
			for _, f14f0iter := range resp.WarmStartConfig.ParentHyperParameterTuningJobs {
				f14f0elem := &svcapitypes.ParentHyperParameterTuningJob{}
				if f14f0iter.HyperParameterTuningJobName != nil {
					f14f0elem.HyperParameterTuningJobName = f14f0iter.HyperParameterTuningJobName
				}
				f14f0 = append(f14f0, f14f0elem)
			}
			f14.ParentHyperParameterTuningJobs = f14f0
		}
		if resp.WarmStartConfig.WarmStartType != nil {
			f14.WarmStartType = resp.WarmStartConfig.WarmStartType
		}
		ko.Spec.WarmStartConfig = f14
	} else {
		ko.Spec.WarmStartConfig = nil
	}

	rm.setStatusDefaults(ko)
	rm.customSetOutput(&resource{ko})
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Spec.HyperParameterTuningJobName == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.DescribeHyperParameterTuningJobInput, error) {
	res := &svcsdk.DescribeHyperParameterTuningJobInput{}

	if r.ko.Spec.HyperParameterTuningJobName != nil {
		res.SetHyperParameterTuningJobName(*r.ko.Spec.HyperParameterTuningJobName)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateHyperParameterTuningJobOutput
	_ = resp
	resp, err = rm.sdkapi.CreateHyperParameterTuningJobWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateHyperParameterTuningJob", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.HyperParameterTuningJobArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.HyperParameterTuningJobArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateHyperParameterTuningJobInput, error) {
	res := &svcsdk.CreateHyperParameterTuningJobInput{}

	if r.ko.Spec.HyperParameterTuningJobConfig != nil {
		f0 := &svcsdk.HyperParameterTuningJobConfig{}
		if r.ko.Spec.HyperParameterTuningJobConfig.HyperParameterTuningJobObjective != nil {
			f0f0 := &svcsdk.HyperParameterTuningJobObjective{}
			if r.ko.Spec.HyperParameterTuningJobConfig.HyperParameterTuningJobObjective.MetricName != nil {
				f0f0.SetMetricName(*r.ko.Spec.HyperParameterTuningJobConfig.HyperParameterTuningJobObjective.MetricName)
			}
			if r.ko.Spec.HyperParameterTuningJobConfig.HyperParameterTuningJobObjective.Type != nil {
				f0f0.SetType(*r.ko.Spec.HyperParameterTuningJobConfig.HyperParameterTuningJobObjective.Type)
			}
			f0.SetHyperParameterTuningJobObjective(f0f0)
		}
		if r.ko.Spec.HyperParameterTuningJobConfig.ParameterRanges != nil {
			f0f1 := &svcsdk.ParameterRanges{}
			if r.ko.Spec.HyperParameterTuningJobConfig.ParameterRanges.CategoricalParameterRanges != nil {
				f0f1f0 := []*svcsdk.CategoricalParameterRange{}
				for _, f0f1f0iter := range r.ko.Spec.HyperParameterTuningJobConfig.ParameterRanges.CategoricalParameterRanges {
					f0f1f0elem := &svcsdk.CategoricalParameterRange{}
					if f0f1f0iter.Name != nil {
						f0f1f0elem.SetName(*f0f1f0iter.Name)
					}
					if f0f1f0iter.Values != nil {
						f0f1f0elemf1 := []*string{}
						for _, f0f1f0elemf1iter := range f0f1f0iter.Values {
							var f0f1f0elemf1elem string
							f0f1f0elemf1elem = *f0f1f0elemf1iter
							f0f1f0elemf1 = append(f0f1f0elemf1, &f0f1f0elemf1elem)
						}
						f0f1f0elem.SetValues(f0f1f0elemf1)
					}
					f0f1f0 = append(f0f1f0, f0f1f0elem)
				}
				f0f1.SetCategoricalParameterRanges(f0f1f0)
			}
			if r.ko.Spec.HyperParameterTuningJobConfig.ParameterRanges.ContinuousParameterRanges != nil {
				f0f1f1 := []*svcsdk.ContinuousParameterRange{}
				for _, f0f1f1iter := range r.ko.Spec.HyperParameterTuningJobConfig.ParameterRanges.ContinuousParameterRanges {
					f0f1f1elem := &svcsdk.ContinuousParameterRange{}
					if f0f1f1iter.MaxValue != nil {
						f0f1f1elem.SetMaxValue(*f0f1f1iter.MaxValue)
					}
					if f0f1f1iter.MinValue != nil {
						f0f1f1elem.SetMinValue(*f0f1f1iter.MinValue)
					}
					if f0f1f1iter.Name != nil {
						f0f1f1elem.SetName(*f0f1f1iter.Name)
					}
					if f0f1f1iter.ScalingType != nil {
						f0f1f1elem.SetScalingType(*f0f1f1iter.ScalingType)
					}
					f0f1f1 = append(f0f1f1, f0f1f1elem)
				}
				f0f1.SetContinuousParameterRanges(f0f1f1)
			}
			if r.ko.Spec.HyperParameterTuningJobConfig.ParameterRanges.IntegerParameterRanges != nil {
				f0f1f2 := []*svcsdk.IntegerParameterRange{}
				for _, f0f1f2iter := range r.ko.Spec.HyperParameterTuningJobConfig.ParameterRanges.IntegerParameterRanges {
					f0f1f2elem := &svcsdk.IntegerParameterRange{}
					if f0f1f2iter.MaxValue != nil {
						f0f1f2elem.SetMaxValue(*f0f1f2iter.MaxValue)
					}
					if f0f1f2iter.MinValue != nil {
						f0f1f2elem.SetMinValue(*f0f1f2iter.MinValue)
					}
					if f0f1f2iter.Name != nil {
						f0f1f2elem.SetName(*f0f1f2iter.Name)
					}
					if f0f1f2iter.ScalingType != nil {
						f0f1f2elem.SetScalingType(*f0f1f2iter.ScalingType)
					}
					f0f1f2 = append(f0f1f2, f0f1f2elem)
				}
				f0f1.SetIntegerParameterRanges(f0f1f2)
			}
			f0.SetParameterRanges(f0f1)
		}
		if r.ko.Spec.HyperParameterTuningJobConfig.ResourceLimits != nil {
			f0f2 := &svcsdk.ResourceLimits{}
			if r.ko.Spec.HyperParameterTuningJobConfig.ResourceLimits.MaxNumberOfTrainingJobs != nil {
				f0f2.SetMaxNumberOfTrainingJobs(*r.ko.Spec.HyperParameterTuningJobConfig.ResourceLimits.MaxNumberOfTrainingJobs)
			}
			if r.ko.Spec.HyperParameterTuningJobConfig.ResourceLimits.MaxParallelTrainingJobs != nil {
				f0f2.SetMaxParallelTrainingJobs(*r.ko.Spec.HyperParameterTuningJobConfig.ResourceLimits.MaxParallelTrainingJobs)
			}
			f0.SetResourceLimits(f0f2)
		}
		if r.ko.Spec.HyperParameterTuningJobConfig.Strategy != nil {
			f0.SetStrategy(*r.ko.Spec.HyperParameterTuningJobConfig.Strategy)
		}
		if r.ko.Spec.HyperParameterTuningJobConfig.TrainingJobEarlyStoppingType != nil {
			f0.SetTrainingJobEarlyStoppingType(*r.ko.Spec.HyperParameterTuningJobConfig.TrainingJobEarlyStoppingType)
		}
		if r.ko.Spec.HyperParameterTuningJobConfig.TuningJobCompletionCriteria != nil {
			f0f5 := &svcsdk.TuningJobCompletionCriteria{}
			if r.ko.Spec.HyperParameterTuningJobConfig.TuningJobCompletionCriteria.TargetObjectiveMetricValue != nil {
				f0f5.SetTargetObjectiveMetricValue(*r.ko.Spec.HyperParameterTuningJobConfig.TuningJobCompletionCriteria.TargetObjectiveMetricValue)
			}
			f0.SetTuningJobCompletionCriteria(f0f5)
		}
		res.SetHyperParameterTuningJobConfig(f0)
	}
	if r.ko.Spec.HyperParameterTuningJobName != nil {
		res.SetHyperParameterTuningJobName(*r.ko.Spec.HyperParameterTuningJobName)
	}
	if r.ko.Spec.Tags != nil {
		f2 := []*svcsdk.Tag{}
		for _, f2iter := range r.ko.Spec.Tags {
			f2elem := &svcsdk.Tag{}
			if f2iter.Key != nil {
				f2elem.SetKey(*f2iter.Key)
			}
			if f2iter.Value != nil {
				f2elem.SetValue(*f2iter.Value)
			}
			f2 = append(f2, f2elem)
		}
		res.SetTags(f2)
	}
	if r.ko.Spec.TrainingJobDefinition != nil {
		f3 := &svcsdk.HyperParameterTrainingJobDefinition{}
		if r.ko.Spec.TrainingJobDefinition.AlgorithmSpecification != nil {
			f3f0 := &svcsdk.HyperParameterAlgorithmSpecification{}
			if r.ko.Spec.TrainingJobDefinition.AlgorithmSpecification.AlgorithmName != nil {
				f3f0.SetAlgorithmName(*r.ko.Spec.TrainingJobDefinition.AlgorithmSpecification.AlgorithmName)
			}
			if r.ko.Spec.TrainingJobDefinition.AlgorithmSpecification.MetricDefinitions != nil {
				f3f0f1 := []*svcsdk.MetricDefinition{}
				for _, f3f0f1iter := range r.ko.Spec.TrainingJobDefinition.AlgorithmSpecification.MetricDefinitions {
					f3f0f1elem := &svcsdk.MetricDefinition{}
					if f3f0f1iter.Name != nil {
						f3f0f1elem.SetName(*f3f0f1iter.Name)
					}
					if f3f0f1iter.Regex != nil {
						f3f0f1elem.SetRegex(*f3f0f1iter.Regex)
					}
					f3f0f1 = append(f3f0f1, f3f0f1elem)
				}
				f3f0.SetMetricDefinitions(f3f0f1)
			}
			if r.ko.Spec.TrainingJobDefinition.AlgorithmSpecification.TrainingImage != nil {
				f3f0.SetTrainingImage(*r.ko.Spec.TrainingJobDefinition.AlgorithmSpecification.TrainingImage)
			}
			if r.ko.Spec.TrainingJobDefinition.AlgorithmSpecification.TrainingInputMode != nil {
				f3f0.SetTrainingInputMode(*r.ko.Spec.TrainingJobDefinition.AlgorithmSpecification.TrainingInputMode)
			}
			f3.SetAlgorithmSpecification(f3f0)
		}
		if r.ko.Spec.TrainingJobDefinition.CheckpointConfig != nil {
			f3f1 := &svcsdk.CheckpointConfig{}
			if r.ko.Spec.TrainingJobDefinition.CheckpointConfig.LocalPath != nil {
				f3f1.SetLocalPath(*r.ko.Spec.TrainingJobDefinition.CheckpointConfig.LocalPath)
			}
			if r.ko.Spec.TrainingJobDefinition.CheckpointConfig.S3URI != nil {
				f3f1.SetS3Uri(*r.ko.Spec.TrainingJobDefinition.CheckpointConfig.S3URI)
			}
			f3.SetCheckpointConfig(f3f1)
		}
		if r.ko.Spec.TrainingJobDefinition.DefinitionName != nil {
			f3.SetDefinitionName(*r.ko.Spec.TrainingJobDefinition.DefinitionName)
		}
		if r.ko.Spec.TrainingJobDefinition.EnableInterContainerTrafficEncryption != nil {
			f3.SetEnableInterContainerTrafficEncryption(*r.ko.Spec.TrainingJobDefinition.EnableInterContainerTrafficEncryption)
		}
		if r.ko.Spec.TrainingJobDefinition.EnableManagedSpotTraining != nil {
			f3.SetEnableManagedSpotTraining(*r.ko.Spec.TrainingJobDefinition.EnableManagedSpotTraining)
		}
		if r.ko.Spec.TrainingJobDefinition.EnableNetworkIsolation != nil {
			f3.SetEnableNetworkIsolation(*r.ko.Spec.TrainingJobDefinition.EnableNetworkIsolation)
		}
		if r.ko.Spec.TrainingJobDefinition.HyperParameterRanges != nil {
			f3f6 := &svcsdk.ParameterRanges{}
			if r.ko.Spec.TrainingJobDefinition.HyperParameterRanges.CategoricalParameterRanges != nil {
				f3f6f0 := []*svcsdk.CategoricalParameterRange{}
				for _, f3f6f0iter := range r.ko.Spec.TrainingJobDefinition.HyperParameterRanges.CategoricalParameterRanges {
					f3f6f0elem := &svcsdk.CategoricalParameterRange{}
					if f3f6f0iter.Name != nil {
						f3f6f0elem.SetName(*f3f6f0iter.Name)
					}
					if f3f6f0iter.Values != nil {
						f3f6f0elemf1 := []*string{}
						for _, f3f6f0elemf1iter := range f3f6f0iter.Values {
							var f3f6f0elemf1elem string
							f3f6f0elemf1elem = *f3f6f0elemf1iter
							f3f6f0elemf1 = append(f3f6f0elemf1, &f3f6f0elemf1elem)
						}
						f3f6f0elem.SetValues(f3f6f0elemf1)
					}
					f3f6f0 = append(f3f6f0, f3f6f0elem)
				}
				f3f6.SetCategoricalParameterRanges(f3f6f0)
			}
			if r.ko.Spec.TrainingJobDefinition.HyperParameterRanges.ContinuousParameterRanges != nil {
				f3f6f1 := []*svcsdk.ContinuousParameterRange{}
				for _, f3f6f1iter := range r.ko.Spec.TrainingJobDefinition.HyperParameterRanges.ContinuousParameterRanges {
					f3f6f1elem := &svcsdk.ContinuousParameterRange{}
					if f3f6f1iter.MaxValue != nil {
						f3f6f1elem.SetMaxValue(*f3f6f1iter.MaxValue)
					}
					if f3f6f1iter.MinValue != nil {
						f3f6f1elem.SetMinValue(*f3f6f1iter.MinValue)
					}
					if f3f6f1iter.Name != nil {
						f3f6f1elem.SetName(*f3f6f1iter.Name)
					}
					if f3f6f1iter.ScalingType != nil {
						f3f6f1elem.SetScalingType(*f3f6f1iter.ScalingType)
					}
					f3f6f1 = append(f3f6f1, f3f6f1elem)
				}
				f3f6.SetContinuousParameterRanges(f3f6f1)
			}
			if r.ko.Spec.TrainingJobDefinition.HyperParameterRanges.IntegerParameterRanges != nil {
				f3f6f2 := []*svcsdk.IntegerParameterRange{}
				for _, f3f6f2iter := range r.ko.Spec.TrainingJobDefinition.HyperParameterRanges.IntegerParameterRanges {
					f3f6f2elem := &svcsdk.IntegerParameterRange{}
					if f3f6f2iter.MaxValue != nil {
						f3f6f2elem.SetMaxValue(*f3f6f2iter.MaxValue)
					}
					if f3f6f2iter.MinValue != nil {
						f3f6f2elem.SetMinValue(*f3f6f2iter.MinValue)
					}
					if f3f6f2iter.Name != nil {
						f3f6f2elem.SetName(*f3f6f2iter.Name)
					}
					if f3f6f2iter.ScalingType != nil {
						f3f6f2elem.SetScalingType(*f3f6f2iter.ScalingType)
					}
					f3f6f2 = append(f3f6f2, f3f6f2elem)
				}
				f3f6.SetIntegerParameterRanges(f3f6f2)
			}
			f3.SetHyperParameterRanges(f3f6)
		}
		if r.ko.Spec.TrainingJobDefinition.InputDataConfig != nil {
			f3f7 := []*svcsdk.Channel{}
			for _, f3f7iter := range r.ko.Spec.TrainingJobDefinition.InputDataConfig {
				f3f7elem := &svcsdk.Channel{}
				if f3f7iter.ChannelName != nil {
					f3f7elem.SetChannelName(*f3f7iter.ChannelName)
				}
				if f3f7iter.CompressionType != nil {
					f3f7elem.SetCompressionType(*f3f7iter.CompressionType)
				}
				if f3f7iter.ContentType != nil {
					f3f7elem.SetContentType(*f3f7iter.ContentType)
				}
				if f3f7iter.DataSource != nil {
					f3f7elemf3 := &svcsdk.DataSource{}
					if f3f7iter.DataSource.FileSystemDataSource != nil {
						f3f7elemf3f0 := &svcsdk.FileSystemDataSource{}
						if f3f7iter.DataSource.FileSystemDataSource.DirectoryPath != nil {
							f3f7elemf3f0.SetDirectoryPath(*f3f7iter.DataSource.FileSystemDataSource.DirectoryPath)
						}
						if f3f7iter.DataSource.FileSystemDataSource.FileSystemAccessMode != nil {
							f3f7elemf3f0.SetFileSystemAccessMode(*f3f7iter.DataSource.FileSystemDataSource.FileSystemAccessMode)
						}
						if f3f7iter.DataSource.FileSystemDataSource.FileSystemID != nil {
							f3f7elemf3f0.SetFileSystemId(*f3f7iter.DataSource.FileSystemDataSource.FileSystemID)
						}
						if f3f7iter.DataSource.FileSystemDataSource.FileSystemType != nil {
							f3f7elemf3f0.SetFileSystemType(*f3f7iter.DataSource.FileSystemDataSource.FileSystemType)
						}
						f3f7elemf3.SetFileSystemDataSource(f3f7elemf3f0)
					}
					if f3f7iter.DataSource.S3DataSource != nil {
						f3f7elemf3f1 := &svcsdk.S3DataSource{}
						if f3f7iter.DataSource.S3DataSource.AttributeNames != nil {
							f3f7elemf3f1f0 := []*string{}
							for _, f3f7elemf3f1f0iter := range f3f7iter.DataSource.S3DataSource.AttributeNames {
								var f3f7elemf3f1f0elem string
								f3f7elemf3f1f0elem = *f3f7elemf3f1f0iter
								f3f7elemf3f1f0 = append(f3f7elemf3f1f0, &f3f7elemf3f1f0elem)
							}
							f3f7elemf3f1.SetAttributeNames(f3f7elemf3f1f0)
						}
						if f3f7iter.DataSource.S3DataSource.InstanceGroupNames != nil {
							f3f7elemf3f1f1 := []*string{}
							for _, f3f7elemf3f1f1iter := range f3f7iter.DataSource.S3DataSource.InstanceGroupNames {
								var f3f7elemf3f1f1elem string
								f3f7elemf3f1f1elem = *f3f7elemf3f1f1iter
								f3f7elemf3f1f1 = append(f3f7elemf3f1f1, &f3f7elemf3f1f1elem)
							}
							f3f7elemf3f1.SetInstanceGroupNames(f3f7elemf3f1f1)
						}
						if f3f7iter.DataSource.S3DataSource.S3DataDistributionType != nil {
							f3f7elemf3f1.SetS3DataDistributionType(*f3f7iter.DataSource.S3DataSource.S3DataDistributionType)
						}
						if f3f7iter.DataSource.S3DataSource.S3DataType != nil {
							f3f7elemf3f1.SetS3DataType(*f3f7iter.DataSource.S3DataSource.S3DataType)
						}
						if f3f7iter.DataSource.S3DataSource.S3URI != nil {
							f3f7elemf3f1.SetS3Uri(*f3f7iter.DataSource.S3DataSource.S3URI)
						}
						f3f7elemf3.SetS3DataSource(f3f7elemf3f1)
					}
					f3f7elem.SetDataSource(f3f7elemf3)
				}
				if f3f7iter.InputMode != nil {
					f3f7elem.SetInputMode(*f3f7iter.InputMode)
				}
				if f3f7iter.RecordWrapperType != nil {
					f3f7elem.SetRecordWrapperType(*f3f7iter.RecordWrapperType)
				}
				if f3f7iter.ShuffleConfig != nil {
					f3f7elemf6 := &svcsdk.ShuffleConfig{}
					if f3f7iter.ShuffleConfig.Seed != nil {
						f3f7elemf6.SetSeed(*f3f7iter.ShuffleConfig.Seed)
					}
					f3f7elem.SetShuffleConfig(f3f7elemf6)
				}
				f3f7 = append(f3f7, f3f7elem)
			}
			f3.SetInputDataConfig(f3f7)
		}
		if r.ko.Spec.TrainingJobDefinition.OutputDataConfig != nil {
			f3f8 := &svcsdk.OutputDataConfig{}
			if r.ko.Spec.TrainingJobDefinition.OutputDataConfig.KMSKeyID != nil {
				f3f8.SetKmsKeyId(*r.ko.Spec.TrainingJobDefinition.OutputDataConfig.KMSKeyID)
			}
			if r.ko.Spec.TrainingJobDefinition.OutputDataConfig.S3OutputPath != nil {
				f3f8.SetS3OutputPath(*r.ko.Spec.TrainingJobDefinition.OutputDataConfig.S3OutputPath)
			}
			f3.SetOutputDataConfig(f3f8)
		}
		if r.ko.Spec.TrainingJobDefinition.ResourceConfig != nil {
			f3f9 := &svcsdk.ResourceConfig{}
			if r.ko.Spec.TrainingJobDefinition.ResourceConfig.InstanceCount != nil {
				f3f9.SetInstanceCount(*r.ko.Spec.TrainingJobDefinition.ResourceConfig.InstanceCount)
			}
			if r.ko.Spec.TrainingJobDefinition.ResourceConfig.InstanceGroups != nil {
				f3f9f1 := []*svcsdk.InstanceGroup{}
				for _, f3f9f1iter := range r.ko.Spec.TrainingJobDefinition.ResourceConfig.InstanceGroups {
					f3f9f1elem := &svcsdk.InstanceGroup{}
					if f3f9f1iter.InstanceCount != nil {
						f3f9f1elem.SetInstanceCount(*f3f9f1iter.InstanceCount)
					}
					if f3f9f1iter.InstanceGroupName != nil {
						f3f9f1elem.SetInstanceGroupName(*f3f9f1iter.InstanceGroupName)
					}
					if f3f9f1iter.InstanceType != nil {
						f3f9f1elem.SetInstanceType(*f3f9f1iter.InstanceType)
					}
					f3f9f1 = append(f3f9f1, f3f9f1elem)
				}
				f3f9.SetInstanceGroups(f3f9f1)
			}
			if r.ko.Spec.TrainingJobDefinition.ResourceConfig.InstanceType != nil {
				f3f9.SetInstanceType(*r.ko.Spec.TrainingJobDefinition.ResourceConfig.InstanceType)
			}
			if r.ko.Spec.TrainingJobDefinition.ResourceConfig.VolumeKMSKeyID != nil {
				f3f9.SetVolumeKmsKeyId(*r.ko.Spec.TrainingJobDefinition.ResourceConfig.VolumeKMSKeyID)
			}
			if r.ko.Spec.TrainingJobDefinition.ResourceConfig.VolumeSizeInGB != nil {
				f3f9.SetVolumeSizeInGB(*r.ko.Spec.TrainingJobDefinition.ResourceConfig.VolumeSizeInGB)
			}
			f3.SetResourceConfig(f3f9)
		}
		if r.ko.Spec.TrainingJobDefinition.RetryStrategy != nil {
			f3f10 := &svcsdk.RetryStrategy{}
			if r.ko.Spec.TrainingJobDefinition.RetryStrategy.MaximumRetryAttempts != nil {
				f3f10.SetMaximumRetryAttempts(*r.ko.Spec.TrainingJobDefinition.RetryStrategy.MaximumRetryAttempts)
			}
			f3.SetRetryStrategy(f3f10)
		}
		if r.ko.Spec.TrainingJobDefinition.RoleARN != nil {
			f3.SetRoleArn(*r.ko.Spec.TrainingJobDefinition.RoleARN)
		}
		if r.ko.Spec.TrainingJobDefinition.StaticHyperParameters != nil {
			f3f12 := map[string]*string{}
			for f3f12key, f3f12valiter := range r.ko.Spec.TrainingJobDefinition.StaticHyperParameters {
				var f3f12val string
				f3f12val = *f3f12valiter
				f3f12[f3f12key] = &f3f12val
			}
			f3.SetStaticHyperParameters(f3f12)
		}
		if r.ko.Spec.TrainingJobDefinition.StoppingCondition != nil {
			f3f13 := &svcsdk.StoppingCondition{}
			if r.ko.Spec.TrainingJobDefinition.StoppingCondition.MaxRuntimeInSeconds != nil {
				f3f13.SetMaxRuntimeInSeconds(*r.ko.Spec.TrainingJobDefinition.StoppingCondition.MaxRuntimeInSeconds)
			}
			if r.ko.Spec.TrainingJobDefinition.StoppingCondition.MaxWaitTimeInSeconds != nil {
				f3f13.SetMaxWaitTimeInSeconds(*r.ko.Spec.TrainingJobDefinition.StoppingCondition.MaxWaitTimeInSeconds)
			}
			f3.SetStoppingCondition(f3f13)
		}
		if r.ko.Spec.TrainingJobDefinition.TuningObjective != nil {
			f3f14 := &svcsdk.HyperParameterTuningJobObjective{}
			if r.ko.Spec.TrainingJobDefinition.TuningObjective.MetricName != nil {
				f3f14.SetMetricName(*r.ko.Spec.TrainingJobDefinition.TuningObjective.MetricName)
			}
			if r.ko.Spec.TrainingJobDefinition.TuningObjective.Type != nil {
				f3f14.SetType(*r.ko.Spec.TrainingJobDefinition.TuningObjective.Type)
			}
			f3.SetTuningObjective(f3f14)
		}
		if r.ko.Spec.TrainingJobDefinition.VPCConfig != nil {
			f3f15 := &svcsdk.VpcConfig{}
			if r.ko.Spec.TrainingJobDefinition.VPCConfig.SecurityGroupIDs != nil {
				f3f15f0 := []*string{}
				for _, f3f15f0iter := range r.ko.Spec.TrainingJobDefinition.VPCConfig.SecurityGroupIDs {
					var f3f15f0elem string
					f3f15f0elem = *f3f15f0iter
					f3f15f0 = append(f3f15f0, &f3f15f0elem)
				}
				f3f15.SetSecurityGroupIds(f3f15f0)
			}
			if r.ko.Spec.TrainingJobDefinition.VPCConfig.Subnets != nil {
				f3f15f1 := []*string{}
				for _, f3f15f1iter := range r.ko.Spec.TrainingJobDefinition.VPCConfig.Subnets {
					var f3f15f1elem string
					f3f15f1elem = *f3f15f1iter
					f3f15f1 = append(f3f15f1, &f3f15f1elem)
				}
				f3f15.SetSubnets(f3f15f1)
			}
			f3.SetVpcConfig(f3f15)
		}
		res.SetTrainingJobDefinition(f3)
	}
	if r.ko.Spec.TrainingJobDefinitions != nil {
		f4 := []*svcsdk.HyperParameterTrainingJobDefinition{}
		for _, f4iter := range r.ko.Spec.TrainingJobDefinitions {
			f4elem := &svcsdk.HyperParameterTrainingJobDefinition{}
			if f4iter.AlgorithmSpecification != nil {
				f4elemf0 := &svcsdk.HyperParameterAlgorithmSpecification{}
				if f4iter.AlgorithmSpecification.AlgorithmName != nil {
					f4elemf0.SetAlgorithmName(*f4iter.AlgorithmSpecification.AlgorithmName)
				}
				if f4iter.AlgorithmSpecification.MetricDefinitions != nil {
					f4elemf0f1 := []*svcsdk.MetricDefinition{}
					for _, f4elemf0f1iter := range f4iter.AlgorithmSpecification.MetricDefinitions {
						f4elemf0f1elem := &svcsdk.MetricDefinition{}
						if f4elemf0f1iter.Name != nil {
							f4elemf0f1elem.SetName(*f4elemf0f1iter.Name)
						}
						if f4elemf0f1iter.Regex != nil {
							f4elemf0f1elem.SetRegex(*f4elemf0f1iter.Regex)
						}
						f4elemf0f1 = append(f4elemf0f1, f4elemf0f1elem)
					}
					f4elemf0.SetMetricDefinitions(f4elemf0f1)
				}
				if f4iter.AlgorithmSpecification.TrainingImage != nil {
					f4elemf0.SetTrainingImage(*f4iter.AlgorithmSpecification.TrainingImage)
				}
				if f4iter.AlgorithmSpecification.TrainingInputMode != nil {
					f4elemf0.SetTrainingInputMode(*f4iter.AlgorithmSpecification.TrainingInputMode)
				}
				f4elem.SetAlgorithmSpecification(f4elemf0)
			}
			if f4iter.CheckpointConfig != nil {
				f4elemf1 := &svcsdk.CheckpointConfig{}
				if f4iter.CheckpointConfig.LocalPath != nil {
					f4elemf1.SetLocalPath(*f4iter.CheckpointConfig.LocalPath)
				}
				if f4iter.CheckpointConfig.S3URI != nil {
					f4elemf1.SetS3Uri(*f4iter.CheckpointConfig.S3URI)
				}
				f4elem.SetCheckpointConfig(f4elemf1)
			}
			if f4iter.DefinitionName != nil {
				f4elem.SetDefinitionName(*f4iter.DefinitionName)
			}
			if f4iter.EnableInterContainerTrafficEncryption != nil {
				f4elem.SetEnableInterContainerTrafficEncryption(*f4iter.EnableInterContainerTrafficEncryption)
			}
			if f4iter.EnableManagedSpotTraining != nil {
				f4elem.SetEnableManagedSpotTraining(*f4iter.EnableManagedSpotTraining)
			}
			if f4iter.EnableNetworkIsolation != nil {
				f4elem.SetEnableNetworkIsolation(*f4iter.EnableNetworkIsolation)
			}
			if f4iter.HyperParameterRanges != nil {
				f4elemf6 := &svcsdk.ParameterRanges{}
				if f4iter.HyperParameterRanges.CategoricalParameterRanges != nil {
					f4elemf6f0 := []*svcsdk.CategoricalParameterRange{}
					for _, f4elemf6f0iter := range f4iter.HyperParameterRanges.CategoricalParameterRanges {
						f4elemf6f0elem := &svcsdk.CategoricalParameterRange{}
						if f4elemf6f0iter.Name != nil {
							f4elemf6f0elem.SetName(*f4elemf6f0iter.Name)
						}
						if f4elemf6f0iter.Values != nil {
							f4elemf6f0elemf1 := []*string{}
							for _, f4elemf6f0elemf1iter := range f4elemf6f0iter.Values {
								var f4elemf6f0elemf1elem string
								f4elemf6f0elemf1elem = *f4elemf6f0elemf1iter
								f4elemf6f0elemf1 = append(f4elemf6f0elemf1, &f4elemf6f0elemf1elem)
							}
							f4elemf6f0elem.SetValues(f4elemf6f0elemf1)
						}
						f4elemf6f0 = append(f4elemf6f0, f4elemf6f0elem)
					}
					f4elemf6.SetCategoricalParameterRanges(f4elemf6f0)
				}
				if f4iter.HyperParameterRanges.ContinuousParameterRanges != nil {
					f4elemf6f1 := []*svcsdk.ContinuousParameterRange{}
					for _, f4elemf6f1iter := range f4iter.HyperParameterRanges.ContinuousParameterRanges {
						f4elemf6f1elem := &svcsdk.ContinuousParameterRange{}
						if f4elemf6f1iter.MaxValue != nil {
							f4elemf6f1elem.SetMaxValue(*f4elemf6f1iter.MaxValue)
						}
						if f4elemf6f1iter.MinValue != nil {
							f4elemf6f1elem.SetMinValue(*f4elemf6f1iter.MinValue)
						}
						if f4elemf6f1iter.Name != nil {
							f4elemf6f1elem.SetName(*f4elemf6f1iter.Name)
						}
						if f4elemf6f1iter.ScalingType != nil {
							f4elemf6f1elem.SetScalingType(*f4elemf6f1iter.ScalingType)
						}
						f4elemf6f1 = append(f4elemf6f1, f4elemf6f1elem)
					}
					f4elemf6.SetContinuousParameterRanges(f4elemf6f1)
				}
				if f4iter.HyperParameterRanges.IntegerParameterRanges != nil {
					f4elemf6f2 := []*svcsdk.IntegerParameterRange{}
					for _, f4elemf6f2iter := range f4iter.HyperParameterRanges.IntegerParameterRanges {
						f4elemf6f2elem := &svcsdk.IntegerParameterRange{}
						if f4elemf6f2iter.MaxValue != nil {
							f4elemf6f2elem.SetMaxValue(*f4elemf6f2iter.MaxValue)
						}
						if f4elemf6f2iter.MinValue != nil {
							f4elemf6f2elem.SetMinValue(*f4elemf6f2iter.MinValue)
						}
						if f4elemf6f2iter.Name != nil {
							f4elemf6f2elem.SetName(*f4elemf6f2iter.Name)
						}
						if f4elemf6f2iter.ScalingType != nil {
							f4elemf6f2elem.SetScalingType(*f4elemf6f2iter.ScalingType)
						}
						f4elemf6f2 = append(f4elemf6f2, f4elemf6f2elem)
					}
					f4elemf6.SetIntegerParameterRanges(f4elemf6f2)
				}
				f4elem.SetHyperParameterRanges(f4elemf6)
			}
			if f4iter.InputDataConfig != nil {
				f4elemf7 := []*svcsdk.Channel{}
				for _, f4elemf7iter := range f4iter.InputDataConfig {
					f4elemf7elem := &svcsdk.Channel{}
					if f4elemf7iter.ChannelName != nil {
						f4elemf7elem.SetChannelName(*f4elemf7iter.ChannelName)
					}
					if f4elemf7iter.CompressionType != nil {
						f4elemf7elem.SetCompressionType(*f4elemf7iter.CompressionType)
					}
					if f4elemf7iter.ContentType != nil {
						f4elemf7elem.SetContentType(*f4elemf7iter.ContentType)
					}
					if f4elemf7iter.DataSource != nil {
						f4elemf7elemf3 := &svcsdk.DataSource{}
						if f4elemf7iter.DataSource.FileSystemDataSource != nil {
							f4elemf7elemf3f0 := &svcsdk.FileSystemDataSource{}
							if f4elemf7iter.DataSource.FileSystemDataSource.DirectoryPath != nil {
								f4elemf7elemf3f0.SetDirectoryPath(*f4elemf7iter.DataSource.FileSystemDataSource.DirectoryPath)
							}
							if f4elemf7iter.DataSource.FileSystemDataSource.FileSystemAccessMode != nil {
								f4elemf7elemf3f0.SetFileSystemAccessMode(*f4elemf7iter.DataSource.FileSystemDataSource.FileSystemAccessMode)
							}
							if f4elemf7iter.DataSource.FileSystemDataSource.FileSystemID != nil {
								f4elemf7elemf3f0.SetFileSystemId(*f4elemf7iter.DataSource.FileSystemDataSource.FileSystemID)
							}
							if f4elemf7iter.DataSource.FileSystemDataSource.FileSystemType != nil {
								f4elemf7elemf3f0.SetFileSystemType(*f4elemf7iter.DataSource.FileSystemDataSource.FileSystemType)
							}
							f4elemf7elemf3.SetFileSystemDataSource(f4elemf7elemf3f0)
						}
						if f4elemf7iter.DataSource.S3DataSource != nil {
							f4elemf7elemf3f1 := &svcsdk.S3DataSource{}
							if f4elemf7iter.DataSource.S3DataSource.AttributeNames != nil {
								f4elemf7elemf3f1f0 := []*string{}
								for _, f4elemf7elemf3f1f0iter := range f4elemf7iter.DataSource.S3DataSource.AttributeNames {
									var f4elemf7elemf3f1f0elem string
									f4elemf7elemf3f1f0elem = *f4elemf7elemf3f1f0iter
									f4elemf7elemf3f1f0 = append(f4elemf7elemf3f1f0, &f4elemf7elemf3f1f0elem)
								}
								f4elemf7elemf3f1.SetAttributeNames(f4elemf7elemf3f1f0)
							}
							if f4elemf7iter.DataSource.S3DataSource.InstanceGroupNames != nil {
								f4elemf7elemf3f1f1 := []*string{}
								for _, f4elemf7elemf3f1f1iter := range f4elemf7iter.DataSource.S3DataSource.InstanceGroupNames {
									var f4elemf7elemf3f1f1elem string
									f4elemf7elemf3f1f1elem = *f4elemf7elemf3f1f1iter
									f4elemf7elemf3f1f1 = append(f4elemf7elemf3f1f1, &f4elemf7elemf3f1f1elem)
								}
								f4elemf7elemf3f1.SetInstanceGroupNames(f4elemf7elemf3f1f1)
							}
							if f4elemf7iter.DataSource.S3DataSource.S3DataDistributionType != nil {
								f4elemf7elemf3f1.SetS3DataDistributionType(*f4elemf7iter.DataSource.S3DataSource.S3DataDistributionType)
							}
							if f4elemf7iter.DataSource.S3DataSource.S3DataType != nil {
								f4elemf7elemf3f1.SetS3DataType(*f4elemf7iter.DataSource.S3DataSource.S3DataType)
							}
							if f4elemf7iter.DataSource.S3DataSource.S3URI != nil {
								f4elemf7elemf3f1.SetS3Uri(*f4elemf7iter.DataSource.S3DataSource.S3URI)
							}
							f4elemf7elemf3.SetS3DataSource(f4elemf7elemf3f1)
						}
						f4elemf7elem.SetDataSource(f4elemf7elemf3)
					}
					if f4elemf7iter.InputMode != nil {
						f4elemf7elem.SetInputMode(*f4elemf7iter.InputMode)
					}
					if f4elemf7iter.RecordWrapperType != nil {
						f4elemf7elem.SetRecordWrapperType(*f4elemf7iter.RecordWrapperType)
					}
					if f4elemf7iter.ShuffleConfig != nil {
						f4elemf7elemf6 := &svcsdk.ShuffleConfig{}
						if f4elemf7iter.ShuffleConfig.Seed != nil {
							f4elemf7elemf6.SetSeed(*f4elemf7iter.ShuffleConfig.Seed)
						}
						f4elemf7elem.SetShuffleConfig(f4elemf7elemf6)
					}
					f4elemf7 = append(f4elemf7, f4elemf7elem)
				}
				f4elem.SetInputDataConfig(f4elemf7)
			}
			if f4iter.OutputDataConfig != nil {
				f4elemf8 := &svcsdk.OutputDataConfig{}
				if f4iter.OutputDataConfig.KMSKeyID != nil {
					f4elemf8.SetKmsKeyId(*f4iter.OutputDataConfig.KMSKeyID)
				}
				if f4iter.OutputDataConfig.S3OutputPath != nil {
					f4elemf8.SetS3OutputPath(*f4iter.OutputDataConfig.S3OutputPath)
				}
				f4elem.SetOutputDataConfig(f4elemf8)
			}
			if f4iter.ResourceConfig != nil {
				f4elemf9 := &svcsdk.ResourceConfig{}
				if f4iter.ResourceConfig.InstanceCount != nil {
					f4elemf9.SetInstanceCount(*f4iter.ResourceConfig.InstanceCount)
				}
				if f4iter.ResourceConfig.InstanceGroups != nil {
					f4elemf9f1 := []*svcsdk.InstanceGroup{}
					for _, f4elemf9f1iter := range f4iter.ResourceConfig.InstanceGroups {
						f4elemf9f1elem := &svcsdk.InstanceGroup{}
						if f4elemf9f1iter.InstanceCount != nil {
							f4elemf9f1elem.SetInstanceCount(*f4elemf9f1iter.InstanceCount)
						}
						if f4elemf9f1iter.InstanceGroupName != nil {
							f4elemf9f1elem.SetInstanceGroupName(*f4elemf9f1iter.InstanceGroupName)
						}
						if f4elemf9f1iter.InstanceType != nil {
							f4elemf9f1elem.SetInstanceType(*f4elemf9f1iter.InstanceType)
						}
						f4elemf9f1 = append(f4elemf9f1, f4elemf9f1elem)
					}
					f4elemf9.SetInstanceGroups(f4elemf9f1)
				}
				if f4iter.ResourceConfig.InstanceType != nil {
					f4elemf9.SetInstanceType(*f4iter.ResourceConfig.InstanceType)
				}
				if f4iter.ResourceConfig.VolumeKMSKeyID != nil {
					f4elemf9.SetVolumeKmsKeyId(*f4iter.ResourceConfig.VolumeKMSKeyID)
				}
				if f4iter.ResourceConfig.VolumeSizeInGB != nil {
					f4elemf9.SetVolumeSizeInGB(*f4iter.ResourceConfig.VolumeSizeInGB)
				}
				f4elem.SetResourceConfig(f4elemf9)
			}
			if f4iter.RetryStrategy != nil {
				f4elemf10 := &svcsdk.RetryStrategy{}
				if f4iter.RetryStrategy.MaximumRetryAttempts != nil {
					f4elemf10.SetMaximumRetryAttempts(*f4iter.RetryStrategy.MaximumRetryAttempts)
				}
				f4elem.SetRetryStrategy(f4elemf10)
			}
			if f4iter.RoleARN != nil {
				f4elem.SetRoleArn(*f4iter.RoleARN)
			}
			if f4iter.StaticHyperParameters != nil {
				f4elemf12 := map[string]*string{}
				for f4elemf12key, f4elemf12valiter := range f4iter.StaticHyperParameters {
					var f4elemf12val string
					f4elemf12val = *f4elemf12valiter
					f4elemf12[f4elemf12key] = &f4elemf12val
				}
				f4elem.SetStaticHyperParameters(f4elemf12)
			}
			if f4iter.StoppingCondition != nil {
				f4elemf13 := &svcsdk.StoppingCondition{}
				if f4iter.StoppingCondition.MaxRuntimeInSeconds != nil {
					f4elemf13.SetMaxRuntimeInSeconds(*f4iter.StoppingCondition.MaxRuntimeInSeconds)
				}
				if f4iter.StoppingCondition.MaxWaitTimeInSeconds != nil {
					f4elemf13.SetMaxWaitTimeInSeconds(*f4iter.StoppingCondition.MaxWaitTimeInSeconds)
				}
				f4elem.SetStoppingCondition(f4elemf13)
			}
			if f4iter.TuningObjective != nil {
				f4elemf14 := &svcsdk.HyperParameterTuningJobObjective{}
				if f4iter.TuningObjective.MetricName != nil {
					f4elemf14.SetMetricName(*f4iter.TuningObjective.MetricName)
				}
				if f4iter.TuningObjective.Type != nil {
					f4elemf14.SetType(*f4iter.TuningObjective.Type)
				}
				f4elem.SetTuningObjective(f4elemf14)
			}
			if f4iter.VPCConfig != nil {
				f4elemf15 := &svcsdk.VpcConfig{}
				if f4iter.VPCConfig.SecurityGroupIDs != nil {
					f4elemf15f0 := []*string{}
					for _, f4elemf15f0iter := range f4iter.VPCConfig.SecurityGroupIDs {
						var f4elemf15f0elem string
						f4elemf15f0elem = *f4elemf15f0iter
						f4elemf15f0 = append(f4elemf15f0, &f4elemf15f0elem)
					}
					f4elemf15.SetSecurityGroupIds(f4elemf15f0)
				}
				if f4iter.VPCConfig.Subnets != nil {
					f4elemf15f1 := []*string{}
					for _, f4elemf15f1iter := range f4iter.VPCConfig.Subnets {
						var f4elemf15f1elem string
						f4elemf15f1elem = *f4elemf15f1iter
						f4elemf15f1 = append(f4elemf15f1, &f4elemf15f1elem)
					}
					f4elemf15.SetSubnets(f4elemf15f1)
				}
				f4elem.SetVpcConfig(f4elemf15)
			}
			f4 = append(f4, f4elem)
		}
		res.SetTrainingJobDefinitions(f4)
	}
	if r.ko.Spec.WarmStartConfig != nil {
		f5 := &svcsdk.HyperParameterTuningJobWarmStartConfig{}
		if r.ko.Spec.WarmStartConfig.ParentHyperParameterTuningJobs != nil {
			f5f0 := []*svcsdk.ParentHyperParameterTuningJob{}
			for _, f5f0iter := range r.ko.Spec.WarmStartConfig.ParentHyperParameterTuningJobs {
				f5f0elem := &svcsdk.ParentHyperParameterTuningJob{}
				if f5f0iter.HyperParameterTuningJobName != nil {
					f5f0elem.SetHyperParameterTuningJobName(*f5f0iter.HyperParameterTuningJobName)
				}
				f5f0 = append(f5f0, f5f0elem)
			}
			f5.SetParentHyperParameterTuningJobs(f5f0)
		}
		if r.ko.Spec.WarmStartConfig.WarmStartType != nil {
			f5.SetWarmStartType(*r.ko.Spec.WarmStartConfig.WarmStartType)
		}
		res.SetWarmStartConfig(f5)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (*resource, error) {
	// TODO(jaypipes): Figure this out...
	return nil, ackerr.NotImplemented
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	latestStatus := r.ko.Status.HyperParameterTuningJobStatus
	if latestStatus != nil {
		if *latestStatus == svcsdk.HyperParameterTuningJobStatusStopping {
			return r, requeueWaitWhileDeleting
		}

		// Call StopHyperParameterTuningJob only if the job is InProgress, otherwise just
		// return nil to mark the resource Unmanaged
		if *latestStatus != svcsdk.HyperParameterTuningJobStatusInProgress {
			return r, err
		}
	}
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.StopHyperParameterTuningJobOutput
	_ = resp
	resp, err = rm.sdkapi.StopHyperParameterTuningJobWithContext(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "StopHyperParameterTuningJob", err)

	if err == nil {
		if observed, err := rm.sdkFind(ctx, r); err != ackerr.NotFound {
			if err != nil {
				return nil, err
			}
			r.SetStatus(observed)
			return r, requeueWaitWhileDeleting
		}
	}

	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.StopHyperParameterTuningJobInput, error) {
	res := &svcsdk.StopHyperParameterTuningJobInput{}

	if r.ko.Spec.HyperParameterTuningJobName != nil {
		res.SetHyperParameterTuningJobName(*r.ko.Spec.HyperParameterTuningJobName)
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.HyperParameterTuningJob,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}
	awsErr, ok := ackerr.AWSError(err)
	if !ok {
		return false
	}
	switch awsErr.Code() {
	case "ResourceNotFound",
		"ResourceInUse",
		"InvalidParameterCombination",
		"InvalidParameterValue",
		"MissingParameter":
		return true
	default:
		return false
	}
}
