// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package pipeline_execution

import (
	"context"
	"errors"
	"fmt"
	"math"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go-v2/aws"
	svcsdk "github.com/aws/aws-sdk-go-v2/service/sagemaker"
	svcsdktypes "github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
	smithy "github.com/aws/smithy-go"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/sagemaker-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &svcsdk.Client{}
	_ = &svcapitypes.PipelineExecution{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
	_ = &aws.Config{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.DescribePipelineExecutionOutput
	resp, err = rm.sdkapi.DescribePipelineExecution(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "DescribePipelineExecution", err)
	if err != nil {
		var awsErr smithy.APIError
		if errors.As(err, &awsErr) && awsErr.ErrorCode() == "ResourceNotFound" && strings.HasSuffix(awsErr.ErrorMessage(), "does not exist") {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()
	rm.customSetSpec(ko, resp)

	if resp.CreationTime != nil {
		ko.Status.CreationTime = &metav1.Time{*resp.CreationTime}
	} else {
		ko.Status.CreationTime = nil
	}
	if resp.FailureReason != nil {
		ko.Status.FailureReason = resp.FailureReason
	} else {
		ko.Status.FailureReason = nil
	}
	if resp.LastModifiedTime != nil {
		ko.Status.LastModifiedTime = &metav1.Time{*resp.LastModifiedTime}
	} else {
		ko.Status.LastModifiedTime = nil
	}
	if resp.ParallelismConfiguration != nil {
		f5 := &svcapitypes.ParallelismConfiguration{}
		if resp.ParallelismConfiguration.MaxParallelExecutionSteps != nil {
			maxParallelExecutionStepsCopy := int64(*resp.ParallelismConfiguration.MaxParallelExecutionSteps)
			f5.MaxParallelExecutionSteps = &maxParallelExecutionStepsCopy
		}
		ko.Spec.ParallelismConfiguration = f5
	} else {
		ko.Spec.ParallelismConfiguration = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.PipelineExecutionArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.PipelineExecutionArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.PipelineExecutionDescription != nil {
		ko.Spec.PipelineExecutionDescription = resp.PipelineExecutionDescription
	} else {
		ko.Spec.PipelineExecutionDescription = nil
	}
	if resp.PipelineExecutionDisplayName != nil {
		ko.Spec.PipelineExecutionDisplayName = resp.PipelineExecutionDisplayName
	} else {
		ko.Spec.PipelineExecutionDisplayName = nil
	}
	if resp.PipelineExecutionStatus != "" {
		ko.Status.PipelineExecutionStatus = aws.String(string(resp.PipelineExecutionStatus))
	} else {
		ko.Status.PipelineExecutionStatus = nil
	}
	if resp.SelectiveExecutionConfig != nil {
		f12 := &svcapitypes.SelectiveExecutionConfig{}
		if resp.SelectiveExecutionConfig.SelectedSteps != nil {
			f12f0 := []*svcapitypes.SelectedStep{}
			for _, f12f0iter := range resp.SelectiveExecutionConfig.SelectedSteps {
				f12f0elem := &svcapitypes.SelectedStep{}
				if f12f0iter.StepName != nil {
					f12f0elem.StepName = f12f0iter.StepName
				}
				f12f0 = append(f12f0, f12f0elem)
			}
			f12.SelectedSteps = f12f0
		}
		if resp.SelectiveExecutionConfig.SourcePipelineExecutionArn != nil {
			f12.SourcePipelineExecutionARN = resp.SelectiveExecutionConfig.SourcePipelineExecutionArn
		}
		ko.Spec.SelectiveExecutionConfig = f12
	} else {
		ko.Spec.SelectiveExecutionConfig = nil
	}

	rm.setStatusDefaults(ko)
	rm.customSetOutput(&resource{ko})
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return (r.ko.Status.ACKResourceMetadata == nil || r.ko.Status.ACKResourceMetadata.ARN == nil)

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.DescribePipelineExecutionInput, error) {
	res := &svcsdk.DescribePipelineExecutionInput{}

	if r.ko.Status.ACKResourceMetadata != nil && r.ko.Status.ACKResourceMetadata.ARN != nil {
		res.PipelineExecutionArn = (*string)(r.ko.Status.ACKResourceMetadata.ARN)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.StartPipelineExecutionOutput
	_ = resp
	resp, err = rm.sdkapi.StartPipelineExecution(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "StartPipelineExecution", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.PipelineExecutionArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.PipelineExecutionArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.StartPipelineExecutionInput, error) {
	res := &svcsdk.StartPipelineExecutionInput{}

	if r.ko.Spec.ParallelismConfiguration != nil {
		f0 := &svcsdktypes.ParallelismConfiguration{}
		if r.ko.Spec.ParallelismConfiguration.MaxParallelExecutionSteps != nil {
			maxParallelExecutionStepsCopy0 := *r.ko.Spec.ParallelismConfiguration.MaxParallelExecutionSteps
			if maxParallelExecutionStepsCopy0 > math.MaxInt32 || maxParallelExecutionStepsCopy0 < math.MinInt32 {
				return nil, fmt.Errorf("error: field MaxParallelExecutionSteps is of type int32")
			}
			maxParallelExecutionStepsCopy := int32(maxParallelExecutionStepsCopy0)
			f0.MaxParallelExecutionSteps = &maxParallelExecutionStepsCopy
		}
		res.ParallelismConfiguration = f0
	}
	if r.ko.Spec.PipelineExecutionDescription != nil {
		res.PipelineExecutionDescription = r.ko.Spec.PipelineExecutionDescription
	}
	if r.ko.Spec.PipelineExecutionDisplayName != nil {
		res.PipelineExecutionDisplayName = r.ko.Spec.PipelineExecutionDisplayName
	}
	if r.ko.Spec.PipelineName != nil {
		res.PipelineName = r.ko.Spec.PipelineName
	}
	if r.ko.Spec.PipelineParameters != nil {
		f4 := []svcsdktypes.Parameter{}
		for _, f4iter := range r.ko.Spec.PipelineParameters {
			f4elem := &svcsdktypes.Parameter{}
			if f4iter.Name != nil {
				f4elem.Name = f4iter.Name
			}
			if f4iter.Value != nil {
				f4elem.Value = f4iter.Value
			}
			f4 = append(f4, *f4elem)
		}
		res.PipelineParameters = f4
	}
	if r.ko.Spec.SelectiveExecutionConfig != nil {
		f5 := &svcsdktypes.SelectiveExecutionConfig{}
		if r.ko.Spec.SelectiveExecutionConfig.SelectedSteps != nil {
			f5f0 := []svcsdktypes.SelectedStep{}
			for _, f5f0iter := range r.ko.Spec.SelectiveExecutionConfig.SelectedSteps {
				f5f0elem := &svcsdktypes.SelectedStep{}
				if f5f0iter.StepName != nil {
					f5f0elem.StepName = f5f0iter.StepName
				}
				f5f0 = append(f5f0, *f5f0elem)
			}
			f5.SelectedSteps = f5f0
		}
		if r.ko.Spec.SelectiveExecutionConfig.SourcePipelineExecutionARN != nil {
			f5.SourcePipelineExecutionArn = r.ko.Spec.SelectiveExecutionConfig.SourcePipelineExecutionARN
		}
		res.SelectiveExecutionConfig = f5
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.UpdatePipelineExecutionOutput
	_ = resp
	resp, err = rm.sdkapi.UpdatePipelineExecution(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdatePipelineExecution", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.PipelineExecutionArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.PipelineExecutionArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	rm.setStatusDefaults(ko)
	rm.customSetOutput(&resource{ko})
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.UpdatePipelineExecutionInput, error) {
	res := &svcsdk.UpdatePipelineExecutionInput{}

	if r.ko.Spec.ParallelismConfiguration != nil {
		f0 := &svcsdktypes.ParallelismConfiguration{}
		if r.ko.Spec.ParallelismConfiguration.MaxParallelExecutionSteps != nil {
			maxParallelExecutionStepsCopy0 := *r.ko.Spec.ParallelismConfiguration.MaxParallelExecutionSteps
			if maxParallelExecutionStepsCopy0 > math.MaxInt32 || maxParallelExecutionStepsCopy0 < math.MinInt32 {
				return nil, fmt.Errorf("error: field MaxParallelExecutionSteps is of type int32")
			}
			maxParallelExecutionStepsCopy := int32(maxParallelExecutionStepsCopy0)
			f0.MaxParallelExecutionSteps = &maxParallelExecutionStepsCopy
		}
		res.ParallelismConfiguration = f0
	}
	if r.ko.Status.ACKResourceMetadata != nil && r.ko.Status.ACKResourceMetadata.ARN != nil {
		res.PipelineExecutionArn = (*string)(r.ko.Status.ACKResourceMetadata.ARN)
	}
	if r.ko.Spec.PipelineExecutionDescription != nil {
		res.PipelineExecutionDescription = r.ko.Spec.PipelineExecutionDescription
	}
	if r.ko.Spec.PipelineExecutionDisplayName != nil {
		res.PipelineExecutionDisplayName = r.ko.Spec.PipelineExecutionDisplayName
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	latestStatus := r.ko.Status.PipelineExecutionStatus
	if latestStatus != nil {
		if *latestStatus == string(svcsdktypes.PipelineExecutionStatusStopping) {
			return r, requeueWaitWhileDeleting
		}

		// Call StopPipelineExecution only if the job is Executing, otherwise just
		// return nil to mark the resource Unmanaged
		if *latestStatus != string(svcsdktypes.PipelineExecutionStatusExecuting) {
			return r, err
		}
	}
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.StopPipelineExecutionOutput
	_ = resp
	resp, err = rm.sdkapi.StopPipelineExecution(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "StopPipelineExecution", err)

	if err == nil {
		if observed, err := rm.sdkFind(ctx, r); err != ackerr.NotFound {
			if err != nil {
				return nil, err
			}
			r.SetStatus(observed)
			return r, requeueWaitWhileDeleting
		}
	}

	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.StopPipelineExecutionInput, error) {
	res := &svcsdk.StopPipelineExecutionInput{}

	if r.ko.Status.ACKResourceMetadata != nil && r.ko.Status.ACKResourceMetadata.ARN != nil {
		res.PipelineExecutionArn = (*string)(r.ko.Status.ACKResourceMetadata.ARN)
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.PipelineExecution,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	if syncCondition == nil && onSuccess {
		syncCondition = &ackv1alpha1.Condition{
			Type:   ackv1alpha1.ConditionTypeResourceSynced,
			Status: corev1.ConditionTrue,
		}
		ko.Status.Conditions = append(ko.Status.Conditions, syncCondition)
	}
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}

	var terminalErr smithy.APIError
	if !errors.As(err, &terminalErr) {
		return false
	}
	switch terminalErr.ErrorCode() {
	case "InvalidParameterCombination",
		"InvalidParameterValue",
		"MissingParameter",
		"ResourceNotFound":
		return true
	default:
		return false
	}
}
