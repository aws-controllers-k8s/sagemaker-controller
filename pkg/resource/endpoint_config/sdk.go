// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package endpoint_config

import (
	"context"
	"errors"
	"fmt"
	"math"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go-v2/aws"
	svcsdk "github.com/aws/aws-sdk-go-v2/service/sagemaker"
	svcsdktypes "github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
	smithy "github.com/aws/smithy-go"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/sagemaker-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &svcsdk.Client{}
	_ = &svcapitypes.EndpointConfig{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
	_ = &aws.Config{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.DescribeEndpointConfigOutput
	resp, err = rm.sdkapi.DescribeEndpointConfig(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "DescribeEndpointConfig", err)
	if err != nil {
		var awsErr smithy.APIError
		if errors.As(err, &awsErr) && awsErr.ErrorCode() == "ValidationException" && strings.HasPrefix(awsErr.ErrorMessage(), "Could not find endpoint configuration") {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.AsyncInferenceConfig != nil {
		f0 := &svcapitypes.AsyncInferenceConfig{}
		if resp.AsyncInferenceConfig.ClientConfig != nil {
			f0f0 := &svcapitypes.AsyncInferenceClientConfig{}
			if resp.AsyncInferenceConfig.ClientConfig.MaxConcurrentInvocationsPerInstance != nil {
				maxConcurrentInvocationsPerInstanceCopy := int64(*resp.AsyncInferenceConfig.ClientConfig.MaxConcurrentInvocationsPerInstance)
				f0f0.MaxConcurrentInvocationsPerInstance = &maxConcurrentInvocationsPerInstanceCopy
			}
			f0.ClientConfig = f0f0
		}
		if resp.AsyncInferenceConfig.OutputConfig != nil {
			f0f1 := &svcapitypes.AsyncInferenceOutputConfig{}
			if resp.AsyncInferenceConfig.OutputConfig.KmsKeyId != nil {
				f0f1.KMSKeyID = resp.AsyncInferenceConfig.OutputConfig.KmsKeyId
			}
			if resp.AsyncInferenceConfig.OutputConfig.NotificationConfig != nil {
				f0f1f1 := &svcapitypes.AsyncInferenceNotificationConfig{}
				if resp.AsyncInferenceConfig.OutputConfig.NotificationConfig.ErrorTopic != nil {
					f0f1f1.ErrorTopic = resp.AsyncInferenceConfig.OutputConfig.NotificationConfig.ErrorTopic
				}
				if resp.AsyncInferenceConfig.OutputConfig.NotificationConfig.IncludeInferenceResponseIn != nil {
					f0f1f1f1 := []*string{}
					for _, f0f1f1f1iter := range resp.AsyncInferenceConfig.OutputConfig.NotificationConfig.IncludeInferenceResponseIn {
						var f0f1f1f1elem *string
						f0f1f1f1elem = aws.String(string(f0f1f1f1iter))
						f0f1f1f1 = append(f0f1f1f1, f0f1f1f1elem)
					}
					f0f1f1.IncludeInferenceResponseIn = f0f1f1f1
				}
				if resp.AsyncInferenceConfig.OutputConfig.NotificationConfig.SuccessTopic != nil {
					f0f1f1.SuccessTopic = resp.AsyncInferenceConfig.OutputConfig.NotificationConfig.SuccessTopic
				}
				f0f1.NotificationConfig = f0f1f1
			}
			if resp.AsyncInferenceConfig.OutputConfig.S3FailurePath != nil {
				f0f1.S3FailurePath = resp.AsyncInferenceConfig.OutputConfig.S3FailurePath
			}
			if resp.AsyncInferenceConfig.OutputConfig.S3OutputPath != nil {
				f0f1.S3OutputPath = resp.AsyncInferenceConfig.OutputConfig.S3OutputPath
			}
			f0.OutputConfig = f0f1
		}
		ko.Spec.AsyncInferenceConfig = f0
	} else {
		ko.Spec.AsyncInferenceConfig = nil
	}
	if resp.DataCaptureConfig != nil {
		f2 := &svcapitypes.DataCaptureConfig{}
		if resp.DataCaptureConfig.CaptureContentTypeHeader != nil {
			f2f0 := &svcapitypes.CaptureContentTypeHeader{}
			if resp.DataCaptureConfig.CaptureContentTypeHeader.CsvContentTypes != nil {
				f2f0.CsvContentTypes = aws.StringSlice(resp.DataCaptureConfig.CaptureContentTypeHeader.CsvContentTypes)
			}
			if resp.DataCaptureConfig.CaptureContentTypeHeader.JsonContentTypes != nil {
				f2f0.JSONContentTypes = aws.StringSlice(resp.DataCaptureConfig.CaptureContentTypeHeader.JsonContentTypes)
			}
			f2.CaptureContentTypeHeader = f2f0
		}
		if resp.DataCaptureConfig.CaptureOptions != nil {
			f2f1 := []*svcapitypes.CaptureOption{}
			for _, f2f1iter := range resp.DataCaptureConfig.CaptureOptions {
				f2f1elem := &svcapitypes.CaptureOption{}
				if f2f1iter.CaptureMode != "" {
					f2f1elem.CaptureMode = aws.String(string(f2f1iter.CaptureMode))
				}
				f2f1 = append(f2f1, f2f1elem)
			}
			f2.CaptureOptions = f2f1
		}
		if resp.DataCaptureConfig.DestinationS3Uri != nil {
			f2.DestinationS3URI = resp.DataCaptureConfig.DestinationS3Uri
		}
		if resp.DataCaptureConfig.EnableCapture != nil {
			f2.EnableCapture = resp.DataCaptureConfig.EnableCapture
		}
		if resp.DataCaptureConfig.InitialSamplingPercentage != nil {
			initialSamplingPercentageCopy := int64(*resp.DataCaptureConfig.InitialSamplingPercentage)
			f2.InitialSamplingPercentage = &initialSamplingPercentageCopy
		}
		if resp.DataCaptureConfig.KmsKeyId != nil {
			f2.KMSKeyID = resp.DataCaptureConfig.KmsKeyId
		}
		ko.Spec.DataCaptureConfig = f2
	} else {
		ko.Spec.DataCaptureConfig = nil
	}
	if resp.EnableNetworkIsolation != nil {
		ko.Spec.EnableNetworkIsolation = resp.EnableNetworkIsolation
	} else {
		ko.Spec.EnableNetworkIsolation = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.EndpointConfigArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.EndpointConfigArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.EndpointConfigName != nil {
		ko.Spec.EndpointConfigName = resp.EndpointConfigName
	} else {
		ko.Spec.EndpointConfigName = nil
	}
	if resp.ExecutionRoleArn != nil {
		ko.Spec.ExecutionRoleARN = resp.ExecutionRoleArn
	} else {
		ko.Spec.ExecutionRoleARN = nil
	}
	if resp.KmsKeyId != nil {
		ko.Spec.KMSKeyID = resp.KmsKeyId
	} else {
		ko.Spec.KMSKeyID = nil
	}
	if resp.ProductionVariants != nil {
		f8 := []*svcapitypes.ProductionVariant{}
		for _, f8iter := range resp.ProductionVariants {
			f8elem := &svcapitypes.ProductionVariant{}
			if f8iter.AcceleratorType != "" {
				f8elem.AcceleratorType = aws.String(string(f8iter.AcceleratorType))
			}
			if f8iter.ContainerStartupHealthCheckTimeoutInSeconds != nil {
				containerStartupHealthCheckTimeoutInSecondsCopy := int64(*f8iter.ContainerStartupHealthCheckTimeoutInSeconds)
				f8elem.ContainerStartupHealthCheckTimeoutInSeconds = &containerStartupHealthCheckTimeoutInSecondsCopy
			}
			if f8iter.CoreDumpConfig != nil {
				f8elemf2 := &svcapitypes.ProductionVariantCoreDumpConfig{}
				if f8iter.CoreDumpConfig.DestinationS3Uri != nil {
					f8elemf2.DestinationS3URI = f8iter.CoreDumpConfig.DestinationS3Uri
				}
				if f8iter.CoreDumpConfig.KmsKeyId != nil {
					f8elemf2.KMSKeyID = f8iter.CoreDumpConfig.KmsKeyId
				}
				f8elem.CoreDumpConfig = f8elemf2
			}
			if f8iter.EnableSSMAccess != nil {
				f8elem.EnableSSMAccess = f8iter.EnableSSMAccess
			}
			if f8iter.InitialInstanceCount != nil {
				initialInstanceCountCopy := int64(*f8iter.InitialInstanceCount)
				f8elem.InitialInstanceCount = &initialInstanceCountCopy
			}
			if f8iter.InitialVariantWeight != nil {
				initialVariantWeightCopy := float64(*f8iter.InitialVariantWeight)
				f8elem.InitialVariantWeight = &initialVariantWeightCopy
			}
			if f8iter.InstanceType != "" {
				f8elem.InstanceType = aws.String(string(f8iter.InstanceType))
			}
			if f8iter.ManagedInstanceScaling != nil {
				f8elemf7 := &svcapitypes.ProductionVariantManagedInstanceScaling{}
				if f8iter.ManagedInstanceScaling.MaxInstanceCount != nil {
					maxInstanceCountCopy := int64(*f8iter.ManagedInstanceScaling.MaxInstanceCount)
					f8elemf7.MaxInstanceCount = &maxInstanceCountCopy
				}
				if f8iter.ManagedInstanceScaling.MinInstanceCount != nil {
					minInstanceCountCopy := int64(*f8iter.ManagedInstanceScaling.MinInstanceCount)
					f8elemf7.MinInstanceCount = &minInstanceCountCopy
				}
				if f8iter.ManagedInstanceScaling.Status != "" {
					f8elemf7.Status = aws.String(string(f8iter.ManagedInstanceScaling.Status))
				}
				f8elem.ManagedInstanceScaling = f8elemf7
			}
			if f8iter.ModelDataDownloadTimeoutInSeconds != nil {
				modelDataDownloadTimeoutInSecondsCopy := int64(*f8iter.ModelDataDownloadTimeoutInSeconds)
				f8elem.ModelDataDownloadTimeoutInSeconds = &modelDataDownloadTimeoutInSecondsCopy
			}
			if f8iter.ModelName != nil {
				f8elem.ModelName = f8iter.ModelName
			}
			if f8iter.RoutingConfig != nil {
				f8elemf10 := &svcapitypes.ProductionVariantRoutingConfig{}
				if f8iter.RoutingConfig.RoutingStrategy != "" {
					f8elemf10.RoutingStrategy = aws.String(string(f8iter.RoutingConfig.RoutingStrategy))
				}
				f8elem.RoutingConfig = f8elemf10
			}
			if f8iter.ServerlessConfig != nil {
				f8elemf11 := &svcapitypes.ProductionVariantServerlessConfig{}
				if f8iter.ServerlessConfig.MaxConcurrency != nil {
					maxConcurrencyCopy := int64(*f8iter.ServerlessConfig.MaxConcurrency)
					f8elemf11.MaxConcurrency = &maxConcurrencyCopy
				}
				if f8iter.ServerlessConfig.MemorySizeInMB != nil {
					memorySizeInMBCopy := int64(*f8iter.ServerlessConfig.MemorySizeInMB)
					f8elemf11.MemorySizeInMB = &memorySizeInMBCopy
				}
				if f8iter.ServerlessConfig.ProvisionedConcurrency != nil {
					provisionedConcurrencyCopy := int64(*f8iter.ServerlessConfig.ProvisionedConcurrency)
					f8elemf11.ProvisionedConcurrency = &provisionedConcurrencyCopy
				}
				f8elem.ServerlessConfig = f8elemf11
			}
			if f8iter.VariantName != nil {
				f8elem.VariantName = f8iter.VariantName
			}
			if f8iter.VolumeSizeInGB != nil {
				volumeSizeInGBCopy := int64(*f8iter.VolumeSizeInGB)
				f8elem.VolumeSizeInGB = &volumeSizeInGBCopy
			}
			f8 = append(f8, f8elem)
		}
		ko.Spec.ProductionVariants = f8
	} else {
		ko.Spec.ProductionVariants = nil
	}
	if resp.VpcConfig != nil {
		f10 := &svcapitypes.VPCConfig{}
		if resp.VpcConfig.SecurityGroupIds != nil {
			f10.SecurityGroupIDs = aws.StringSlice(resp.VpcConfig.SecurityGroupIds)
		}
		if resp.VpcConfig.Subnets != nil {
			f10.Subnets = aws.StringSlice(resp.VpcConfig.Subnets)
		}
		ko.Spec.VPCConfig = f10
	} else {
		ko.Spec.VPCConfig = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Spec.EndpointConfigName == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.DescribeEndpointConfigInput, error) {
	res := &svcsdk.DescribeEndpointConfigInput{}

	if r.ko.Spec.EndpointConfigName != nil {
		res.EndpointConfigName = r.ko.Spec.EndpointConfigName
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateEndpointConfigOutput
	_ = resp
	resp, err = rm.sdkapi.CreateEndpointConfig(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateEndpointConfig", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.EndpointConfigArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.EndpointConfigArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateEndpointConfigInput, error) {
	res := &svcsdk.CreateEndpointConfigInput{}

	if r.ko.Spec.AsyncInferenceConfig != nil {
		f0 := &svcsdktypes.AsyncInferenceConfig{}
		if r.ko.Spec.AsyncInferenceConfig.ClientConfig != nil {
			f0f0 := &svcsdktypes.AsyncInferenceClientConfig{}
			if r.ko.Spec.AsyncInferenceConfig.ClientConfig.MaxConcurrentInvocationsPerInstance != nil {
				maxConcurrentInvocationsPerInstanceCopy0 := *r.ko.Spec.AsyncInferenceConfig.ClientConfig.MaxConcurrentInvocationsPerInstance
				if maxConcurrentInvocationsPerInstanceCopy0 > math.MaxInt32 || maxConcurrentInvocationsPerInstanceCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field MaxConcurrentInvocationsPerInstance is of type int32")
				}
				maxConcurrentInvocationsPerInstanceCopy := int32(maxConcurrentInvocationsPerInstanceCopy0)
				f0f0.MaxConcurrentInvocationsPerInstance = &maxConcurrentInvocationsPerInstanceCopy
			}
			f0.ClientConfig = f0f0
		}
		if r.ko.Spec.AsyncInferenceConfig.OutputConfig != nil {
			f0f1 := &svcsdktypes.AsyncInferenceOutputConfig{}
			if r.ko.Spec.AsyncInferenceConfig.OutputConfig.KMSKeyID != nil {
				f0f1.KmsKeyId = r.ko.Spec.AsyncInferenceConfig.OutputConfig.KMSKeyID
			}
			if r.ko.Spec.AsyncInferenceConfig.OutputConfig.NotificationConfig != nil {
				f0f1f1 := &svcsdktypes.AsyncInferenceNotificationConfig{}
				if r.ko.Spec.AsyncInferenceConfig.OutputConfig.NotificationConfig.ErrorTopic != nil {
					f0f1f1.ErrorTopic = r.ko.Spec.AsyncInferenceConfig.OutputConfig.NotificationConfig.ErrorTopic
				}
				if r.ko.Spec.AsyncInferenceConfig.OutputConfig.NotificationConfig.IncludeInferenceResponseIn != nil {
					f0f1f1f1 := []svcsdktypes.AsyncNotificationTopicTypes{}
					for _, f0f1f1f1iter := range r.ko.Spec.AsyncInferenceConfig.OutputConfig.NotificationConfig.IncludeInferenceResponseIn {
						var f0f1f1f1elem string
						f0f1f1f1elem = string(*f0f1f1f1iter)
						f0f1f1f1 = append(f0f1f1f1, svcsdktypes.AsyncNotificationTopicTypes(f0f1f1f1elem))
					}
					f0f1f1.IncludeInferenceResponseIn = f0f1f1f1
				}
				if r.ko.Spec.AsyncInferenceConfig.OutputConfig.NotificationConfig.SuccessTopic != nil {
					f0f1f1.SuccessTopic = r.ko.Spec.AsyncInferenceConfig.OutputConfig.NotificationConfig.SuccessTopic
				}
				f0f1.NotificationConfig = f0f1f1
			}
			if r.ko.Spec.AsyncInferenceConfig.OutputConfig.S3FailurePath != nil {
				f0f1.S3FailurePath = r.ko.Spec.AsyncInferenceConfig.OutputConfig.S3FailurePath
			}
			if r.ko.Spec.AsyncInferenceConfig.OutputConfig.S3OutputPath != nil {
				f0f1.S3OutputPath = r.ko.Spec.AsyncInferenceConfig.OutputConfig.S3OutputPath
			}
			f0.OutputConfig = f0f1
		}
		res.AsyncInferenceConfig = f0
	}
	if r.ko.Spec.DataCaptureConfig != nil {
		f1 := &svcsdktypes.DataCaptureConfig{}
		if r.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader != nil {
			f1f0 := &svcsdktypes.CaptureContentTypeHeader{}
			if r.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader.CsvContentTypes != nil {
				f1f0.CsvContentTypes = aws.ToStringSlice(r.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader.CsvContentTypes)
			}
			if r.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader.JSONContentTypes != nil {
				f1f0.JsonContentTypes = aws.ToStringSlice(r.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader.JSONContentTypes)
			}
			f1.CaptureContentTypeHeader = f1f0
		}
		if r.ko.Spec.DataCaptureConfig.CaptureOptions != nil {
			f1f1 := []svcsdktypes.CaptureOption{}
			for _, f1f1iter := range r.ko.Spec.DataCaptureConfig.CaptureOptions {
				f1f1elem := &svcsdktypes.CaptureOption{}
				if f1f1iter.CaptureMode != nil {
					f1f1elem.CaptureMode = svcsdktypes.CaptureMode(*f1f1iter.CaptureMode)
				}
				f1f1 = append(f1f1, *f1f1elem)
			}
			f1.CaptureOptions = f1f1
		}
		if r.ko.Spec.DataCaptureConfig.DestinationS3URI != nil {
			f1.DestinationS3Uri = r.ko.Spec.DataCaptureConfig.DestinationS3URI
		}
		if r.ko.Spec.DataCaptureConfig.EnableCapture != nil {
			f1.EnableCapture = r.ko.Spec.DataCaptureConfig.EnableCapture
		}
		if r.ko.Spec.DataCaptureConfig.InitialSamplingPercentage != nil {
			initialSamplingPercentageCopy0 := *r.ko.Spec.DataCaptureConfig.InitialSamplingPercentage
			if initialSamplingPercentageCopy0 > math.MaxInt32 || initialSamplingPercentageCopy0 < math.MinInt32 {
				return nil, fmt.Errorf("error: field InitialSamplingPercentage is of type int32")
			}
			initialSamplingPercentageCopy := int32(initialSamplingPercentageCopy0)
			f1.InitialSamplingPercentage = &initialSamplingPercentageCopy
		}
		if r.ko.Spec.DataCaptureConfig.KMSKeyID != nil {
			f1.KmsKeyId = r.ko.Spec.DataCaptureConfig.KMSKeyID
		}
		res.DataCaptureConfig = f1
	}
	if r.ko.Spec.EnableNetworkIsolation != nil {
		res.EnableNetworkIsolation = r.ko.Spec.EnableNetworkIsolation
	}
	if r.ko.Spec.EndpointConfigName != nil {
		res.EndpointConfigName = r.ko.Spec.EndpointConfigName
	}
	if r.ko.Spec.ExecutionRoleARN != nil {
		res.ExecutionRoleArn = r.ko.Spec.ExecutionRoleARN
	}
	if r.ko.Spec.KMSKeyID != nil {
		res.KmsKeyId = r.ko.Spec.KMSKeyID
	}
	if r.ko.Spec.ProductionVariants != nil {
		f6 := []svcsdktypes.ProductionVariant{}
		for _, f6iter := range r.ko.Spec.ProductionVariants {
			f6elem := &svcsdktypes.ProductionVariant{}
			if f6iter.AcceleratorType != nil {
				f6elem.AcceleratorType = svcsdktypes.ProductionVariantAcceleratorType(*f6iter.AcceleratorType)
			}
			if f6iter.ContainerStartupHealthCheckTimeoutInSeconds != nil {
				containerStartupHealthCheckTimeoutInSecondsCopy0 := *f6iter.ContainerStartupHealthCheckTimeoutInSeconds
				if containerStartupHealthCheckTimeoutInSecondsCopy0 > math.MaxInt32 || containerStartupHealthCheckTimeoutInSecondsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field ContainerStartupHealthCheckTimeoutInSeconds is of type int32")
				}
				containerStartupHealthCheckTimeoutInSecondsCopy := int32(containerStartupHealthCheckTimeoutInSecondsCopy0)
				f6elem.ContainerStartupHealthCheckTimeoutInSeconds = &containerStartupHealthCheckTimeoutInSecondsCopy
			}
			if f6iter.CoreDumpConfig != nil {
				f6elemf2 := &svcsdktypes.ProductionVariantCoreDumpConfig{}
				if f6iter.CoreDumpConfig.DestinationS3URI != nil {
					f6elemf2.DestinationS3Uri = f6iter.CoreDumpConfig.DestinationS3URI
				}
				if f6iter.CoreDumpConfig.KMSKeyID != nil {
					f6elemf2.KmsKeyId = f6iter.CoreDumpConfig.KMSKeyID
				}
				f6elem.CoreDumpConfig = f6elemf2
			}
			if f6iter.EnableSSMAccess != nil {
				f6elem.EnableSSMAccess = f6iter.EnableSSMAccess
			}
			if f6iter.InitialInstanceCount != nil {
				initialInstanceCountCopy0 := *f6iter.InitialInstanceCount
				if initialInstanceCountCopy0 > math.MaxInt32 || initialInstanceCountCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field InitialInstanceCount is of type int32")
				}
				initialInstanceCountCopy := int32(initialInstanceCountCopy0)
				f6elem.InitialInstanceCount = &initialInstanceCountCopy
			}
			if f6iter.InitialVariantWeight != nil {
				initialVariantWeightCopy0 := *f6iter.InitialVariantWeight
				if initialVariantWeightCopy0 > math.MaxFloat32 || initialVariantWeightCopy0 < math.SmallestNonzeroFloat32 {
					return nil, fmt.Errorf("error: field InitialVariantWeight is of type float32")
				}
				initialVariantWeightCopy := float32(initialVariantWeightCopy0)
				f6elem.InitialVariantWeight = &initialVariantWeightCopy
			}
			if f6iter.InstanceType != nil {
				f6elem.InstanceType = svcsdktypes.ProductionVariantInstanceType(*f6iter.InstanceType)
			}
			if f6iter.ManagedInstanceScaling != nil {
				f6elemf7 := &svcsdktypes.ProductionVariantManagedInstanceScaling{}
				if f6iter.ManagedInstanceScaling.MaxInstanceCount != nil {
					maxInstanceCountCopy0 := *f6iter.ManagedInstanceScaling.MaxInstanceCount
					if maxInstanceCountCopy0 > math.MaxInt32 || maxInstanceCountCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field MaxInstanceCount is of type int32")
					}
					maxInstanceCountCopy := int32(maxInstanceCountCopy0)
					f6elemf7.MaxInstanceCount = &maxInstanceCountCopy
				}
				if f6iter.ManagedInstanceScaling.MinInstanceCount != nil {
					minInstanceCountCopy0 := *f6iter.ManagedInstanceScaling.MinInstanceCount
					if minInstanceCountCopy0 > math.MaxInt32 || minInstanceCountCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field MinInstanceCount is of type int32")
					}
					minInstanceCountCopy := int32(minInstanceCountCopy0)
					f6elemf7.MinInstanceCount = &minInstanceCountCopy
				}
				if f6iter.ManagedInstanceScaling.Status != nil {
					f6elemf7.Status = svcsdktypes.ManagedInstanceScalingStatus(*f6iter.ManagedInstanceScaling.Status)
				}
				f6elem.ManagedInstanceScaling = f6elemf7
			}
			if f6iter.ModelDataDownloadTimeoutInSeconds != nil {
				modelDataDownloadTimeoutInSecondsCopy0 := *f6iter.ModelDataDownloadTimeoutInSeconds
				if modelDataDownloadTimeoutInSecondsCopy0 > math.MaxInt32 || modelDataDownloadTimeoutInSecondsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field ModelDataDownloadTimeoutInSeconds is of type int32")
				}
				modelDataDownloadTimeoutInSecondsCopy := int32(modelDataDownloadTimeoutInSecondsCopy0)
				f6elem.ModelDataDownloadTimeoutInSeconds = &modelDataDownloadTimeoutInSecondsCopy
			}
			if f6iter.ModelName != nil {
				f6elem.ModelName = f6iter.ModelName
			}
			if f6iter.RoutingConfig != nil {
				f6elemf10 := &svcsdktypes.ProductionVariantRoutingConfig{}
				if f6iter.RoutingConfig.RoutingStrategy != nil {
					f6elemf10.RoutingStrategy = svcsdktypes.RoutingStrategy(*f6iter.RoutingConfig.RoutingStrategy)
				}
				f6elem.RoutingConfig = f6elemf10
			}
			if f6iter.ServerlessConfig != nil {
				f6elemf11 := &svcsdktypes.ProductionVariantServerlessConfig{}
				if f6iter.ServerlessConfig.MaxConcurrency != nil {
					maxConcurrencyCopy0 := *f6iter.ServerlessConfig.MaxConcurrency
					if maxConcurrencyCopy0 > math.MaxInt32 || maxConcurrencyCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field MaxConcurrency is of type int32")
					}
					maxConcurrencyCopy := int32(maxConcurrencyCopy0)
					f6elemf11.MaxConcurrency = &maxConcurrencyCopy
				}
				if f6iter.ServerlessConfig.MemorySizeInMB != nil {
					memorySizeInMBCopy0 := *f6iter.ServerlessConfig.MemorySizeInMB
					if memorySizeInMBCopy0 > math.MaxInt32 || memorySizeInMBCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field MemorySizeInMB is of type int32")
					}
					memorySizeInMBCopy := int32(memorySizeInMBCopy0)
					f6elemf11.MemorySizeInMB = &memorySizeInMBCopy
				}
				if f6iter.ServerlessConfig.ProvisionedConcurrency != nil {
					provisionedConcurrencyCopy0 := *f6iter.ServerlessConfig.ProvisionedConcurrency
					if provisionedConcurrencyCopy0 > math.MaxInt32 || provisionedConcurrencyCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field ProvisionedConcurrency is of type int32")
					}
					provisionedConcurrencyCopy := int32(provisionedConcurrencyCopy0)
					f6elemf11.ProvisionedConcurrency = &provisionedConcurrencyCopy
				}
				f6elem.ServerlessConfig = f6elemf11
			}
			if f6iter.VariantName != nil {
				f6elem.VariantName = f6iter.VariantName
			}
			if f6iter.VolumeSizeInGB != nil {
				volumeSizeInGBCopy0 := *f6iter.VolumeSizeInGB
				if volumeSizeInGBCopy0 > math.MaxInt32 || volumeSizeInGBCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field VolumeSizeInGB is of type int32")
				}
				volumeSizeInGBCopy := int32(volumeSizeInGBCopy0)
				f6elem.VolumeSizeInGB = &volumeSizeInGBCopy
			}
			f6 = append(f6, *f6elem)
		}
		res.ProductionVariants = f6
	}
	if r.ko.Spec.Tags != nil {
		f7 := []svcsdktypes.Tag{}
		for _, f7iter := range r.ko.Spec.Tags {
			f7elem := &svcsdktypes.Tag{}
			if f7iter.Key != nil {
				f7elem.Key = f7iter.Key
			}
			if f7iter.Value != nil {
				f7elem.Value = f7iter.Value
			}
			f7 = append(f7, *f7elem)
		}
		res.Tags = f7
	}
	if r.ko.Spec.VPCConfig != nil {
		f8 := &svcsdktypes.VpcConfig{}
		if r.ko.Spec.VPCConfig.SecurityGroupIDs != nil {
			f8.SecurityGroupIds = aws.ToStringSlice(r.ko.Spec.VPCConfig.SecurityGroupIDs)
		}
		if r.ko.Spec.VPCConfig.Subnets != nil {
			f8.Subnets = aws.ToStringSlice(r.ko.Spec.VPCConfig.Subnets)
		}
		res.VpcConfig = f8
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (*resource, error) {
	return nil, ackerr.NewTerminalError(ackerr.NotImplemented)
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteEndpointConfigOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteEndpointConfig(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteEndpointConfig", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteEndpointConfigInput, error) {
	res := &svcsdk.DeleteEndpointConfigInput{}

	if r.ko.Spec.EndpointConfigName != nil {
		res.EndpointConfigName = r.ko.Spec.EndpointConfigName
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.EndpointConfig,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}

	var terminalErr smithy.APIError
	if !errors.As(err, &terminalErr) {
		return false
	}
	switch terminalErr.ErrorCode() {
	case "InvalidParameterCombination",
		"InvalidParameterValue",
		"MissingParameter":
		return true
	default:
		return false
	}
}
