// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package endpoint_config

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}

	if ackcompare.HasNilDifference(a.ko.Spec.DataCaptureConfig, b.ko.Spec.DataCaptureConfig) {
		delta.Add("Spec.DataCaptureConfig", a.ko.Spec.DataCaptureConfig, b.ko.Spec.DataCaptureConfig)
	} else if a.ko.Spec.DataCaptureConfig != nil && b.ko.Spec.DataCaptureConfig != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader, b.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader) {
			delta.Add("Spec.DataCaptureConfig.CaptureContentTypeHeader", a.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader, b.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader)
		} else if a.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader != nil && b.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader != nil {
			if !ackcompare.SliceStringPEqual(a.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader.CsvContentTypes, b.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader.CsvContentTypes) {
				delta.Add("Spec.DataCaptureConfig.CaptureContentTypeHeader.CsvContentTypes", a.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader.CsvContentTypes, b.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader.CsvContentTypes)
			}
			if !ackcompare.SliceStringPEqual(a.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader.JSONContentTypes, b.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader.JSONContentTypes) {
				delta.Add("Spec.DataCaptureConfig.CaptureContentTypeHeader.JSONContentTypes", a.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader.JSONContentTypes, b.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader.JSONContentTypes)
			}
		}
		if !reflect.DeepEqual(a.ko.Spec.DataCaptureConfig.CaptureOptions, b.ko.Spec.DataCaptureConfig.CaptureOptions) {
			delta.Add("Spec.DataCaptureConfig.CaptureOptions", a.ko.Spec.DataCaptureConfig.CaptureOptions, b.ko.Spec.DataCaptureConfig.CaptureOptions)
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DataCaptureConfig.DestinationS3URI, b.ko.Spec.DataCaptureConfig.DestinationS3URI) {
			delta.Add("Spec.DataCaptureConfig.DestinationS3URI", a.ko.Spec.DataCaptureConfig.DestinationS3URI, b.ko.Spec.DataCaptureConfig.DestinationS3URI)
		} else if a.ko.Spec.DataCaptureConfig.DestinationS3URI != nil && b.ko.Spec.DataCaptureConfig.DestinationS3URI != nil {
			if *a.ko.Spec.DataCaptureConfig.DestinationS3URI != *b.ko.Spec.DataCaptureConfig.DestinationS3URI {
				delta.Add("Spec.DataCaptureConfig.DestinationS3URI", a.ko.Spec.DataCaptureConfig.DestinationS3URI, b.ko.Spec.DataCaptureConfig.DestinationS3URI)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DataCaptureConfig.EnableCapture, b.ko.Spec.DataCaptureConfig.EnableCapture) {
			delta.Add("Spec.DataCaptureConfig.EnableCapture", a.ko.Spec.DataCaptureConfig.EnableCapture, b.ko.Spec.DataCaptureConfig.EnableCapture)
		} else if a.ko.Spec.DataCaptureConfig.EnableCapture != nil && b.ko.Spec.DataCaptureConfig.EnableCapture != nil {
			if *a.ko.Spec.DataCaptureConfig.EnableCapture != *b.ko.Spec.DataCaptureConfig.EnableCapture {
				delta.Add("Spec.DataCaptureConfig.EnableCapture", a.ko.Spec.DataCaptureConfig.EnableCapture, b.ko.Spec.DataCaptureConfig.EnableCapture)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DataCaptureConfig.InitialSamplingPercentage, b.ko.Spec.DataCaptureConfig.InitialSamplingPercentage) {
			delta.Add("Spec.DataCaptureConfig.InitialSamplingPercentage", a.ko.Spec.DataCaptureConfig.InitialSamplingPercentage, b.ko.Spec.DataCaptureConfig.InitialSamplingPercentage)
		} else if a.ko.Spec.DataCaptureConfig.InitialSamplingPercentage != nil && b.ko.Spec.DataCaptureConfig.InitialSamplingPercentage != nil {
			if *a.ko.Spec.DataCaptureConfig.InitialSamplingPercentage != *b.ko.Spec.DataCaptureConfig.InitialSamplingPercentage {
				delta.Add("Spec.DataCaptureConfig.InitialSamplingPercentage", a.ko.Spec.DataCaptureConfig.InitialSamplingPercentage, b.ko.Spec.DataCaptureConfig.InitialSamplingPercentage)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DataCaptureConfig.KMSKeyID, b.ko.Spec.DataCaptureConfig.KMSKeyID) {
			delta.Add("Spec.DataCaptureConfig.KMSKeyID", a.ko.Spec.DataCaptureConfig.KMSKeyID, b.ko.Spec.DataCaptureConfig.KMSKeyID)
		} else if a.ko.Spec.DataCaptureConfig.KMSKeyID != nil && b.ko.Spec.DataCaptureConfig.KMSKeyID != nil {
			if *a.ko.Spec.DataCaptureConfig.KMSKeyID != *b.ko.Spec.DataCaptureConfig.KMSKeyID {
				delta.Add("Spec.DataCaptureConfig.KMSKeyID", a.ko.Spec.DataCaptureConfig.KMSKeyID, b.ko.Spec.DataCaptureConfig.KMSKeyID)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.EndpointConfigName, b.ko.Spec.EndpointConfigName) {
		delta.Add("Spec.EndpointConfigName", a.ko.Spec.EndpointConfigName, b.ko.Spec.EndpointConfigName)
	} else if a.ko.Spec.EndpointConfigName != nil && b.ko.Spec.EndpointConfigName != nil {
		if *a.ko.Spec.EndpointConfigName != *b.ko.Spec.EndpointConfigName {
			delta.Add("Spec.EndpointConfigName", a.ko.Spec.EndpointConfigName, b.ko.Spec.EndpointConfigName)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.KMSKeyID, b.ko.Spec.KMSKeyID) {
		delta.Add("Spec.KMSKeyID", a.ko.Spec.KMSKeyID, b.ko.Spec.KMSKeyID)
	} else if a.ko.Spec.KMSKeyID != nil && b.ko.Spec.KMSKeyID != nil {
		if *a.ko.Spec.KMSKeyID != *b.ko.Spec.KMSKeyID {
			delta.Add("Spec.KMSKeyID", a.ko.Spec.KMSKeyID, b.ko.Spec.KMSKeyID)
		}
	}
	if !reflect.DeepEqual(a.ko.Spec.ProductionVariants, b.ko.Spec.ProductionVariants) {
		delta.Add("Spec.ProductionVariants", a.ko.Spec.ProductionVariants, b.ko.Spec.ProductionVariants)
	}
	if !reflect.DeepEqual(a.ko.Spec.Tags, b.ko.Spec.Tags) {
		delta.Add("Spec.Tags", a.ko.Spec.Tags, b.ko.Spec.Tags)
	}

	return delta
}
