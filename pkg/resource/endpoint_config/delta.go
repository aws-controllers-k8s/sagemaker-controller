// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package endpoint_config

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktags "github.com/aws-controllers-k8s/runtime/pkg/tags"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
	_ = &acktags.Tags{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}
	customSetDefaults(a, b)

	if ackcompare.HasNilDifference(a.ko.Spec.AsyncInferenceConfig, b.ko.Spec.AsyncInferenceConfig) {
		delta.Add("Spec.AsyncInferenceConfig", a.ko.Spec.AsyncInferenceConfig, b.ko.Spec.AsyncInferenceConfig)
	} else if a.ko.Spec.AsyncInferenceConfig != nil && b.ko.Spec.AsyncInferenceConfig != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.AsyncInferenceConfig.ClientConfig, b.ko.Spec.AsyncInferenceConfig.ClientConfig) {
			delta.Add("Spec.AsyncInferenceConfig.ClientConfig", a.ko.Spec.AsyncInferenceConfig.ClientConfig, b.ko.Spec.AsyncInferenceConfig.ClientConfig)
		} else if a.ko.Spec.AsyncInferenceConfig.ClientConfig != nil && b.ko.Spec.AsyncInferenceConfig.ClientConfig != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.AsyncInferenceConfig.ClientConfig.MaxConcurrentInvocationsPerInstance, b.ko.Spec.AsyncInferenceConfig.ClientConfig.MaxConcurrentInvocationsPerInstance) {
				delta.Add("Spec.AsyncInferenceConfig.ClientConfig.MaxConcurrentInvocationsPerInstance", a.ko.Spec.AsyncInferenceConfig.ClientConfig.MaxConcurrentInvocationsPerInstance, b.ko.Spec.AsyncInferenceConfig.ClientConfig.MaxConcurrentInvocationsPerInstance)
			} else if a.ko.Spec.AsyncInferenceConfig.ClientConfig.MaxConcurrentInvocationsPerInstance != nil && b.ko.Spec.AsyncInferenceConfig.ClientConfig.MaxConcurrentInvocationsPerInstance != nil {
				if *a.ko.Spec.AsyncInferenceConfig.ClientConfig.MaxConcurrentInvocationsPerInstance != *b.ko.Spec.AsyncInferenceConfig.ClientConfig.MaxConcurrentInvocationsPerInstance {
					delta.Add("Spec.AsyncInferenceConfig.ClientConfig.MaxConcurrentInvocationsPerInstance", a.ko.Spec.AsyncInferenceConfig.ClientConfig.MaxConcurrentInvocationsPerInstance, b.ko.Spec.AsyncInferenceConfig.ClientConfig.MaxConcurrentInvocationsPerInstance)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.AsyncInferenceConfig.OutputConfig, b.ko.Spec.AsyncInferenceConfig.OutputConfig) {
			delta.Add("Spec.AsyncInferenceConfig.OutputConfig", a.ko.Spec.AsyncInferenceConfig.OutputConfig, b.ko.Spec.AsyncInferenceConfig.OutputConfig)
		} else if a.ko.Spec.AsyncInferenceConfig.OutputConfig != nil && b.ko.Spec.AsyncInferenceConfig.OutputConfig != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.AsyncInferenceConfig.OutputConfig.KMSKeyID, b.ko.Spec.AsyncInferenceConfig.OutputConfig.KMSKeyID) {
				delta.Add("Spec.AsyncInferenceConfig.OutputConfig.KMSKeyID", a.ko.Spec.AsyncInferenceConfig.OutputConfig.KMSKeyID, b.ko.Spec.AsyncInferenceConfig.OutputConfig.KMSKeyID)
			} else if a.ko.Spec.AsyncInferenceConfig.OutputConfig.KMSKeyID != nil && b.ko.Spec.AsyncInferenceConfig.OutputConfig.KMSKeyID != nil {
				if *a.ko.Spec.AsyncInferenceConfig.OutputConfig.KMSKeyID != *b.ko.Spec.AsyncInferenceConfig.OutputConfig.KMSKeyID {
					delta.Add("Spec.AsyncInferenceConfig.OutputConfig.KMSKeyID", a.ko.Spec.AsyncInferenceConfig.OutputConfig.KMSKeyID, b.ko.Spec.AsyncInferenceConfig.OutputConfig.KMSKeyID)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.AsyncInferenceConfig.OutputConfig.NotificationConfig, b.ko.Spec.AsyncInferenceConfig.OutputConfig.NotificationConfig) {
				delta.Add("Spec.AsyncInferenceConfig.OutputConfig.NotificationConfig", a.ko.Spec.AsyncInferenceConfig.OutputConfig.NotificationConfig, b.ko.Spec.AsyncInferenceConfig.OutputConfig.NotificationConfig)
			} else if a.ko.Spec.AsyncInferenceConfig.OutputConfig.NotificationConfig != nil && b.ko.Spec.AsyncInferenceConfig.OutputConfig.NotificationConfig != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.AsyncInferenceConfig.OutputConfig.NotificationConfig.ErrorTopic, b.ko.Spec.AsyncInferenceConfig.OutputConfig.NotificationConfig.ErrorTopic) {
					delta.Add("Spec.AsyncInferenceConfig.OutputConfig.NotificationConfig.ErrorTopic", a.ko.Spec.AsyncInferenceConfig.OutputConfig.NotificationConfig.ErrorTopic, b.ko.Spec.AsyncInferenceConfig.OutputConfig.NotificationConfig.ErrorTopic)
				} else if a.ko.Spec.AsyncInferenceConfig.OutputConfig.NotificationConfig.ErrorTopic != nil && b.ko.Spec.AsyncInferenceConfig.OutputConfig.NotificationConfig.ErrorTopic != nil {
					if *a.ko.Spec.AsyncInferenceConfig.OutputConfig.NotificationConfig.ErrorTopic != *b.ko.Spec.AsyncInferenceConfig.OutputConfig.NotificationConfig.ErrorTopic {
						delta.Add("Spec.AsyncInferenceConfig.OutputConfig.NotificationConfig.ErrorTopic", a.ko.Spec.AsyncInferenceConfig.OutputConfig.NotificationConfig.ErrorTopic, b.ko.Spec.AsyncInferenceConfig.OutputConfig.NotificationConfig.ErrorTopic)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.AsyncInferenceConfig.OutputConfig.NotificationConfig.SuccessTopic, b.ko.Spec.AsyncInferenceConfig.OutputConfig.NotificationConfig.SuccessTopic) {
					delta.Add("Spec.AsyncInferenceConfig.OutputConfig.NotificationConfig.SuccessTopic", a.ko.Spec.AsyncInferenceConfig.OutputConfig.NotificationConfig.SuccessTopic, b.ko.Spec.AsyncInferenceConfig.OutputConfig.NotificationConfig.SuccessTopic)
				} else if a.ko.Spec.AsyncInferenceConfig.OutputConfig.NotificationConfig.SuccessTopic != nil && b.ko.Spec.AsyncInferenceConfig.OutputConfig.NotificationConfig.SuccessTopic != nil {
					if *a.ko.Spec.AsyncInferenceConfig.OutputConfig.NotificationConfig.SuccessTopic != *b.ko.Spec.AsyncInferenceConfig.OutputConfig.NotificationConfig.SuccessTopic {
						delta.Add("Spec.AsyncInferenceConfig.OutputConfig.NotificationConfig.SuccessTopic", a.ko.Spec.AsyncInferenceConfig.OutputConfig.NotificationConfig.SuccessTopic, b.ko.Spec.AsyncInferenceConfig.OutputConfig.NotificationConfig.SuccessTopic)
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.AsyncInferenceConfig.OutputConfig.S3OutputPath, b.ko.Spec.AsyncInferenceConfig.OutputConfig.S3OutputPath) {
				delta.Add("Spec.AsyncInferenceConfig.OutputConfig.S3OutputPath", a.ko.Spec.AsyncInferenceConfig.OutputConfig.S3OutputPath, b.ko.Spec.AsyncInferenceConfig.OutputConfig.S3OutputPath)
			} else if a.ko.Spec.AsyncInferenceConfig.OutputConfig.S3OutputPath != nil && b.ko.Spec.AsyncInferenceConfig.OutputConfig.S3OutputPath != nil {
				if *a.ko.Spec.AsyncInferenceConfig.OutputConfig.S3OutputPath != *b.ko.Spec.AsyncInferenceConfig.OutputConfig.S3OutputPath {
					delta.Add("Spec.AsyncInferenceConfig.OutputConfig.S3OutputPath", a.ko.Spec.AsyncInferenceConfig.OutputConfig.S3OutputPath, b.ko.Spec.AsyncInferenceConfig.OutputConfig.S3OutputPath)
				}
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.DataCaptureConfig, b.ko.Spec.DataCaptureConfig) {
		delta.Add("Spec.DataCaptureConfig", a.ko.Spec.DataCaptureConfig, b.ko.Spec.DataCaptureConfig)
	} else if a.ko.Spec.DataCaptureConfig != nil && b.ko.Spec.DataCaptureConfig != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader, b.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader) {
			delta.Add("Spec.DataCaptureConfig.CaptureContentTypeHeader", a.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader, b.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader)
		} else if a.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader != nil && b.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader != nil {
			if len(a.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader.CsvContentTypes) != len(b.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader.CsvContentTypes) {
				delta.Add("Spec.DataCaptureConfig.CaptureContentTypeHeader.CsvContentTypes", a.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader.CsvContentTypes, b.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader.CsvContentTypes)
			} else if len(a.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader.CsvContentTypes) > 0 {
				if !ackcompare.SliceStringPEqual(a.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader.CsvContentTypes, b.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader.CsvContentTypes) {
					delta.Add("Spec.DataCaptureConfig.CaptureContentTypeHeader.CsvContentTypes", a.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader.CsvContentTypes, b.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader.CsvContentTypes)
				}
			}
			if len(a.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader.JSONContentTypes) != len(b.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader.JSONContentTypes) {
				delta.Add("Spec.DataCaptureConfig.CaptureContentTypeHeader.JSONContentTypes", a.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader.JSONContentTypes, b.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader.JSONContentTypes)
			} else if len(a.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader.JSONContentTypes) > 0 {
				if !ackcompare.SliceStringPEqual(a.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader.JSONContentTypes, b.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader.JSONContentTypes) {
					delta.Add("Spec.DataCaptureConfig.CaptureContentTypeHeader.JSONContentTypes", a.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader.JSONContentTypes, b.ko.Spec.DataCaptureConfig.CaptureContentTypeHeader.JSONContentTypes)
				}
			}
		}
		if len(a.ko.Spec.DataCaptureConfig.CaptureOptions) != len(b.ko.Spec.DataCaptureConfig.CaptureOptions) {
			delta.Add("Spec.DataCaptureConfig.CaptureOptions", a.ko.Spec.DataCaptureConfig.CaptureOptions, b.ko.Spec.DataCaptureConfig.CaptureOptions)
		} else if len(a.ko.Spec.DataCaptureConfig.CaptureOptions) > 0 {
			if !reflect.DeepEqual(a.ko.Spec.DataCaptureConfig.CaptureOptions, b.ko.Spec.DataCaptureConfig.CaptureOptions) {
				delta.Add("Spec.DataCaptureConfig.CaptureOptions", a.ko.Spec.DataCaptureConfig.CaptureOptions, b.ko.Spec.DataCaptureConfig.CaptureOptions)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DataCaptureConfig.DestinationS3URI, b.ko.Spec.DataCaptureConfig.DestinationS3URI) {
			delta.Add("Spec.DataCaptureConfig.DestinationS3URI", a.ko.Spec.DataCaptureConfig.DestinationS3URI, b.ko.Spec.DataCaptureConfig.DestinationS3URI)
		} else if a.ko.Spec.DataCaptureConfig.DestinationS3URI != nil && b.ko.Spec.DataCaptureConfig.DestinationS3URI != nil {
			if *a.ko.Spec.DataCaptureConfig.DestinationS3URI != *b.ko.Spec.DataCaptureConfig.DestinationS3URI {
				delta.Add("Spec.DataCaptureConfig.DestinationS3URI", a.ko.Spec.DataCaptureConfig.DestinationS3URI, b.ko.Spec.DataCaptureConfig.DestinationS3URI)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DataCaptureConfig.EnableCapture, b.ko.Spec.DataCaptureConfig.EnableCapture) {
			delta.Add("Spec.DataCaptureConfig.EnableCapture", a.ko.Spec.DataCaptureConfig.EnableCapture, b.ko.Spec.DataCaptureConfig.EnableCapture)
		} else if a.ko.Spec.DataCaptureConfig.EnableCapture != nil && b.ko.Spec.DataCaptureConfig.EnableCapture != nil {
			if *a.ko.Spec.DataCaptureConfig.EnableCapture != *b.ko.Spec.DataCaptureConfig.EnableCapture {
				delta.Add("Spec.DataCaptureConfig.EnableCapture", a.ko.Spec.DataCaptureConfig.EnableCapture, b.ko.Spec.DataCaptureConfig.EnableCapture)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DataCaptureConfig.InitialSamplingPercentage, b.ko.Spec.DataCaptureConfig.InitialSamplingPercentage) {
			delta.Add("Spec.DataCaptureConfig.InitialSamplingPercentage", a.ko.Spec.DataCaptureConfig.InitialSamplingPercentage, b.ko.Spec.DataCaptureConfig.InitialSamplingPercentage)
		} else if a.ko.Spec.DataCaptureConfig.InitialSamplingPercentage != nil && b.ko.Spec.DataCaptureConfig.InitialSamplingPercentage != nil {
			if *a.ko.Spec.DataCaptureConfig.InitialSamplingPercentage != *b.ko.Spec.DataCaptureConfig.InitialSamplingPercentage {
				delta.Add("Spec.DataCaptureConfig.InitialSamplingPercentage", a.ko.Spec.DataCaptureConfig.InitialSamplingPercentage, b.ko.Spec.DataCaptureConfig.InitialSamplingPercentage)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DataCaptureConfig.KMSKeyID, b.ko.Spec.DataCaptureConfig.KMSKeyID) {
			delta.Add("Spec.DataCaptureConfig.KMSKeyID", a.ko.Spec.DataCaptureConfig.KMSKeyID, b.ko.Spec.DataCaptureConfig.KMSKeyID)
		} else if a.ko.Spec.DataCaptureConfig.KMSKeyID != nil && b.ko.Spec.DataCaptureConfig.KMSKeyID != nil {
			if *a.ko.Spec.DataCaptureConfig.KMSKeyID != *b.ko.Spec.DataCaptureConfig.KMSKeyID {
				delta.Add("Spec.DataCaptureConfig.KMSKeyID", a.ko.Spec.DataCaptureConfig.KMSKeyID, b.ko.Spec.DataCaptureConfig.KMSKeyID)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.EndpointConfigName, b.ko.Spec.EndpointConfigName) {
		delta.Add("Spec.EndpointConfigName", a.ko.Spec.EndpointConfigName, b.ko.Spec.EndpointConfigName)
	} else if a.ko.Spec.EndpointConfigName != nil && b.ko.Spec.EndpointConfigName != nil {
		if *a.ko.Spec.EndpointConfigName != *b.ko.Spec.EndpointConfigName {
			delta.Add("Spec.EndpointConfigName", a.ko.Spec.EndpointConfigName, b.ko.Spec.EndpointConfigName)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.KMSKeyID, b.ko.Spec.KMSKeyID) {
		delta.Add("Spec.KMSKeyID", a.ko.Spec.KMSKeyID, b.ko.Spec.KMSKeyID)
	} else if a.ko.Spec.KMSKeyID != nil && b.ko.Spec.KMSKeyID != nil {
		if *a.ko.Spec.KMSKeyID != *b.ko.Spec.KMSKeyID {
			delta.Add("Spec.KMSKeyID", a.ko.Spec.KMSKeyID, b.ko.Spec.KMSKeyID)
		}
	}
	if len(a.ko.Spec.ProductionVariants) != len(b.ko.Spec.ProductionVariants) {
		delta.Add("Spec.ProductionVariants", a.ko.Spec.ProductionVariants, b.ko.Spec.ProductionVariants)
	} else if len(a.ko.Spec.ProductionVariants) > 0 {
		if !reflect.DeepEqual(a.ko.Spec.ProductionVariants, b.ko.Spec.ProductionVariants) {
			delta.Add("Spec.ProductionVariants", a.ko.Spec.ProductionVariants, b.ko.Spec.ProductionVariants)
		}
	}

	return delta
}
