// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package pipeline

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}

	if ackcompare.HasNilDifference(a.ko.Spec.ParallelismConfiguration, b.ko.Spec.ParallelismConfiguration) {
		delta.Add("Spec.ParallelismConfiguration", a.ko.Spec.ParallelismConfiguration, b.ko.Spec.ParallelismConfiguration)
	} else if a.ko.Spec.ParallelismConfiguration != nil && b.ko.Spec.ParallelismConfiguration != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.ParallelismConfiguration.MaxParallelExecutionSteps, b.ko.Spec.ParallelismConfiguration.MaxParallelExecutionSteps) {
			delta.Add("Spec.ParallelismConfiguration.MaxParallelExecutionSteps", a.ko.Spec.ParallelismConfiguration.MaxParallelExecutionSteps, b.ko.Spec.ParallelismConfiguration.MaxParallelExecutionSteps)
		} else if a.ko.Spec.ParallelismConfiguration.MaxParallelExecutionSteps != nil && b.ko.Spec.ParallelismConfiguration.MaxParallelExecutionSteps != nil {
			if *a.ko.Spec.ParallelismConfiguration.MaxParallelExecutionSteps != *b.ko.Spec.ParallelismConfiguration.MaxParallelExecutionSteps {
				delta.Add("Spec.ParallelismConfiguration.MaxParallelExecutionSteps", a.ko.Spec.ParallelismConfiguration.MaxParallelExecutionSteps, b.ko.Spec.ParallelismConfiguration.MaxParallelExecutionSteps)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.PipelineDefinition, b.ko.Spec.PipelineDefinition) {
		delta.Add("Spec.PipelineDefinition", a.ko.Spec.PipelineDefinition, b.ko.Spec.PipelineDefinition)
	} else if a.ko.Spec.PipelineDefinition != nil && b.ko.Spec.PipelineDefinition != nil {
		if *a.ko.Spec.PipelineDefinition != *b.ko.Spec.PipelineDefinition {
			delta.Add("Spec.PipelineDefinition", a.ko.Spec.PipelineDefinition, b.ko.Spec.PipelineDefinition)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.PipelineDescription, b.ko.Spec.PipelineDescription) {
		delta.Add("Spec.PipelineDescription", a.ko.Spec.PipelineDescription, b.ko.Spec.PipelineDescription)
	} else if a.ko.Spec.PipelineDescription != nil && b.ko.Spec.PipelineDescription != nil {
		if *a.ko.Spec.PipelineDescription != *b.ko.Spec.PipelineDescription {
			delta.Add("Spec.PipelineDescription", a.ko.Spec.PipelineDescription, b.ko.Spec.PipelineDescription)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.PipelineDisplayName, b.ko.Spec.PipelineDisplayName) {
		delta.Add("Spec.PipelineDisplayName", a.ko.Spec.PipelineDisplayName, b.ko.Spec.PipelineDisplayName)
	} else if a.ko.Spec.PipelineDisplayName != nil && b.ko.Spec.PipelineDisplayName != nil {
		if *a.ko.Spec.PipelineDisplayName != *b.ko.Spec.PipelineDisplayName {
			delta.Add("Spec.PipelineDisplayName", a.ko.Spec.PipelineDisplayName, b.ko.Spec.PipelineDisplayName)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.PipelineName, b.ko.Spec.PipelineName) {
		delta.Add("Spec.PipelineName", a.ko.Spec.PipelineName, b.ko.Spec.PipelineName)
	} else if a.ko.Spec.PipelineName != nil && b.ko.Spec.PipelineName != nil {
		if *a.ko.Spec.PipelineName != *b.ko.Spec.PipelineName {
			delta.Add("Spec.PipelineName", a.ko.Spec.PipelineName, b.ko.Spec.PipelineName)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.RoleARN, b.ko.Spec.RoleARN) {
		delta.Add("Spec.RoleARN", a.ko.Spec.RoleARN, b.ko.Spec.RoleARN)
	} else if a.ko.Spec.RoleARN != nil && b.ko.Spec.RoleARN != nil {
		if *a.ko.Spec.RoleARN != *b.ko.Spec.RoleARN {
			delta.Add("Spec.RoleARN", a.ko.Spec.RoleARN, b.ko.Spec.RoleARN)
		}
	}

	return delta
}
