// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// LabelingJobSpec defines the desired state of LabelingJob.
type LabelingJobSpec struct {

	// Configures the labeling task and how it is presented to workers; including,
	// but not limited to price, keywords, and batch size (task count).
	// +kubebuilder:validation:Required
	HumanTaskConfig *HumanTaskConfig `json:"humanTaskConfig"`
	// Input data for the labeling job, such as the Amazon S3 location of the data
	// objects and the location of the manifest file that describes the data objects.
	//
	// You must specify at least one of the following: S3DataSource or SnsDataSource.
	//
	//   - Use SnsDataSource to specify an SNS input topic for a streaming labeling
	//     job. If you do not specify and SNS input topic ARN, Ground Truth will
	//     create a one-time labeling job that stops after all data objects in the
	//     input manifest file have been labeled.
	//
	//   - Use S3DataSource to specify an input manifest file for both streaming
	//     and one-time labeling jobs. Adding an S3DataSource is optional if you
	//     use SnsDataSource to create a streaming labeling job.
	//
	// If you use the Amazon Mechanical Turk workforce, your input data should not
	// include confidential information, personal information or protected health
	// information. Use ContentClassifiers to specify that your data is free of
	// personally identifiable information and adult content.
	// +kubebuilder:validation:Required
	InputConfig *LabelingJobInputConfig `json:"inputConfig"`
	// The attribute name to use for the label in the output manifest file. This
	// is the key for the key/value pair formed with the label that a worker assigns
	// to the object. The LabelAttributeName must meet the following requirements.
	//
	//   - The name can't end with "-metadata".
	//
	//   - If you are using one of the following built-in task types (https://docs.aws.amazon.com/sagemaker/latest/dg/sms-task-types.html),
	//     the attribute name must end with "-ref". If the task type you are using
	//     is not listed below, the attribute name must not end with "-ref". Image
	//     semantic segmentation (SemanticSegmentation), and adjustment (AdjustmentSemanticSegmentation)
	//     and verification (VerificationSemanticSegmentation) labeling jobs for
	//     this task type. Video frame object detection (VideoObjectDetection), and
	//     adjustment and verification (AdjustmentVideoObjectDetection) labeling
	//     jobs for this task type. Video frame object tracking (VideoObjectTracking),
	//     and adjustment and verification (AdjustmentVideoObjectTracking) labeling
	//     jobs for this task type. 3D point cloud semantic segmentation (3DPointCloudSemanticSegmentation),
	//     and adjustment and verification (Adjustment3DPointCloudSemanticSegmentation)
	//     labeling jobs for this task type. 3D point cloud object tracking (3DPointCloudObjectTracking),
	//     and adjustment and verification (Adjustment3DPointCloudObjectTracking)
	//     labeling jobs for this task type.
	//
	// If you are creating an adjustment or verification labeling job, you must
	// use a different LabelAttributeName than the one used in the original labeling
	// job. The original labeling job is the Ground Truth labeling job that produced
	// the labels that you want verified or adjusted. To learn more about adjustment
	// and verification labeling jobs, see Verify and Adjust Labels (https://docs.aws.amazon.com/sagemaker/latest/dg/sms-verification-data.html).
	//
	// Regex Pattern: `^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,126}$`
	// +kubebuilder:validation:Required
	LabelAttributeName *string `json:"labelAttributeName"`
	// The S3 URI of the file, referred to as a label category configuration file,
	// that defines the categories used to label the data objects.
	//
	// For 3D point cloud and video frame task types, you can add label category
	// attributes and frame attributes to your label category configuration file.
	// To learn how, see Create a Labeling Category Configuration File for 3D Point
	// Cloud Labeling Jobs (https://docs.aws.amazon.com/sagemaker/latest/dg/sms-point-cloud-label-category-config.html).
	//
	// For named entity recognition jobs, in addition to "labels", you must provide
	// worker instructions in the label category configuration file using the "instructions"
	// parameter: "instructions": {"shortInstruction":"
	// Add header
	//
	// Add Instructions
	// ", "fullInstruction":"
	// Add additional instructions.
	// "}. For details and an example, see Create a Named Entity Recognition Labeling
	// Job (API) (https://docs.aws.amazon.com/sagemaker/latest/dg/sms-named-entity-recg.html#sms-creating-ner-api).
	//
	// For all other built-in task types (https://docs.aws.amazon.com/sagemaker/latest/dg/sms-task-types.html)
	// and custom tasks (https://docs.aws.amazon.com/sagemaker/latest/dg/sms-custom-templates.html),
	// your label category configuration file must be a JSON file in the following
	// format. Identify the labels you want to use by replacing label_1, label_2,...,label_n
	// with your label categories.
	//
	// {
	//
	// "document-version": "2018-11-28",
	//
	// "labels": [{"label": "label_1"},{"label": "label_2"},...{"label": "label_n"}]
	//
	// }
	//
	// Note the following about the label category configuration file:
	//
	//   - For image classification and text classification (single and multi-label)
	//     you must specify at least two label categories. For all other task types,
	//     the minimum number of label categories required is one.
	//
	//   - Each label category must be unique, you cannot specify duplicate label
	//     categories.
	//
	//   - If you create a 3D point cloud or video frame adjustment or verification
	//     labeling job, you must include auditLabelAttributeName in the label category
	//     configuration. Use this parameter to enter the LabelAttributeName (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateLabelingJob.html#sagemaker-CreateLabelingJob-request-LabelAttributeName)
	//     of the labeling job you want to adjust or verify annotations of.
	//
	// Regex Pattern: `^(https|s3)://([^/]+)/?(.*)$`
	LabelCategoryConfigS3URI *string `json:"labelCategoryConfigS3URI,omitempty"`
	// Configures the information required to perform automated data labeling.
	LabelingJobAlgorithmsConfig *LabelingJobAlgorithmsConfig `json:"labelingJobAlgorithmsConfig,omitempty"`
	// The name of the labeling job. This name is used to identify the job in a
	// list of labeling jobs. Labeling job names must be unique within an Amazon
	// Web Services account and region. LabelingJobName is not case sensitive. For
	// example, Example-job and example-job are considered the same labeling job
	// name by Ground Truth.
	//
	// Regex Pattern: `^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}$`
	// +kubebuilder:validation:Required
	LabelingJobName *string `json:"labelingJobName"`
	// The location of the output data and the Amazon Web Services Key Management
	// Service key ID for the key used to encrypt the output data, if any.
	// +kubebuilder:validation:Required
	OutputConfig *LabelingJobOutputConfig `json:"outputConfig"`
	// The Amazon Resource Number (ARN) that Amazon SageMaker assumes to perform
	// tasks on your behalf during data labeling. You must grant this role the necessary
	// permissions so that Amazon SageMaker can successfully complete data labeling.
	//
	// Regex Pattern: `^arn:aws[a-z\-]*:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$`
	// +kubebuilder:validation:Required
	RoleARN *string `json:"roleARN"`
	// A set of conditions for stopping the labeling job. If any of the conditions
	// are met, the job is automatically stopped. You can use these conditions to
	// control the cost of data labeling.
	StoppingConditions *LabelingJobStoppingConditions `json:"stoppingConditions,omitempty"`
	// An array of key/value pairs. For more information, see Using Cost Allocation
	// Tags (https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what)
	// in the Amazon Web Services Billing and Cost Management User Guide.
	Tags []*Tag `json:"tags,omitempty"`
}

// LabelingJobStatus defines the observed state of LabelingJob
type LabelingJobStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRs managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// If the job failed, the reason that it failed.
	// +kubebuilder:validation:Optional
	FailureReason *string `json:"failureReason,omitempty"`
	// Provides a breakdown of the number of data objects labeled by humans, the
	// number of objects labeled by machine, the number of objects than couldn't
	// be labeled, and the total number of objects labeled.
	// +kubebuilder:validation:Optional
	LabelCounters *LabelCounters `json:"labelCounters,omitempty"`
	// The processing status of the labeling job.
	// +kubebuilder:validation:Optional
	LabelingJobStatus *string `json:"labelingJobStatus,omitempty"`
}

// LabelingJob is the Schema for the LabelingJobs API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="FAILURE-REASON",type=string,priority=1,JSONPath=`.status.failureReason`
// +kubebuilder:printcolumn:name="STATUS",type=string,priority=0,JSONPath=`.status.labelingJobStatus`
type LabelingJob struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LabelingJobSpec   `json:"spec,omitempty"`
	Status            LabelingJobStatus `json:"status,omitempty"`
}

// LabelingJobList contains a list of LabelingJob
// +kubebuilder:object:root=true
type LabelingJobList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LabelingJob `json:"items"`
}

func init() {
	SchemeBuilder.Register(&LabelingJob{}, &LabelingJobList{})
}
