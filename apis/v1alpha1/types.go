// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	"github.com/aws/aws-sdk-go/aws"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = &aws.JSONValue{}
	_ = ackv1alpha1.AWSAccountID("")
)

// A structure describing the source of an action.
type ActionSource struct {
	SourceID   *string `json:"sourceID,omitempty"`
	SourceType *string `json:"sourceType,omitempty"`
}

// Lists the properties of an action. An action represents an action or activity.
// Some examples are a workflow step and a model deployment. Generally, an action
// involves at least one input artifact or output artifact.
type ActionSummary struct {
	ActionName       *string      `json:"actionName,omitempty"`
	CreationTime     *metav1.Time `json:"creationTime,omitempty"`
	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`
}

// A structure of additional Inference Specification. Additional Inference Specification
// specifies details about inference jobs that can be run with models based
// on this model package
type AdditionalInferenceSpecificationDefinition struct {
	Containers                              []*ModelPackageContainerDefinition `json:"containers,omitempty"`
	Description                             *string                            `json:"description,omitempty"`
	Name                                    *string                            `json:"name,omitempty"`
	SupportedContentTypes                   []*string                          `json:"supportedContentTypes,omitempty"`
	SupportedRealtimeInferenceInstanceTypes []*string                          `json:"supportedRealtimeInferenceInstanceTypes,omitempty"`
	SupportedResponseMIMETypes              []*string                          `json:"supportedResponseMIMETypes,omitempty"`
	SupportedTransformInstanceTypes         []*string                          `json:"supportedTransformInstanceTypes,omitempty"`
}

// A data source used for training or inference that is in addition to the input
// dataset or model data.
type AdditionalS3DataSource struct {
	CompressionType *string `json:"compressionType,omitempty"`
	S3DataType      *string `json:"s3DataType,omitempty"`
	S3URI           *string `json:"s3URI,omitempty"`
}

// An Amazon CloudWatch alarm configured to monitor metrics on an endpoint.
type Alarm struct {
	AlarmName *string `json:"alarmName,omitempty"`
}

// Specifies the training algorithm to use in a CreateTrainingJob (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html)
// request.
//
// For more information about algorithms provided by SageMaker, see Algorithms
// (https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html). For information
// about using your own algorithms, see Using Your Own Algorithms with Amazon
// SageMaker (https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html).
type AlgorithmSpecification struct {
	AlgorithmName                    *string             `json:"algorithmName,omitempty"`
	EnableSageMakerMetricsTimeSeries *bool               `json:"enableSageMakerMetricsTimeSeries,omitempty"`
	MetricDefinitions                []*MetricDefinition `json:"metricDefinitions,omitempty"`
	TrainingImage                    *string             `json:"trainingImage,omitempty"`
	// The training input mode that the algorithm supports. For more information
	// about input modes, see Algorithms (https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html).
	//
	// Pipe mode
	//
	// If an algorithm supports Pipe mode, Amazon SageMaker streams data directly
	// from Amazon S3 to the container.
	//
	// File mode
	//
	// If an algorithm supports File mode, SageMaker downloads the training data
	// from S3 to the provisioned ML storage volume, and mounts the directory to
	// the Docker volume for the training container.
	//
	// You must provision the ML storage volume with sufficient capacity to accommodate
	// the data downloaded from S3. In addition to the training data, the ML storage
	// volume also stores the output model. The algorithm container uses the ML
	// storage volume to also store intermediate information, if any.
	//
	// For distributed algorithms, training data is distributed uniformly. Your
	// training duration is predictable if the input data objects sizes are approximately
	// the same. SageMaker does not split the files any further for model training.
	// If the object sizes are skewed, training won't be optimal as the data distribution
	// is also skewed when one host in a training cluster is overloaded, thus becoming
	// a bottleneck in training.
	//
	// FastFile mode
	//
	// If an algorithm supports FastFile mode, SageMaker streams data directly from
	// S3 to the container with no code changes, and provides file system access
	// to the data. Users can author their training script to interact with these
	// files as if they were stored on disk.
	//
	// FastFile mode works best when the data is read sequentially. Augmented manifest
	// files aren't supported. The startup time is lower when there are fewer files
	// in the S3 bucket provided.
	TrainingInputMode *string `json:"trainingInputMode,omitempty"`
}

// Represents the overall status of an algorithm.
type AlgorithmStatusItem struct {
	FailureReason *string `json:"failureReason,omitempty"`
	Name          *string `json:"name,omitempty"`
}

// Provides summary information about an algorithm.
type AlgorithmSummary struct {
	AlgorithmDescription *string      `json:"algorithmDescription,omitempty"`
	AlgorithmName        *string      `json:"algorithmName,omitempty"`
	CreationTime         *metav1.Time `json:"creationTime,omitempty"`
}

// Defines a training job and a batch transform job that SageMaker runs to validate
// your algorithm.
//
// The data provided in the validation profile is made available to your buyers
// on Amazon Web Services Marketplace.
type AlgorithmValidationProfile struct {
	ProfileName *string `json:"profileName,omitempty"`
	// Defines the input needed to run a transform job using the inference specification
	// specified in the algorithm.
	TransformJobDefinition *TransformJobDefinition `json:"transformJobDefinition,omitempty"`
}

// Specifies configurations for one or more training jobs that SageMaker runs
// to test the algorithm.
type AlgorithmValidationSpecification struct {
	ValidationRole *string `json:"validationRole,omitempty"`
}

// Details about an Amazon SageMaker app.
type AppDetails struct {
	AppName      *string      `json:"appName,omitempty"`
	AppType      *string      `json:"appType,omitempty"`
	CreationTime *metav1.Time `json:"creationTime,omitempty"`
	DomainID     *string      `json:"domainID,omitempty"`
	// Specifies the ARN's of a SageMaker image and SageMaker image version, and
	// the instance type that the version runs on.
	ResourceSpec    *ResourceSpec `json:"resourceSpec,omitempty"`
	Status          *string       `json:"status,omitempty"`
	UserProfileName *string       `json:"userProfileName,omitempty"`
}

// The configuration for running a SageMaker image as a KernelGateway app.
type AppImageConfigDetails struct {
	AppImageConfigName *string      `json:"appImageConfigName,omitempty"`
	CreationTime       *metav1.Time `json:"creationTime,omitempty"`
	LastModifiedTime   *metav1.Time `json:"lastModifiedTime,omitempty"`
}

// Configuration to run a processing job in a specified container image.
type AppSpecification struct {
	ContainerArguments  []*string `json:"containerArguments,omitempty"`
	ContainerEntrypoint []*string `json:"containerEntrypoint,omitempty"`
	ImageURI            *string   `json:"imageURI,omitempty"`
}

// The ID and ID type of an artifact source.
type ArtifactSourceType struct {
	Value *string `json:"value,omitempty"`
}

// Lists a summary of the properties of an artifact. An artifact represents
// a URI addressable object or data. Some examples are a dataset and a model.
type ArtifactSummary struct {
	ArtifactName     *string      `json:"artifactName,omitempty"`
	ArtifactType     *string      `json:"artifactType,omitempty"`
	CreationTime     *metav1.Time `json:"creationTime,omitempty"`
	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`
}

// Lists a summary of the properties of an association. An association is an
// entity that links other lineage or experiment entities. An example would
// be an association between a training job and a model.
type AssociationSummary struct {
	// Information about the user who created or modified an experiment, trial,
	// trial component, lineage group, project, or model card.
	CreatedBy       *UserContext `json:"createdBy,omitempty"`
	CreationTime    *metav1.Time `json:"creationTime,omitempty"`
	DestinationName *string      `json:"destinationName,omitempty"`
	DestinationType *string      `json:"destinationType,omitempty"`
	SourceName      *string      `json:"sourceName,omitempty"`
	SourceType      *string      `json:"sourceType,omitempty"`
}

// Configures the behavior of the client used by SageMaker to interact with
// the model container during asynchronous inference.
type AsyncInferenceClientConfig struct {
	MaxConcurrentInvocationsPerInstance *int64 `json:"maxConcurrentInvocationsPerInstance,omitempty"`
}

// Specifies configuration for how an endpoint performs asynchronous inference.
type AsyncInferenceConfig struct {
	// Configures the behavior of the client used by SageMaker to interact with
	// the model container during asynchronous inference.
	ClientConfig *AsyncInferenceClientConfig `json:"clientConfig,omitempty"`
	// Specifies the configuration for asynchronous inference invocation outputs.
	OutputConfig *AsyncInferenceOutputConfig `json:"outputConfig,omitempty"`
}

// Specifies the configuration for notifications of inference results for asynchronous
// inference.
type AsyncInferenceNotificationConfig struct {
	ErrorTopic                 *string   `json:"errorTopic,omitempty"`
	IncludeInferenceResponseIn []*string `json:"includeInferenceResponseIn,omitempty"`
	SuccessTopic               *string   `json:"successTopic,omitempty"`
}

// Specifies the configuration for asynchronous inference invocation outputs.
type AsyncInferenceOutputConfig struct {
	KMSKeyID *string `json:"kmsKeyID,omitempty"`
	// Specifies the configuration for notifications of inference results for asynchronous
	// inference.
	NotificationConfig *AsyncInferenceNotificationConfig `json:"notificationConfig,omitempty"`
	S3FailurePath      *string                           `json:"s3FailurePath,omitempty"`
	S3OutputPath       *string                           `json:"s3OutputPath,omitempty"`
}

// Configuration for Athena Dataset Definition input.
type AthenaDatasetDefinition struct {
	// The name of the data catalog used in Athena query execution.
	Catalog *string `json:"catalog,omitempty"`
	// The name of the database used in the Athena query execution.
	Database *string `json:"database,omitempty"`
	KMSKeyID *string `json:"kmsKeyID,omitempty"`
	// The compression used for Athena query results.
	OutputCompression *string `json:"outputCompression,omitempty"`
	// The data storage format for Athena query results.
	OutputFormat *string `json:"outputFormat,omitempty"`
	OutputS3URI  *string `json:"outputS3URI,omitempty"`
	// The SQL query statements, to be executed.
	QueryString *string `json:"queryString,omitempty"`
	// The name of the workgroup in which the Athena query is being started.
	WorkGroup *string `json:"workGroup,omitempty"`
}

// Information about a candidate produced by an AutoML training job, including
// its status, steps, and other properties.
type AutoMLCandidate struct {
	CreationTime     *metav1.Time `json:"creationTime,omitempty"`
	EndTime          *metav1.Time `json:"endTime,omitempty"`
	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`
	ObjectiveStatus  *string      `json:"objectiveStatus,omitempty"`
}

// Stores the configuration information for how a candidate is generated (optional).
type AutoMLCandidateGenerationConfig struct {
	FeatureSpecificationS3URI *string `json:"featureSpecificationS3URI,omitempty"`
}

// A channel is a named input source that training algorithms can consume. The
// validation dataset size is limited to less than 2 GB. The training dataset
// size must be less than 100 GB. For more information, see Channel (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Channel.html).
//
// A validation dataset must contain the same headers as the training dataset.
type AutoMLChannel struct {
	CompressionType *string `json:"compressionType,omitempty"`
	ContentType     *string `json:"contentType,omitempty"`
}

// A list of container definitions that describe the different containers that
// make up an AutoML candidate. For more information, see ContainerDefinition
// (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ContainerDefinition.html).
type AutoMLContainerDefinition struct {
	Environment  map[string]*string `json:"environment,omitempty"`
	Image        *string            `json:"image,omitempty"`
	ModelDataURL *string            `json:"modelDataURL,omitempty"`
}

// A channel is a named input source that training algorithms can consume. This
// channel is used for AutoML jobs V2 (jobs created by calling CreateAutoMLJobV2
// (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJobV2.html)).
type AutoMLJobChannel struct {
	CompressionType *string `json:"compressionType,omitempty"`
	ContentType     *string `json:"contentType,omitempty"`
}

// Metadata for an AutoML job step.
type AutoMLJobStepMetadata struct {
	ARN *string `json:"arn,omitempty"`
}

// Provides a summary about an AutoML job.
type AutoMLJobSummary struct {
	AutoMLJobARN     *string      `json:"autoMLJobARN,omitempty"`
	CreationTime     *metav1.Time `json:"creationTime,omitempty"`
	EndTime          *metav1.Time `json:"endTime,omitempty"`
	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`
}

// The output data configuration.
type AutoMLOutputDataConfig struct {
	KMSKeyID     *string `json:"kmsKeyID,omitempty"`
	S3OutputPath *string `json:"s3OutputPath,omitempty"`
}

// Describes the Amazon S3 data source.
type AutoMLS3DataSource struct {
	S3URI *string `json:"s3URI,omitempty"`
}

// Security options.
type AutoMLSecurityConfig struct {
	EnableInterContainerTrafficEncryption *bool   `json:"enableInterContainerTrafficEncryption,omitempty"`
	VolumeKMSKeyID                        *string `json:"volumeKMSKeyID,omitempty"`
	// Specifies an Amazon Virtual Private Cloud (VPC) that your SageMaker jobs,
	// hosted models, and compute resources have access to. You can control access
	// to and from your resources by configuring a VPC. For more information, see
	// Give SageMaker Access to Resources in your Amazon VPC (https://docs.aws.amazon.com/sagemaker/latest/dg/infrastructure-give-access.html).
	VPCConfig *VPCConfig `json:"vpcConfig,omitempty"`
}

// The name and an example value of the hyperparameter that you want to use
// in Autotune. If Automatic model tuning (AMT) determines that your hyperparameter
// is eligible for Autotune, an optimal hyperparameter range is selected for
// you.
type AutoParameter struct {
	Name      *string `json:"name,omitempty"`
	ValueHint *string `json:"valueHint,omitempty"`
}

// Automatic rollback configuration for handling endpoint deployment failures
// and recovery.
type AutoRollbackConfig struct {
	Alarms []*Alarm `json:"alarms,omitempty"`
}

// A flag to indicate if you want to use Autotune to automatically find optimal
// values for the following fields:
//
//   - ParameterRanges (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobConfig.html#sagemaker-Type-HyperParameterTuningJobConfig-ParameterRanges):
//     The names and ranges of parameters that a hyperparameter tuning job can
//     optimize.
//
//   - ResourceLimits (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ResourceLimits.html):
//     The maximum resources that can be used for a training job. These resources
//     include the maximum number of training jobs, the maximum runtime of a
//     tuning job, and the maximum number of training jobs to run at the same
//     time.
//
//   - TrainingJobEarlyStoppingType (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobConfig.html#sagemaker-Type-HyperParameterTuningJobConfig-TrainingJobEarlyStoppingType):
//     A flag that specifies whether or not to use early stopping for training
//     jobs launched by a hyperparameter tuning job.
//
//   - RetryStrategy (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTrainingJobDefinition.html#sagemaker-Type-HyperParameterTrainingJobDefinition-RetryStrategy):
//     The number of times to retry a training job.
//
//   - Strategy (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobConfig.html):
//     Specifies how hyperparameter tuning chooses the combinations of hyperparameter
//     values to use for the training jobs that it launches.
//
//   - ConvergenceDetected (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ConvergenceDetected.html):
//     A flag to indicate that Automatic model tuning (AMT) has detected model
//     convergence.
type Autotune struct {
	Mode *string `json:"mode,omitempty"`
}

// The error code and error description associated with the resource.
type BatchDescribeModelPackageError struct {
	ErrorCode     *string `json:"errorCode,omitempty"`
	ErrorResponse *string `json:"errorResponse,omitempty"`
}

// Provides summary information about the model package.
type BatchDescribeModelPackageSummary struct {
	CreationTime *metav1.Time `json:"creationTime,omitempty"`
	// Defines how to perform inference generation after a training job is run.
	InferenceSpecification  *InferenceSpecification `json:"inferenceSpecification,omitempty"`
	ModelApprovalStatus     *string                 `json:"modelApprovalStatus,omitempty"`
	ModelPackageARN         *string                 `json:"modelPackageARN,omitempty"`
	ModelPackageDescription *string                 `json:"modelPackageDescription,omitempty"`
	ModelPackageGroupName   *string                 `json:"modelPackageGroupName,omitempty"`
	ModelPackageStatus      *string                 `json:"modelPackageStatus,omitempty"`
	ModelPackageVersion     *int64                  `json:"modelPackageVersion,omitempty"`
}

// Contains bias metrics for a model.
type Bias struct {
	// Details about the metrics source.
	PostTrainingReport *MetricsSource `json:"postTrainingReport,omitempty"`
	// Details about the metrics source.
	PreTrainingReport *MetricsSource `json:"preTrainingReport,omitempty"`
	// Details about the metrics source.
	Report *MetricsSource `json:"report,omitempty"`
}

// Update policy for a blue/green deployment. If this update policy is specified,
// SageMaker creates a new fleet during the deployment while maintaining the
// old fleet. SageMaker flips traffic to the new fleet according to the specified
// traffic routing configuration. Only one update policy should be used in the
// deployment configuration. If no update policy is specified, SageMaker uses
// a blue/green deployment strategy with all at once traffic shifting by default.
type BlueGreenUpdatePolicy struct {
	MaximumExecutionTimeoutInSeconds *int64 `json:"maximumExecutionTimeoutInSeconds,omitempty"`
	TerminationWaitInSeconds         *int64 `json:"terminationWaitInSeconds,omitempty"`
	// Defines the traffic routing strategy during an endpoint deployment to shift
	// traffic from the old fleet to the new fleet.
	TrafficRoutingConfiguration *TrafficRoutingConfig `json:"trafficRoutingConfiguration,omitempty"`
}

// Details on the cache hit of a pipeline execution step.
type CacheHitResult struct {
	SourcePipelineExecutionARN *string `json:"sourcePipelineExecutionARN,omitempty"`
}

// Metadata about a callback step.
type CallbackStepMetadata struct {
	SQSQueueURL *string `json:"sqsQueueURL,omitempty"`
}

// Specifies the type and size of the endpoint capacity to activate for a blue/green
// deployment, a rolling deployment, or a rollback strategy. You can specify
// your batches as either instance count or the overall percentage or your fleet.
//
// For a rollback strategy, if you don't specify the fields in this object,
// or if you set the Value to 100%, then SageMaker uses a blue/green rollback
// strategy and rolls all traffic back to the blue fleet.
type CapacitySize struct {
	Type  *string `json:"type_,omitempty"`
	Value *int64  `json:"value,omitempty"`
}

// Configuration specifying how to treat different headers. If no headers are
// specified Amazon SageMaker will by default base64 encode when capturing the
// data.
type CaptureContentTypeHeader struct {
	CsvContentTypes  []*string `json:"csvContentTypes,omitempty"`
	JSONContentTypes []*string `json:"jsonContentTypes,omitempty"`
}

// Specifies data Model Monitor will capture.
type CaptureOption struct {
	CaptureMode *string `json:"captureMode,omitempty"`
}

// A list of categorical hyperparameters to tune.
type CategoricalParameterRange struct {
	Name   *string   `json:"name,omitempty"`
	Values []*string `json:"values,omitempty"`
}

// Defines the possible values for a categorical hyperparameter.
type CategoricalParameterRangeSpecification struct {
	Values []*string `json:"values,omitempty"`
}

// A channel is a named input source that training algorithms can consume.
type Channel struct {
	ChannelName     *string `json:"channelName,omitempty"`
	CompressionType *string `json:"compressionType,omitempty"`
	ContentType     *string `json:"contentType,omitempty"`
	// Describes the location of the channel data.
	DataSource *DataSource `json:"dataSource,omitempty"`
	// The training input mode that the algorithm supports. For more information
	// about input modes, see Algorithms (https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html).
	//
	// Pipe mode
	//
	// If an algorithm supports Pipe mode, Amazon SageMaker streams data directly
	// from Amazon S3 to the container.
	//
	// File mode
	//
	// If an algorithm supports File mode, SageMaker downloads the training data
	// from S3 to the provisioned ML storage volume, and mounts the directory to
	// the Docker volume for the training container.
	//
	// You must provision the ML storage volume with sufficient capacity to accommodate
	// the data downloaded from S3. In addition to the training data, the ML storage
	// volume also stores the output model. The algorithm container uses the ML
	// storage volume to also store intermediate information, if any.
	//
	// For distributed algorithms, training data is distributed uniformly. Your
	// training duration is predictable if the input data objects sizes are approximately
	// the same. SageMaker does not split the files any further for model training.
	// If the object sizes are skewed, training won't be optimal as the data distribution
	// is also skewed when one host in a training cluster is overloaded, thus becoming
	// a bottleneck in training.
	//
	// FastFile mode
	//
	// If an algorithm supports FastFile mode, SageMaker streams data directly from
	// S3 to the container with no code changes, and provides file system access
	// to the data. Users can author their training script to interact with these
	// files as if they were stored on disk.
	//
	// FastFile mode works best when the data is read sequentially. Augmented manifest
	// files aren't supported. The startup time is lower when there are fewer files
	// in the S3 bucket provided.
	InputMode         *string `json:"inputMode,omitempty"`
	RecordWrapperType *string `json:"recordWrapperType,omitempty"`
	// A configuration for a shuffle option for input data in a channel. If you
	// use S3Prefix for S3DataType, the results of the S3 key prefix matches are
	// shuffled. If you use ManifestFile, the order of the S3 object references
	// in the ManifestFile is shuffled. If you use AugmentedManifestFile, the order
	// of the JSON lines in the AugmentedManifestFile is shuffled. The shuffling
	// order is determined using the Seed value.
	//
	// For Pipe input mode, when ShuffleConfig is specified shuffling is done at
	// the start of every epoch. With large datasets, this ensures that the order
	// of the training data is different for each epoch, and it helps reduce bias
	// and possible overfitting. In a multi-node training job when ShuffleConfig
	// is combined with S3DataDistributionType of ShardedByS3Key, the data is shuffled
	// across nodes so that the content sent to a particular node on the first epoch
	// might be sent to a different node on the second epoch.
	ShuffleConfig *ShuffleConfig `json:"shuffleConfig,omitempty"`
}

// Defines a named input source, called a channel, to be used by an algorithm.
type ChannelSpecification struct {
	Description           *string   `json:"description,omitempty"`
	IsRequired            *bool     `json:"isRequired,omitempty"`
	Name                  *string   `json:"name,omitempty"`
	SupportedContentTypes []*string `json:"supportedContentTypes,omitempty"`
}

// Contains information about the output location for managed spot training
// checkpoint data.
type CheckpointConfig struct {
	LocalPath *string `json:"localPath,omitempty"`
	S3URI     *string `json:"s3URI,omitempty"`
}

// The container for the metadata for the ClarifyCheck step. For more information,
// see the topic on ClarifyCheck step (https://docs.aws.amazon.com/sagemaker/latest/dg/build-and-manage-steps.html#step-type-clarify-check)
// in the Amazon SageMaker Developer Guide.
type ClarifyCheckStepMetadata struct {
	BaselineUsedForDriftCheckConstraints *string `json:"baselineUsedForDriftCheckConstraints,omitempty"`
	CalculatedBaselineConstraints        *string `json:"calculatedBaselineConstraints,omitempty"`
	CheckJobARN                          *string `json:"checkJobARN,omitempty"`
	CheckType                            *string `json:"checkType,omitempty"`
	ModelPackageGroupName                *string `json:"modelPackageGroupName,omitempty"`
	RegisterNewBaseline                  *bool   `json:"registerNewBaseline,omitempty"`
	SkipCheck                            *bool   `json:"skipCheck,omitempty"`
	ViolationReport                      *string `json:"violationReport,omitempty"`
}

// The configuration for the SHAP baseline (https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-feature-attribute-shap-baselines.html)
// (also called the background or reference dataset) of the Kernal SHAP algorithm.
//
//   - The number of records in the baseline data determines the size of the
//     synthetic dataset, which has an impact on latency of explainability requests.
//     For more information, see the Synthetic data of Configure and create an
//     endpoint (https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-online-explainability-create-endpoint.html).
//
//   - ShapBaseline and ShapBaselineUri are mutually exclusive parameters.
//     One or the either is required to configure a SHAP baseline.
type ClarifyShapBaselineConfig struct {
	ShapBaselineURI *string `json:"shapBaselineURI,omitempty"`
}

// Details of an instance group in a SageMaker HyperPod cluster.
type ClusterInstanceGroupDetails struct {
	ExecutionRole *string `json:"executionRole,omitempty"`
}

// The specifications of an instance group that you need to define.
type ClusterInstanceGroupSpecification struct {
	ExecutionRole *string `json:"executionRole,omitempty"`
}

// Details of an instance in a SageMaker HyperPod cluster.
type ClusterInstanceStatusDetails struct {
	Message *string `json:"message,omitempty"`
}

// The LifeCycle configuration for a SageMaker HyperPod cluster.
type ClusterLifeCycleConfig struct {
	SourceS3URI *string `json:"sourceS3URI,omitempty"`
}

// Details of an instance (also called a node interchangeably) in a SageMaker
// HyperPod cluster.
type ClusterNodeDetails struct {
	InstanceID *string      `json:"instanceID,omitempty"`
	LaunchTime *metav1.Time `json:"launchTime,omitempty"`
}

// Lists a summary of the properties of an instance (also called a node interchangeably)
// of a SageMaker HyperPod cluster.
type ClusterNodeSummary struct {
	InstanceID *string      `json:"instanceID,omitempty"`
	LaunchTime *metav1.Time `json:"launchTime,omitempty"`
}

// Lists a summary of the properties of a SageMaker HyperPod cluster.
type ClusterSummary struct {
	CreationTime *metav1.Time `json:"creationTime,omitempty"`
}

// The Code Editor application settings.
//
// For more information about Code Editor, see Get started with Code Editor
// in Amazon SageMaker (https://docs.aws.amazon.com/sagemaker/latest/dg/code-editor.html).
type CodeEditorAppSettings struct {
	// Specifies the ARN's of a SageMaker image and SageMaker image version, and
	// the instance type that the version runs on.
	DefaultResourceSpec *ResourceSpec `json:"defaultResourceSpec,omitempty"`
	LifecycleConfigARNs []*string     `json:"lifecycleConfigARNs,omitempty"`
}

// Specifies summary information about a Git repository.
type CodeRepositorySummary struct {
	CodeRepositoryName *string      `json:"codeRepositoryName,omitempty"`
	CreationTime       *metav1.Time `json:"creationTime,omitempty"`
	LastModifiedTime   *metav1.Time `json:"lastModifiedTime,omitempty"`
}

// Configuration for your collection.
type CollectionConfig struct {
	// Configuration for your vector collection type.
	VectorConfig *VectorConfig `json:"vectorConfig,omitempty"`
}

// Configuration information for the Amazon SageMaker Debugger output tensor
// collections.
type CollectionConfiguration struct {
	CollectionName       *string            `json:"collectionName,omitempty"`
	CollectionParameters map[string]*string `json:"collectionParameters,omitempty"`
}

// A summary of a model compilation job.
type CompilationJobSummary struct {
	CompilationEndTime   *metav1.Time `json:"compilationEndTime,omitempty"`
	CompilationJobName   *string      `json:"compilationJobName,omitempty"`
	CompilationStartTime *metav1.Time `json:"compilationStartTime,omitempty"`
	CreationTime         *metav1.Time `json:"creationTime,omitempty"`
	LastModifiedTime     *metav1.Time `json:"lastModifiedTime,omitempty"`
}

// Describes the container, as part of model definition.
type ContainerDefinition struct {
	ContainerHostname *string            `json:"containerHostname,omitempty"`
	Environment       map[string]*string `json:"environment,omitempty"`
	Image             *string            `json:"image,omitempty"`
	// Specifies whether the model container is in Amazon ECR or a private Docker
	// registry accessible from your Amazon Virtual Private Cloud (VPC).
	ImageConfig                *ImageConfig `json:"imageConfig,omitempty"`
	InferenceSpecificationName *string      `json:"inferenceSpecificationName,omitempty"`
	Mode                       *string      `json:"mode,omitempty"`
	// Specifies the location of ML model data to deploy. If specified, you must
	// specify one and only one of the available data sources.
	ModelDataSource  *ModelDataSource `json:"modelDataSource,omitempty"`
	ModelDataURL     *string          `json:"modelDataURL,omitempty"`
	ModelPackageName *string          `json:"modelPackageName,omitempty"`
	// Specifies additional configuration for hosting multi-model endpoints.
	MultiModelConfig *MultiModelConfig `json:"multiModelConfig,omitempty"`
}

// A structure describing the source of a context.
type ContextSource struct {
	SourceID   *string `json:"sourceID,omitempty"`
	SourceType *string `json:"sourceType,omitempty"`
}

// Lists a summary of the properties of a context. A context provides a logical
// grouping of other entities.
type ContextSummary struct {
	ContextType      *string      `json:"contextType,omitempty"`
	CreationTime     *metav1.Time `json:"creationTime,omitempty"`
	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`
}

// A list of continuous hyperparameters to tune.
type ContinuousParameterRange struct {
	MaxValue    *string `json:"maxValue,omitempty"`
	MinValue    *string `json:"minValue,omitempty"`
	Name        *string `json:"name,omitempty"`
	ScalingType *string `json:"scalingType,omitempty"`
}

// Defines the possible values for a continuous hyperparameter.
type ContinuousParameterRangeSpecification struct {
	MaxValue *string `json:"maxValue,omitempty"`
	MinValue *string `json:"minValue,omitempty"`
}

// The settings for assigning a custom file system to a user profile or space
// for an Amazon SageMaker Domain. Permitted users can access this file system
// in Amazon SageMaker Studio.
type CustomFileSystemConfig struct {
	// The settings for assigning a custom Amazon EFS file system to a user profile
	// or space for an Amazon SageMaker Domain.
	EFSFileSystemConfig *EFSFileSystemConfig `json:"efsFileSystemConfig,omitempty"`
}

// A custom SageMaker image. For more information, see Bring your own SageMaker
// image (https://docs.aws.amazon.com/sagemaker/latest/dg/studio-byoi.html).
type CustomImage struct {
	AppImageConfigName *string `json:"appImageConfigName,omitempty"`
	ImageName          *string `json:"imageName,omitempty"`
	ImageVersionNumber *int64  `json:"imageVersionNumber,omitempty"`
}

// Details about the POSIX identity that is used for file system operations.
type CustomPosixUserConfig struct {
	GID *int64 `json:"gid,omitempty"`
	UID *int64 `json:"uid,omitempty"`
}

// A customized metric.
type CustomizedMetricSpecification struct {
	MetricName *string `json:"metricName,omitempty"`
	Namespace  *string `json:"namespace,omitempty"`
}

// Configuration to control how SageMaker captures inference data.
type DataCaptureConfig struct {
	// Configuration specifying how to treat different headers. If no headers are
	// specified Amazon SageMaker will by default base64 encode when capturing the
	// data.
	CaptureContentTypeHeader  *CaptureContentTypeHeader `json:"captureContentTypeHeader,omitempty"`
	CaptureOptions            []*CaptureOption          `json:"captureOptions,omitempty"`
	DestinationS3URI          *string                   `json:"destinationS3URI,omitempty"`
	EnableCapture             *bool                     `json:"enableCapture,omitempty"`
	InitialSamplingPercentage *int64                    `json:"initialSamplingPercentage,omitempty"`
	KMSKeyID                  *string                   `json:"kmsKeyID,omitempty"`
}

// The currently active data capture configuration used by your Endpoint.
type DataCaptureConfigSummary struct {
	CaptureStatus             *string `json:"captureStatus,omitempty"`
	CurrentSamplingPercentage *int64  `json:"currentSamplingPercentage,omitempty"`
	DestinationS3URI          *string `json:"destinationS3URI,omitempty"`
	EnableCapture             *bool   `json:"enableCapture,omitempty"`
	KMSKeyID                  *string `json:"kmsKeyID,omitempty"`
}

// The meta data of the Glue table which serves as data catalog for the OfflineStore.
type DataCatalogConfig struct {
	Catalog   *string `json:"catalog,omitempty"`
	Database  *string `json:"database,omitempty"`
	TableName *string `json:"tableName,omitempty"`
}

// The data structure used to specify the data to be used for inference in a
// batch transform job and to associate the data that is relevant to the prediction
// results in the output. The input filter provided allows you to exclude input
// data that is not needed for inference in a batch transform job. The output
// filter provided allows you to include input data relevant to interpreting
// the predictions in the output from the job. For more information, see Associate
// Prediction Results with their Corresponding Input Records (https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html).
type DataProcessing struct {
	InputFilter  *string `json:"inputFilter,omitempty"`
	JoinSource   *string `json:"joinSource,omitempty"`
	OutputFilter *string `json:"outputFilter,omitempty"`
}

// Information about the container that a data quality monitoring job runs.
type DataQualityAppSpecification struct {
	ContainerArguments              []*string          `json:"containerArguments,omitempty"`
	ContainerEntrypoint             []*string          `json:"containerEntrypoint,omitempty"`
	Environment                     map[string]*string `json:"environment,omitempty"`
	ImageURI                        *string            `json:"imageURI,omitempty"`
	PostAnalyticsProcessorSourceURI *string            `json:"postAnalyticsProcessorSourceURI,omitempty"`
	RecordPreprocessorSourceURI     *string            `json:"recordPreprocessorSourceURI,omitempty"`
}

// Configuration for monitoring constraints and monitoring statistics. These
// baseline resources are compared against the results of the current job from
// the series of jobs scheduled to collect data periodically.
type DataQualityBaselineConfig struct {
	BaseliningJobName *string `json:"baseliningJobName,omitempty"`
	// The constraints resource for a monitoring job.
	ConstraintsResource *MonitoringConstraintsResource `json:"constraintsResource,omitempty"`
	// The statistics resource for a monitoring job.
	StatisticsResource *MonitoringStatisticsResource `json:"statisticsResource,omitempty"`
}

// The input for the data quality monitoring job. Currently endpoints are supported
// for input.
type DataQualityJobInput struct {
	// Input object for the endpoint
	EndpointInput *EndpointInput `json:"endpointInput,omitempty"`
}

// Describes the location of the channel data.
type DataSource struct {
	// Specifies a file system data source for a channel.
	FileSystemDataSource *FileSystemDataSource `json:"fileSystemDataSource,omitempty"`
	// Describes the S3 data source.
	//
	// Your input bucket must be in the same Amazon Web Services region as your
	// training job.
	S3DataSource *S3DataSource `json:"s3DataSource,omitempty"`
}

// Configuration for Dataset Definition inputs. The Dataset Definition input
// must specify exactly one of either AthenaDatasetDefinition or RedshiftDatasetDefinition
// types.
type DatasetDefinition struct {
	// Configuration for Athena Dataset Definition input.
	AthenaDatasetDefinition *AthenaDatasetDefinition `json:"athenaDatasetDefinition,omitempty"`
	DataDistributionType    *string                  `json:"dataDistributionType,omitempty"`
	InputMode               *string                  `json:"inputMode,omitempty"`
	LocalPath               *string                  `json:"localPath,omitempty"`
	// Configuration for Redshift Dataset Definition input.
	RedshiftDatasetDefinition *RedshiftDatasetDefinition `json:"redshiftDatasetDefinition,omitempty"`
}

// Configuration information for the Amazon SageMaker Debugger hook parameters,
// metric and tensor collections, and storage paths. To learn more about how
// to configure the DebugHookConfig parameter, see Use the SageMaker and Debugger
// Configuration API Operations to Create, Update, and Debug Your Training Job
// (https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html).
type DebugHookConfig struct {
	CollectionConfigurations []*CollectionConfiguration `json:"collectionConfigurations,omitempty"`
	HookParameters           map[string]*string         `json:"hookParameters,omitempty"`
	LocalPath                *string                    `json:"localPath,omitempty"`
	S3OutputPath             *string                    `json:"s3OutputPath,omitempty"`
}

// Configuration information for SageMaker Debugger rules for debugging. To
// learn more about how to configure the DebugRuleConfiguration parameter, see
// Use the SageMaker and Debugger Configuration API Operations to Create, Update,
// and Debug Your Training Job (https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html).
type DebugRuleConfiguration struct {
	InstanceType          *string            `json:"instanceType,omitempty"`
	LocalPath             *string            `json:"localPath,omitempty"`
	RuleConfigurationName *string            `json:"ruleConfigurationName,omitempty"`
	RuleEvaluatorImage    *string            `json:"ruleEvaluatorImage,omitempty"`
	RuleParameters        map[string]*string `json:"ruleParameters,omitempty"`
	S3OutputPath          *string            `json:"s3OutputPath,omitempty"`
	VolumeSizeInGB        *int64             `json:"volumeSizeInGB,omitempty"`
}

// Information about the status of the rule evaluation.
type DebugRuleEvaluationStatus struct {
	LastModifiedTime      *metav1.Time `json:"lastModifiedTime,omitempty"`
	RuleConfigurationName *string      `json:"ruleConfigurationName,omitempty"`
	RuleEvaluationJobARN  *string      `json:"ruleEvaluationJobARN,omitempty"`
	RuleEvaluationStatus  *string      `json:"ruleEvaluationStatus,omitempty"`
	StatusDetails         *string      `json:"statusDetails,omitempty"`
}

// A collection of default EBS storage settings that applies to private spaces
// created within a domain or user profile.
type DefaultEBSStorageSettings struct {
	DefaultEBSVolumeSizeInGb *int64 `json:"defaultEBSVolumeSizeInGb,omitempty"`
	MaximumEBSVolumeSizeInGb *int64 `json:"maximumEBSVolumeSizeInGb,omitempty"`
}

// The default storage settings for a private space.
type DefaultSpaceStorageSettings struct {
	// A collection of default EBS storage settings that applies to private spaces
	// created within a domain or user profile.
	DefaultEBSStorageSettings *DefaultEBSStorageSettings `json:"defaultEBSStorageSettings,omitempty"`
}

// Gets the Amazon EC2 Container Registry path of the docker image of the model
// that is hosted in this ProductionVariant (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ProductionVariant.html).
//
// If you used the registry/repository[:tag] form to specify the image path
// of the primary container when you created the model hosted in this ProductionVariant,
// the path resolves to a path of the form registry/repository[@digest]. A digest
// is a hash value that identifies a specific version of an image. For information
// about Amazon ECR paths, see Pulling an Image (https://docs.aws.amazon.com/AmazonECR/latest/userguide/docker-pull-ecr-image.html)
// in the Amazon ECR User Guide.
type DeployedImage struct {
	ResolutionTime *metav1.Time `json:"resolutionTime,omitempty"`
	ResolvedImage  *string      `json:"resolvedImage,omitempty"`
	SpecifiedImage *string      `json:"specifiedImage,omitempty"`
}

// The deployment configuration for an endpoint, which contains the desired
// deployment strategy and rollback configurations.
type DeploymentConfig struct {
	// Automatic rollback configuration for handling endpoint deployment failures
	// and recovery.
	AutoRollbackConfiguration *AutoRollbackConfig `json:"autoRollbackConfiguration,omitempty"`
	// Update policy for a blue/green deployment. If this update policy is specified,
	// SageMaker creates a new fleet during the deployment while maintaining the
	// old fleet. SageMaker flips traffic to the new fleet according to the specified
	// traffic routing configuration. Only one update policy should be used in the
	// deployment configuration. If no update policy is specified, SageMaker uses
	// a blue/green deployment strategy with all at once traffic shifting by default.
	BlueGreenUpdatePolicy *BlueGreenUpdatePolicy `json:"blueGreenUpdatePolicy,omitempty"`
	// Specifies a rolling deployment strategy for updating a SageMaker endpoint.
	RollingUpdatePolicy *RollingUpdatePolicy `json:"rollingUpdatePolicy,omitempty"`
}

// A set of recommended deployment configurations for the model. To get more
// advanced recommendations, see CreateInferenceRecommendationsJob (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateInferenceRecommendationsJob.html)
// to create an inference recommendation job.
type DeploymentRecommendation struct {
	RealTimeInferenceRecommendations []*RealTimeInferenceRecommendation `json:"realTimeInferenceRecommendations,omitempty"`
	RecommendationStatus             *string                            `json:"recommendationStatus,omitempty"`
}

// Contains information about a stage in an edge deployment plan.
type DeploymentStage struct {
	StageName *string `json:"stageName,omitempty"`
}

// Contains information summarizing the deployment stage results.
type DeploymentStageStatusSummary struct {
	StageName *string `json:"stageName,omitempty"`
}

// Information that SageMaker Neo automatically derived about the model.
type DerivedInformation struct {
	DerivedDataInputConfig *string `json:"derivedDataInputConfig,omitempty"`
}

// Specifies weight and capacity values for a production variant.
type DesiredWeightAndCapacity struct {
	DesiredInstanceCount *int64   `json:"desiredInstanceCount,omitempty"`
	DesiredWeight        *float64 `json:"desiredWeight,omitempty"`
	VariantName          *string  `json:"variantName,omitempty"`
}

// Contains information summarizing device details and deployment status.
type DeviceDeploymentSummary struct {
	DeployedStageName             *string      `json:"deployedStageName,omitempty"`
	DeploymentStartTime           *metav1.Time `json:"deploymentStartTime,omitempty"`
	DeviceDeploymentStatusMessage *string      `json:"deviceDeploymentStatusMessage,omitempty"`
	DeviceFleetName               *string      `json:"deviceFleetName,omitempty"`
	EdgeDeploymentPlanName        *string      `json:"edgeDeploymentPlanName,omitempty"`
	StageName                     *string      `json:"stageName,omitempty"`
}

// Summary of the device fleet.
type DeviceFleetSummary struct {
	CreationTime     *metav1.Time `json:"creationTime,omitempty"`
	DeviceFleetName  *string      `json:"deviceFleetName,omitempty"`
	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`
}

// Summary of the device.
type DeviceSummary struct {
	DeviceFleetName  *string      `json:"deviceFleetName,omitempty"`
	DeviceName       *string      `json:"deviceName,omitempty"`
	LatestHeartbeat  *metav1.Time `json:"latestHeartbeat,omitempty"`
	RegistrationTime *metav1.Time `json:"registrationTime,omitempty"`
}

// The model deployment settings for the SageMaker Canvas application.
//
// In order to enable model deployment for Canvas, the SageMaker Domain's or
// user profile's Amazon Web Services IAM execution role must have the AmazonSageMakerCanvasDirectDeployAccess
// policy attached. You can also turn on model deployment permissions through
// the SageMaker Domain's or user profile's settings in the SageMaker console.
type DirectDeploySettings struct {
	Status *string `json:"status,omitempty"`
}

// A collection of settings that configure the domain's Docker interaction.
type DockerSettings struct {
	EnableDockerAccess     *string   `json:"enableDockerAccess,omitempty"`
	VPCOnlyTrustedAccounts []*string `json:"vpcOnlyTrustedAccounts,omitempty"`
}

// The domain's details.
type DomainDetails struct {
	CreationTime     *metav1.Time `json:"creationTime,omitempty"`
	DomainARN        *string      `json:"domainARN,omitempty"`
	DomainID         *string      `json:"domainID,omitempty"`
	DomainName       *string      `json:"domainName,omitempty"`
	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`
	Status           *string      `json:"status,omitempty"`
	URL              *string      `json:"url,omitempty"`
}

// A collection of settings that apply to the SageMaker Domain. These settings
// are specified through the CreateDomain API call.
type DomainSettings struct {
	// A collection of settings that configure the domain's Docker interaction.
	DockerSettings *DockerSettings `json:"dockerSettings,omitempty"`
	// A collection of settings that configure the RStudioServerPro Domain-level
	// app.
	RStudioServerProDomainSettings *RStudioServerProDomainSettings `json:"rStudioServerProDomainSettings,omitempty"`
	SecurityGroupIDs               []*string                       `json:"securityGroupIDs,omitempty"`
}

// A collection of Domain configuration settings to update.
type DomainSettingsForUpdate struct {
	// A collection of settings that configure the domain's Docker interaction.
	DockerSettings *DockerSettings `json:"dockerSettings,omitempty"`
	// A collection of settings that update the current configuration for the RStudioServerPro
	// Domain-level app.
	RStudioServerProDomainSettingsForUpdate *RStudioServerProDomainSettingsForUpdate `json:"rStudioServerProDomainSettingsForUpdate,omitempty"`
	SecurityGroupIDs                        []*string                                `json:"securityGroupIDs,omitempty"`
}

// Represents the drift check baselines that can be used when the model monitor
// is set using the model package.
type DriftCheckBaselines struct {
	// Represents the drift check bias baselines that can be used when the model
	// monitor is set using the model package.
	Bias *DriftCheckBias `json:"bias,omitempty"`
	// Represents the drift check explainability baselines that can be used when
	// the model monitor is set using the model package.
	Explainability *DriftCheckExplainability `json:"explainability,omitempty"`
	// Represents the drift check data quality baselines that can be used when the
	// model monitor is set using the model package.
	ModelDataQuality *DriftCheckModelDataQuality `json:"modelDataQuality,omitempty"`
	// Represents the drift check model quality baselines that can be used when
	// the model monitor is set using the model package.
	ModelQuality *DriftCheckModelQuality `json:"modelQuality,omitempty"`
}

// Represents the drift check bias baselines that can be used when the model
// monitor is set using the model package.
type DriftCheckBias struct {
	// Contains details regarding the file source.
	ConfigFile *FileSource `json:"configFile,omitempty"`
	// Details about the metrics source.
	PostTrainingConstraints *MetricsSource `json:"postTrainingConstraints,omitempty"`
	// Details about the metrics source.
	PreTrainingConstraints *MetricsSource `json:"preTrainingConstraints,omitempty"`
}

// Represents the drift check explainability baselines that can be used when
// the model monitor is set using the model package.
type DriftCheckExplainability struct {
	// Contains details regarding the file source.
	ConfigFile *FileSource `json:"configFile,omitempty"`
	// Details about the metrics source.
	Constraints *MetricsSource `json:"constraints,omitempty"`
}

// Represents the drift check data quality baselines that can be used when the
// model monitor is set using the model package.
type DriftCheckModelDataQuality struct {
	// Details about the metrics source.
	Constraints *MetricsSource `json:"constraints,omitempty"`
	// Details about the metrics source.
	Statistics *MetricsSource `json:"statistics,omitempty"`
}

// Represents the drift check model quality baselines that can be used when
// the model monitor is set using the model package.
type DriftCheckModelQuality struct {
	// Details about the metrics source.
	Constraints *MetricsSource `json:"constraints,omitempty"`
	// Details about the metrics source.
	Statistics *MetricsSource `json:"statistics,omitempty"`
}

// An object with the recommended values for you to specify when creating an
// autoscaling policy.
type DynamicScalingConfiguration struct {
	MaxCapacity      *int64 `json:"maxCapacity,omitempty"`
	MinCapacity      *int64 `json:"minCapacity,omitempty"`
	ScaleInCooldown  *int64 `json:"scaleInCooldown,omitempty"`
	ScaleOutCooldown *int64 `json:"scaleOutCooldown,omitempty"`
}

// A collection of EBS storage settings that applies to private spaces.
type EBSStorageSettings struct {
	EBSVolumeSizeInGb *int64 `json:"ebsVolumeSizeInGb,omitempty"`
}

// A file system, created by you in Amazon EFS, that you assign to a user profile
// or space for an Amazon SageMaker Domain. Permitted users can access this
// file system in Amazon SageMaker Studio.
type EFSFileSystem struct {
	FileSystemID *string `json:"fileSystemID,omitempty"`
}

// The settings for assigning a custom Amazon EFS file system to a user profile
// or space for an Amazon SageMaker Domain.
type EFSFileSystemConfig struct {
	FileSystemID   *string `json:"fileSystemID,omitempty"`
	FileSystemPath *string `json:"fileSystemPath,omitempty"`
}

// The configurations and outcomes of an Amazon EMR step execution.
type EMRStepMetadata struct {
	ClusterID   *string `json:"clusterID,omitempty"`
	LogFilePath *string `json:"logFilePath,omitempty"`
	StepID      *string `json:"stepID,omitempty"`
	StepName    *string `json:"stepName,omitempty"`
}

// Contains information about the configuration of a model in a deployment.
type EdgeDeploymentModelConfig struct {
	EdgePackagingJobName *string `json:"edgePackagingJobName,omitempty"`
	ModelHandle          *string `json:"modelHandle,omitempty"`
}

// Contains information summarizing an edge deployment plan.
type EdgeDeploymentPlanSummary struct {
	CreationTime           *metav1.Time `json:"creationTime,omitempty"`
	DeviceFleetName        *string      `json:"deviceFleetName,omitempty"`
	EdgeDeploymentFailed   *int64       `json:"edgeDeploymentFailed,omitempty"`
	EdgeDeploymentPending  *int64       `json:"edgeDeploymentPending,omitempty"`
	EdgeDeploymentPlanName *string      `json:"edgeDeploymentPlanName,omitempty"`
	EdgeDeploymentSuccess  *int64       `json:"edgeDeploymentSuccess,omitempty"`
	LastModifiedTime       *metav1.Time `json:"lastModifiedTime,omitempty"`
}

// Contains information summarizing the deployment stage results.
type EdgeDeploymentStatus struct {
	EdgeDeploymentFailedInStage  *int64       `json:"edgeDeploymentFailedInStage,omitempty"`
	EdgeDeploymentPendingInStage *int64       `json:"edgeDeploymentPendingInStage,omitempty"`
	EdgeDeploymentStageStartTime *metav1.Time `json:"edgeDeploymentStageStartTime,omitempty"`
	EdgeDeploymentStatusMessage  *string      `json:"edgeDeploymentStatusMessage,omitempty"`
	EdgeDeploymentSuccessInStage *int64       `json:"edgeDeploymentSuccessInStage,omitempty"`
}

// The model on the edge device.
type EdgeModel struct {
	LatestInference  *metav1.Time `json:"latestInference,omitempty"`
	LatestSampleTime *metav1.Time `json:"latestSampleTime,omitempty"`
	ModelName        *string      `json:"modelName,omitempty"`
}

// Status of edge devices with this model.
type EdgeModelStat struct {
	ModelName *string `json:"modelName,omitempty"`
}

// Summary of model on edge device.
type EdgeModelSummary struct {
	ModelName *string `json:"modelName,omitempty"`
}

// The output configuration.
type EdgeOutputConfig struct {
	KMSKeyID               *string `json:"kmsKeyID,omitempty"`
	PresetDeploymentConfig *string `json:"presetDeploymentConfig,omitempty"`
	S3OutputLocation       *string `json:"s3OutputLocation,omitempty"`
}

// Summary of edge packaging job.
type EdgePackagingJobSummary struct {
	CompilationJobName   *string      `json:"compilationJobName,omitempty"`
	CreationTime         *metav1.Time `json:"creationTime,omitempty"`
	EdgePackagingJobName *string      `json:"edgePackagingJobName,omitempty"`
	LastModifiedTime     *metav1.Time `json:"lastModifiedTime,omitempty"`
	ModelName            *string      `json:"modelName,omitempty"`
}

// The output of a SageMaker Edge Manager deployable resource.
type EdgePresetDeploymentOutput struct {
	StatusMessage *string `json:"statusMessage,omitempty"`
}

// Provides summary information for an endpoint configuration.
type EndpointConfigSummary struct {
	CreationTime       *metav1.Time `json:"creationTime,omitempty"`
	EndpointConfigARN  *string      `json:"endpointConfigARN,omitempty"`
	EndpointConfigName *string      `json:"endpointConfigName,omitempty"`
}

// Details about a customer endpoint that was compared in an Inference Recommender
// job.
type EndpointInfo struct {
	EndpointName *string `json:"endpointName,omitempty"`
}

// Input object for the endpoint
type EndpointInput struct {
	EndTimeOffset                 *string  `json:"endTimeOffset,omitempty"`
	EndpointName                  *string  `json:"endpointName,omitempty"`
	ExcludeFeaturesAttribute      *string  `json:"excludeFeaturesAttribute,omitempty"`
	FeaturesAttribute             *string  `json:"featuresAttribute,omitempty"`
	InferenceAttribute            *string  `json:"inferenceAttribute,omitempty"`
	LocalPath                     *string  `json:"localPath,omitempty"`
	ProbabilityAttribute          *string  `json:"probabilityAttribute,omitempty"`
	ProbabilityThresholdAttribute *float64 `json:"probabilityThresholdAttribute,omitempty"`
	S3DataDistributionType        *string  `json:"s3DataDistributionType,omitempty"`
	S3InputMode                   *string  `json:"s3InputMode,omitempty"`
	StartTimeOffset               *string  `json:"startTimeOffset,omitempty"`
}

// The endpoint configuration for the load test.
type EndpointInputConfiguration struct {
	InferenceSpecificationName *string `json:"inferenceSpecificationName,omitempty"`
	InstanceType               *string `json:"instanceType,omitempty"`
	// Specifies the serverless configuration for an endpoint variant.
	ServerlessConfig *ProductionVariantServerlessConfig `json:"serverlessConfig,omitempty"`
}

// The metadata of the endpoint.
type EndpointMetadata struct {
	EndpointConfigName *string `json:"endpointConfigName,omitempty"`
	EndpointName       *string `json:"endpointName,omitempty"`
	EndpointStatus     *string `json:"endpointStatus,omitempty"`
	FailureReason      *string `json:"failureReason,omitempty"`
}

// The endpoint configuration made by Inference Recommender during a recommendation
// job.
type EndpointOutputConfiguration struct {
	EndpointName *string `json:"endpointName,omitempty"`
	InstanceType *string `json:"instanceType,omitempty"`
	// Specifies the serverless configuration for an endpoint variant.
	ServerlessConfig *ProductionVariantServerlessConfig `json:"serverlessConfig,omitempty"`
	VariantName      *string                            `json:"variantName,omitempty"`
}

// Provides summary information for an endpoint.
type EndpointSummary struct {
	CreationTime     *metav1.Time `json:"creationTime,omitempty"`
	EndpointARN      *string      `json:"endpointARN,omitempty"`
	EndpointName     *string      `json:"endpointName,omitempty"`
	EndpointStatus   *string      `json:"endpointStatus,omitempty"`
	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`
}

// A hosted endpoint for real-time inference.
type Endpoint_SDK struct {
	CreationTime *metav1.Time `json:"creationTime,omitempty"`
	// The currently active data capture configuration used by your Endpoint.
	DataCaptureConfig        *DataCaptureConfigSummary   `json:"dataCaptureConfig,omitempty"`
	EndpointARN              *string                     `json:"endpointARN,omitempty"`
	EndpointConfigName       *string                     `json:"endpointConfigName,omitempty"`
	EndpointName             *string                     `json:"endpointName,omitempty"`
	EndpointStatus           *string                     `json:"endpointStatus,omitempty"`
	FailureReason            *string                     `json:"failureReason,omitempty"`
	LastModifiedTime         *metav1.Time                `json:"lastModifiedTime,omitempty"`
	ProductionVariants       []*ProductionVariantSummary `json:"productionVariants,omitempty"`
	ShadowProductionVariants []*ProductionVariantSummary `json:"shadowProductionVariants,omitempty"`
	Tags                     []*Tag                      `json:"tags,omitempty"`
}

// A list of environment parameters suggested by the Amazon SageMaker Inference
// Recommender.
type EnvironmentParameter struct {
	Key       *string `json:"key,omitempty"`
	Value     *string `json:"value,omitempty"`
	ValueType *string `json:"valueType,omitempty"`
}

// The properties of an experiment as returned by the Search (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html)
// API.
type Experiment struct {
	// Information about the user who created or modified an experiment, trial,
	// trial component, lineage group, project, or model card.
	CreatedBy      *UserContext `json:"createdBy,omitempty"`
	CreationTime   *metav1.Time `json:"creationTime,omitempty"`
	DisplayName    *string      `json:"displayName,omitempty"`
	ExperimentName *string      `json:"experimentName,omitempty"`
	// Information about the user who created or modified an experiment, trial,
	// trial component, lineage group, project, or model card.
	LastModifiedBy   *UserContext `json:"lastModifiedBy,omitempty"`
	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`
	Tags             []*Tag       `json:"tags,omitempty"`
}

// Associates a SageMaker job as a trial component with an experiment and trial.
// Specified when you call the following APIs:
//
//   - CreateProcessingJob (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html)
//
//   - CreateTrainingJob (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html)
//
//   - CreateTransformJob (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTransformJob.html)
type ExperimentConfig struct {
	ExperimentName            *string `json:"experimentName,omitempty"`
	TrialComponentDisplayName *string `json:"trialComponentDisplayName,omitempty"`
	TrialName                 *string `json:"trialName,omitempty"`
}

// A summary of the properties of an experiment. To get the complete set of
// properties, call the DescribeExperiment (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeExperiment.html)
// API and provide the ExperimentName.
type ExperimentSummary struct {
	CreationTime     *metav1.Time `json:"creationTime,omitempty"`
	DisplayName      *string      `json:"displayName,omitempty"`
	ExperimentName   *string      `json:"experimentName,omitempty"`
	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`
}

// Contains explainability metrics for a model.
type Explainability struct {
	// Details about the metrics source.
	Report *MetricsSource `json:"report,omitempty"`
}

// The container for the metadata for Fail step.
type FailStepMetadata struct {
	ErrorMessage *string `json:"errorMessage,omitempty"`
}

// A list of features. You must include FeatureName and FeatureType. Valid feature
// FeatureTypes are Integral, Fractional and String.
type FeatureDefinition struct {
	// Configuration for your collection.
	CollectionConfig *CollectionConfig `json:"collectionConfig,omitempty"`
	CollectionType   *string           `json:"collectionType,omitempty"`
	FeatureName      *string           `json:"featureName,omitempty"`
	FeatureType      *string           `json:"featureType,omitempty"`
}

// The name, ARN, CreationTime, FeatureGroup values, LastUpdatedTime and EnableOnlineStorage
// status of a FeatureGroup.
type FeatureGroupSummary struct {
	CreationTime       *metav1.Time `json:"creationTime,omitempty"`
	FeatureGroupARN    *string      `json:"featureGroupARN,omitempty"`
	FeatureGroupName   *string      `json:"featureGroupName,omitempty"`
	FeatureGroupStatus *string      `json:"featureGroupStatus,omitempty"`
	// The status of OfflineStore.
	OfflineStoreStatus *OfflineStoreStatus `json:"offlineStoreStatus,omitempty"`
}

// Amazon SageMaker Feature Store stores features in a collection called Feature
// Group. A Feature Group can be visualized as a table which has rows, with
// a unique identifier for each row where each column in the table is a feature.
// In principle, a Feature Group is composed of features and values per features.
type FeatureGroup_SDK struct {
	CreationTime         *metav1.Time         `json:"creationTime,omitempty"`
	Description          *string              `json:"description,omitempty"`
	EventTimeFeatureName *string              `json:"eventTimeFeatureName,omitempty"`
	FailureReason        *string              `json:"failureReason,omitempty"`
	FeatureDefinitions   []*FeatureDefinition `json:"featureDefinitions,omitempty"`
	FeatureGroupARN      *string              `json:"featureGroupARN,omitempty"`
	FeatureGroupName     *string              `json:"featureGroupName,omitempty"`
	FeatureGroupStatus   *string              `json:"featureGroupStatus,omitempty"`
	LastModifiedTime     *metav1.Time         `json:"lastModifiedTime,omitempty"`
	// A value that indicates whether the update was successful.
	LastUpdateStatus *LastUpdateStatus `json:"lastUpdateStatus,omitempty"`
	// The configuration of an OfflineStore.
	//
	// Provide an OfflineStoreConfig in a request to CreateFeatureGroup to create
	// an OfflineStore.
	//
	// To encrypt an OfflineStore using at rest data encryption, specify Amazon
	// Web Services Key Management Service (KMS) key ID, or KMSKeyId, in S3StorageConfig.
	OfflineStoreConfig *OfflineStoreConfig `json:"offlineStoreConfig,omitempty"`
	// The status of OfflineStore.
	OfflineStoreStatus *OfflineStoreStatus `json:"offlineStoreStatus,omitempty"`
	// Use this to specify the Amazon Web Services Key Management Service (KMS)
	// Key ID, or KMSKeyId, for at rest data encryption. You can turn OnlineStore
	// on or off by specifying the EnableOnlineStore flag at General Assembly.
	//
	// The default value is False.
	OnlineStoreConfig           *OnlineStoreConfig `json:"onlineStoreConfig,omitempty"`
	RecordIdentifierFeatureName *string            `json:"recordIdentifierFeatureName,omitempty"`
	RoleARN                     *string            `json:"roleARN,omitempty"`
	Tags                        []*Tag             `json:"tags,omitempty"`
}

// The metadata for a feature. It can either be metadata that you specify, or
// metadata that is updated automatically.
type FeatureMetadata struct {
	CreationTime     *metav1.Time `json:"creationTime,omitempty"`
	FeatureGroupARN  *string      `json:"featureGroupARN,omitempty"`
	FeatureGroupName *string      `json:"featureGroupName,omitempty"`
	FeatureName      *string      `json:"featureName,omitempty"`
	FeatureType      *string      `json:"featureType,omitempty"`
	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`
}

// Contains details regarding the file source.
type FileSource struct {
	ContentDigest *string `json:"contentDigest,omitempty"`
	ContentType   *string `json:"contentType,omitempty"`
	S3URI         *string `json:"s3URI,omitempty"`
}

// Specifies a file system data source for a channel.
type FileSystemDataSource struct {
	DirectoryPath        *string `json:"directoryPath,omitempty"`
	FileSystemAccessMode *string `json:"fileSystemAccessMode,omitempty"`
	FileSystemID         *string `json:"fileSystemID,omitempty"`
	FileSystemType       *string `json:"fileSystemType,omitempty"`
}

// The best candidate result from an AutoML training job.
type FinalAutoMLJobObjectiveMetric struct {
	Value *float64 `json:"value,omitempty"`
}

// Shows the latest objective metric emitted by a training job that was launched
// by a hyperparameter tuning job. You define the objective metric in the HyperParameterTuningJobObjective
// parameter of HyperParameterTuningJobConfig (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobConfig.html).
type FinalHyperParameterTuningJobObjectiveMetric struct {
	MetricName *string  `json:"metricName,omitempty"`
	Type       *string  `json:"type_,omitempty"`
	Value      *float64 `json:"value,omitempty"`
}

// Contains information about where human output will be stored.
type FlowDefinitionOutputConfig struct {
	KMSKeyID     *string `json:"kmsKeyID,omitempty"`
	S3OutputPath *string `json:"s3OutputPath,omitempty"`
}

// Contains summary information about the flow definition.
type FlowDefinitionSummary struct {
	CreationTime  *metav1.Time `json:"creationTime,omitempty"`
	FailureReason *string      `json:"failureReason,omitempty"`
}

// The generative AI settings for the SageMaker Canvas application.
//
// Configure these settings for Canvas users starting chats with generative
// AI foundation models. For more information, see Use generative AI with foundation
// models (https://docs.aws.amazon.com/sagemaker/latest/dg/canvas-fm-chat.html).
type GenerativeAiSettings struct {
	AmazonBedrockRoleARN *string `json:"amazonBedrockRoleARN,omitempty"`
}

// Information about hub content.
type HubContentInfo struct {
	CreationTime *metav1.Time `json:"creationTime,omitempty"`
}

// Information about a hub.
type HubInfo struct {
	CreationTime     *metav1.Time `json:"creationTime,omitempty"`
	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`
}

// Container for human task user interface information.
type HumanTaskUiSummary struct {
	CreationTime *metav1.Time `json:"creationTime,omitempty"`
}

// Specifies which training algorithm to use for training jobs that a hyperparameter
// tuning job launches and the metrics to monitor.
type HyperParameterAlgorithmSpecification struct {
	AlgorithmName     *string             `json:"algorithmName,omitempty"`
	MetricDefinitions []*MetricDefinition `json:"metricDefinitions,omitempty"`
	TrainingImage     *string             `json:"trainingImage,omitempty"`
	// The training input mode that the algorithm supports. For more information
	// about input modes, see Algorithms (https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html).
	//
	// Pipe mode
	//
	// If an algorithm supports Pipe mode, Amazon SageMaker streams data directly
	// from Amazon S3 to the container.
	//
	// File mode
	//
	// If an algorithm supports File mode, SageMaker downloads the training data
	// from S3 to the provisioned ML storage volume, and mounts the directory to
	// the Docker volume for the training container.
	//
	// You must provision the ML storage volume with sufficient capacity to accommodate
	// the data downloaded from S3. In addition to the training data, the ML storage
	// volume also stores the output model. The algorithm container uses the ML
	// storage volume to also store intermediate information, if any.
	//
	// For distributed algorithms, training data is distributed uniformly. Your
	// training duration is predictable if the input data objects sizes are approximately
	// the same. SageMaker does not split the files any further for model training.
	// If the object sizes are skewed, training won't be optimal as the data distribution
	// is also skewed when one host in a training cluster is overloaded, thus becoming
	// a bottleneck in training.
	//
	// FastFile mode
	//
	// If an algorithm supports FastFile mode, SageMaker streams data directly from
	// S3 to the container with no code changes, and provides file system access
	// to the data. Users can author their training script to interact with these
	// files as if they were stored on disk.
	//
	// FastFile mode works best when the data is read sequentially. Augmented manifest
	// files aren't supported. The startup time is lower when there are fewer files
	// in the S3 bucket provided.
	TrainingInputMode *string `json:"trainingInputMode,omitempty"`
}

// Defines a hyperparameter to be used by an algorithm.
type HyperParameterSpecification struct {
	DefaultValue *string `json:"defaultValue,omitempty"`
	Description  *string `json:"description,omitempty"`
	IsRequired   *bool   `json:"isRequired,omitempty"`
	IsTunable    *bool   `json:"isTunable,omitempty"`
}

// Defines the training jobs launched by a hyperparameter tuning job.
type HyperParameterTrainingJobDefinition struct {
	// Specifies which training algorithm to use for training jobs that a hyperparameter
	// tuning job launches and the metrics to monitor.
	AlgorithmSpecification *HyperParameterAlgorithmSpecification `json:"algorithmSpecification,omitempty"`
	// Contains information about the output location for managed spot training
	// checkpoint data.
	CheckpointConfig                      *CheckpointConfig `json:"checkpointConfig,omitempty"`
	DefinitionName                        *string           `json:"definitionName,omitempty"`
	EnableInterContainerTrafficEncryption *bool             `json:"enableInterContainerTrafficEncryption,omitempty"`
	EnableManagedSpotTraining             *bool             `json:"enableManagedSpotTraining,omitempty"`
	EnableNetworkIsolation                *bool             `json:"enableNetworkIsolation,omitempty"`
	// Specifies ranges of integer, continuous, and categorical hyperparameters
	// that a hyperparameter tuning job searches. The hyperparameter tuning job
	// launches training jobs with hyperparameter values within these ranges to
	// find the combination of values that result in the training job with the best
	// performance as measured by the objective metric of the hyperparameter tuning
	// job.
	//
	// The maximum number of items specified for Array Members refers to the maximum
	// number of hyperparameters for each range and also the maximum for the hyperparameter
	// tuning job itself. That is, the sum of the number of hyperparameters for
	// all the ranges can't exceed the maximum number specified.
	HyperParameterRanges *ParameterRanges `json:"hyperParameterRanges,omitempty"`
	InputDataConfig      []*Channel       `json:"inputDataConfig,omitempty"`
	// Provides information about how to store model training results (model artifacts).
	OutputDataConfig *OutputDataConfig `json:"outputDataConfig,omitempty"`
	// Describes the resources, including machine learning (ML) compute instances
	// and ML storage volumes, to use for model training.
	ResourceConfig *ResourceConfig `json:"resourceConfig,omitempty"`
	// The retry strategy to use when a training job fails due to an InternalServerError.
	// RetryStrategy is specified as part of the CreateTrainingJob and CreateHyperParameterTuningJob
	// requests. You can add the StoppingCondition parameter to the request to limit
	// the training time for the complete job.
	RetryStrategy         *RetryStrategy     `json:"retryStrategy,omitempty"`
	RoleARN               *string            `json:"roleARN,omitempty"`
	StaticHyperParameters map[string]*string `json:"staticHyperParameters,omitempty"`
	// Specifies a limit to how long a model training job or model compilation job
	// can run. It also specifies how long a managed spot training job has to complete.
	// When the job reaches the time limit, SageMaker ends the training or compilation
	// job. Use this API to cap model training costs.
	//
	// To stop a training job, SageMaker sends the algorithm the SIGTERM signal,
	// which delays job termination for 120 seconds. Algorithms can use this 120-second
	// window to save the model artifacts, so the results of training are not lost.
	//
	// The training algorithms provided by SageMaker automatically save the intermediate
	// results of a model training job when possible. This attempt to save artifacts
	// is only a best effort case as model might not be in a state from which it
	// can be saved. For example, if training has just started, the model might
	// not be ready to save. When saved, this intermediate data is a valid model
	// artifact. You can use it to create a model with CreateModel.
	//
	// The Neural Topic Model (NTM) currently does not support saving intermediate
	// model artifacts. When training NTMs, make sure that the maximum runtime is
	// sufficient for the training job to complete.
	StoppingCondition *StoppingCondition `json:"stoppingCondition,omitempty"`
	// Defines the objective metric for a hyperparameter tuning job. Hyperparameter
	// tuning uses the value of this metric to evaluate the training jobs it launches,
	// and returns the training job that results in either the highest or lowest
	// value for this metric, depending on the value you specify for the Type parameter.
	// If you want to define a custom objective metric, see Define metrics and environment
	// variables (https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-metrics-variables.html).
	TuningObjective *HyperParameterTuningJobObjective `json:"tuningObjective,omitempty"`
	// Specifies an Amazon Virtual Private Cloud (VPC) that your SageMaker jobs,
	// hosted models, and compute resources have access to. You can control access
	// to and from your resources by configuring a VPC. For more information, see
	// Give SageMaker Access to Resources in your Amazon VPC (https://docs.aws.amazon.com/sagemaker/latest/dg/infrastructure-give-access.html).
	VPCConfig *VPCConfig `json:"vpcConfig,omitempty"`
}

// The container for the summary information about a training job.
type HyperParameterTrainingJobSummary struct {
	CreationTime  *metav1.Time `json:"creationTime,omitempty"`
	FailureReason *string      `json:"failureReason,omitempty"`
	// Shows the latest objective metric emitted by a training job that was launched
	// by a hyperparameter tuning job. You define the objective metric in the HyperParameterTuningJobObjective
	// parameter of HyperParameterTuningJobConfig (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobConfig.html).
	FinalHyperParameterTuningJobObjectiveMetric *FinalHyperParameterTuningJobObjectiveMetric `json:"finalHyperParameterTuningJobObjectiveMetric,omitempty"`
	ObjectiveStatus                             *string                                      `json:"objectiveStatus,omitempty"`
	TrainingEndTime                             *metav1.Time                                 `json:"trainingEndTime,omitempty"`
	TrainingJobARN                              *string                                      `json:"trainingJobARN,omitempty"`
	TrainingJobDefinitionName                   *string                                      `json:"trainingJobDefinitionName,omitempty"`
	TrainingJobName                             *string                                      `json:"trainingJobName,omitempty"`
	TrainingJobStatus                           *string                                      `json:"trainingJobStatus,omitempty"`
	TrainingStartTime                           *metav1.Time                                 `json:"trainingStartTime,omitempty"`
	TunedHyperParameters                        map[string]*string                           `json:"tunedHyperParameters,omitempty"`
	TuningJobName                               *string                                      `json:"tuningJobName,omitempty"`
}

// The configuration for hyperparameter tuning resources for use in training
// jobs launched by the tuning job. These resources include compute instances
// and storage volumes. Specify one or more compute instance configurations
// and allocation strategies to select resources (optional).
type HyperParameterTuningInstanceConfig struct {
	InstanceCount  *int64  `json:"instanceCount,omitempty"`
	InstanceType   *string `json:"instanceType,omitempty"`
	VolumeSizeInGB *int64  `json:"volumeSizeInGB,omitempty"`
}

// A structure that contains runtime information about both current and completed
// hyperparameter tuning jobs.
type HyperParameterTuningJobCompletionDetails struct {
	ConvergenceDetectedTime                   *metav1.Time `json:"convergenceDetectedTime,omitempty"`
	NumberOfTrainingJobsObjectiveNotImproving *int64       `json:"numberOfTrainingJobsObjectiveNotImproving,omitempty"`
}

// Configures a hyperparameter tuning job.
type HyperParameterTuningJobConfig struct {
	// Defines the objective metric for a hyperparameter tuning job. Hyperparameter
	// tuning uses the value of this metric to evaluate the training jobs it launches,
	// and returns the training job that results in either the highest or lowest
	// value for this metric, depending on the value you specify for the Type parameter.
	// If you want to define a custom objective metric, see Define metrics and environment
	// variables (https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-metrics-variables.html).
	HyperParameterTuningJobObjective *HyperParameterTuningJobObjective `json:"hyperParameterTuningJobObjective,omitempty"`
	// Specifies ranges of integer, continuous, and categorical hyperparameters
	// that a hyperparameter tuning job searches. The hyperparameter tuning job
	// launches training jobs with hyperparameter values within these ranges to
	// find the combination of values that result in the training job with the best
	// performance as measured by the objective metric of the hyperparameter tuning
	// job.
	//
	// The maximum number of items specified for Array Members refers to the maximum
	// number of hyperparameters for each range and also the maximum for the hyperparameter
	// tuning job itself. That is, the sum of the number of hyperparameters for
	// all the ranges can't exceed the maximum number specified.
	ParameterRanges *ParameterRanges `json:"parameterRanges,omitempty"`
	// Specifies the maximum number of training jobs and parallel training jobs
	// that a hyperparameter tuning job can launch.
	ResourceLimits *ResourceLimits `json:"resourceLimits,omitempty"`
	// The strategy hyperparameter tuning uses to find the best combination of hyperparameters
	// for your model.
	Strategy                     *string `json:"strategy,omitempty"`
	TrainingJobEarlyStoppingType *string `json:"trainingJobEarlyStoppingType,omitempty"`
	// The job completion criteria.
	TuningJobCompletionCriteria *TuningJobCompletionCriteria `json:"tuningJobCompletionCriteria,omitempty"`
}

// The total resources consumed by your hyperparameter tuning job.
type HyperParameterTuningJobConsumedResources struct {
	RuntimeInSeconds *int64 `json:"runtimeInSeconds,omitempty"`
}

// Defines the objective metric for a hyperparameter tuning job. Hyperparameter
// tuning uses the value of this metric to evaluate the training jobs it launches,
// and returns the training job that results in either the highest or lowest
// value for this metric, depending on the value you specify for the Type parameter.
// If you want to define a custom objective metric, see Define metrics and environment
// variables (https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-metrics-variables.html).
type HyperParameterTuningJobObjective struct {
	MetricName *string `json:"metricName,omitempty"`
	Type       *string `json:"type_,omitempty"`
}

// An entity returned by the SearchRecord (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_SearchRecord.html)
// API containing the properties of a hyperparameter tuning job.
type HyperParameterTuningJobSearchEntity struct {
	// The container for the summary information about a training job.
	BestTrainingJob *HyperParameterTrainingJobSummary `json:"bestTrainingJob,omitempty"`
	// The total resources consumed by your hyperparameter tuning job.
	ConsumedResources           *HyperParameterTuningJobConsumedResources `json:"consumedResources,omitempty"`
	CreationTime                *metav1.Time                              `json:"creationTime,omitempty"`
	FailureReason               *string                                   `json:"failureReason,omitempty"`
	HyperParameterTuningEndTime *metav1.Time                              `json:"hyperParameterTuningEndTime,omitempty"`
	HyperParameterTuningJobARN  *string                                   `json:"hyperParameterTuningJobARN,omitempty"`
	// Configures a hyperparameter tuning job.
	HyperParameterTuningJobConfig *HyperParameterTuningJobConfig `json:"hyperParameterTuningJobConfig,omitempty"`
	HyperParameterTuningJobName   *string                        `json:"hyperParameterTuningJobName,omitempty"`
	HyperParameterTuningJobStatus *string                        `json:"hyperParameterTuningJobStatus,omitempty"`
	LastModifiedTime              *metav1.Time                   `json:"lastModifiedTime,omitempty"`
	// Specifies the number of training jobs that this hyperparameter tuning job
	// launched, categorized by the status of their objective metric. The objective
	// metric status shows whether the final objective metric for the training job
	// has been evaluated by the tuning job and used in the hyperparameter tuning
	// process.
	ObjectiveStatusCounters *ObjectiveStatusCounters `json:"objectiveStatusCounters,omitempty"`
	// The container for the summary information about a training job.
	OverallBestTrainingJob *HyperParameterTrainingJobSummary `json:"overallBestTrainingJob,omitempty"`
	Tags                   []*Tag                            `json:"tags,omitempty"`
	// Defines the training jobs launched by a hyperparameter tuning job.
	TrainingJobDefinition  *HyperParameterTrainingJobDefinition   `json:"trainingJobDefinition,omitempty"`
	TrainingJobDefinitions []*HyperParameterTrainingJobDefinition `json:"trainingJobDefinitions,omitempty"`
	// The numbers of training jobs launched by a hyperparameter tuning job, categorized
	// by status.
	TrainingJobStatusCounters *TrainingJobStatusCounters `json:"trainingJobStatusCounters,omitempty"`
	// A structure that contains runtime information about both current and completed
	// hyperparameter tuning jobs.
	TuningJobCompletionDetails *HyperParameterTuningJobCompletionDetails `json:"tuningJobCompletionDetails,omitempty"`
	// Specifies the configuration for a hyperparameter tuning job that uses one
	// or more previous hyperparameter tuning jobs as a starting point. The results
	// of previous tuning jobs are used to inform which combinations of hyperparameters
	// to search over in the new tuning job.
	//
	// All training jobs launched by the new hyperparameter tuning job are evaluated
	// by using the objective metric, and the training job that performs the best
	// is compared to the best training jobs from the parent tuning jobs. From these,
	// the training job that performs the best as measured by the objective metric
	// is returned as the overall best training job.
	//
	// All training jobs launched by parent hyperparameter tuning jobs and the new
	// hyperparameter tuning jobs count against the limit of training jobs for the
	// tuning job.
	WarmStartConfig *HyperParameterTuningJobWarmStartConfig `json:"warmStartConfig,omitempty"`
}

// Provides summary information about a hyperparameter tuning job.
type HyperParameterTuningJobSummary struct {
	CreationTime                  *metav1.Time `json:"creationTime,omitempty"`
	HyperParameterTuningEndTime   *metav1.Time `json:"hyperParameterTuningEndTime,omitempty"`
	HyperParameterTuningJobARN    *string      `json:"hyperParameterTuningJobARN,omitempty"`
	HyperParameterTuningJobName   *string      `json:"hyperParameterTuningJobName,omitempty"`
	HyperParameterTuningJobStatus *string      `json:"hyperParameterTuningJobStatus,omitempty"`
	LastModifiedTime              *metav1.Time `json:"lastModifiedTime,omitempty"`
	// Specifies the number of training jobs that this hyperparameter tuning job
	// launched, categorized by the status of their objective metric. The objective
	// metric status shows whether the final objective metric for the training job
	// has been evaluated by the tuning job and used in the hyperparameter tuning
	// process.
	ObjectiveStatusCounters *ObjectiveStatusCounters `json:"objectiveStatusCounters,omitempty"`
	// Specifies the maximum number of training jobs and parallel training jobs
	// that a hyperparameter tuning job can launch.
	ResourceLimits *ResourceLimits `json:"resourceLimits,omitempty"`
	// The strategy hyperparameter tuning uses to find the best combination of hyperparameters
	// for your model.
	Strategy *string `json:"strategy,omitempty"`
	// The numbers of training jobs launched by a hyperparameter tuning job, categorized
	// by status.
	TrainingJobStatusCounters *TrainingJobStatusCounters `json:"trainingJobStatusCounters,omitempty"`
}

// Specifies the configuration for a hyperparameter tuning job that uses one
// or more previous hyperparameter tuning jobs as a starting point. The results
// of previous tuning jobs are used to inform which combinations of hyperparameters
// to search over in the new tuning job.
//
// All training jobs launched by the new hyperparameter tuning job are evaluated
// by using the objective metric, and the training job that performs the best
// is compared to the best training jobs from the parent tuning jobs. From these,
// the training job that performs the best as measured by the objective metric
// is returned as the overall best training job.
//
// All training jobs launched by parent hyperparameter tuning jobs and the new
// hyperparameter tuning jobs count against the limit of training jobs for the
// tuning job.
type HyperParameterTuningJobWarmStartConfig struct {
	ParentHyperParameterTuningJobs []*ParentHyperParameterTuningJob `json:"parentHyperParameterTuningJobs,omitempty"`
	WarmStartType                  *string                          `json:"warmStartType,omitempty"`
}

// The IAM Identity details associated with the user. These details are associated
// with model package groups, model packages and project entities only.
type IAMIdentity struct {
	ARN            *string `json:"arn,omitempty"`
	PrincipalID    *string `json:"principalID,omitempty"`
	SourceIdentity *string `json:"sourceIdentity,omitempty"`
}

// The Amazon SageMaker Canvas application setting where you configure OAuth
// for connecting to an external data source, such as Snowflake.
type IdentityProviderOAuthSetting struct {
	Status *string `json:"status,omitempty"`
}

// A SageMaker image. A SageMaker image represents a set of container images
// that are derived from a common base container image. Each of these container
// images is represented by a SageMaker ImageVersion.
type Image struct {
	CreationTime     *metav1.Time `json:"creationTime,omitempty"`
	FailureReason    *string      `json:"failureReason,omitempty"`
	ImageARN         *string      `json:"imageARN,omitempty"`
	ImageName        *string      `json:"imageName,omitempty"`
	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`
}

// Specifies whether the model container is in Amazon ECR or a private Docker
// registry accessible from your Amazon Virtual Private Cloud (VPC).
type ImageConfig struct {
	RepositoryAccessMode *string `json:"repositoryAccessMode,omitempty"`
	// Specifies an authentication configuration for the private docker registry
	// where your model image is hosted. Specify a value for this property only
	// if you specified Vpc as the value for the RepositoryAccessMode field of the
	// ImageConfig object that you passed to a call to CreateModel and the private
	// Docker registry where the model image is hosted requires authentication.
	RepositoryAuthConfig *RepositoryAuthConfig `json:"repositoryAuthConfig,omitempty"`
}

// A version of a SageMaker Image. A version represents an existing container
// image.
type ImageVersion struct {
	CreationTime     *metav1.Time `json:"creationTime,omitempty"`
	FailureReason    *string      `json:"failureReason,omitempty"`
	ImageARN         *string      `json:"imageARN,omitempty"`
	ImageVersionARN  *string      `json:"imageVersionARN,omitempty"`
	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`
	Version          *int64       `json:"version,omitempty"`
}

// Defines the compute resources to allocate to run a model that you assign
// to an inference component. These resources include CPU cores, accelerators,
// and memory.
type InferenceComponentComputeResourceRequirements struct {
	MaxMemoryRequiredInMb              *int64   `json:"maxMemoryRequiredInMb,omitempty"`
	MinMemoryRequiredInMb              *int64   `json:"minMemoryRequiredInMb,omitempty"`
	NumberOfAcceleratorDevicesRequired *float64 `json:"numberOfAcceleratorDevicesRequired,omitempty"`
	NumberOfCPUCoresRequired           *float64 `json:"numberOfCPUCoresRequired,omitempty"`
}

// Defines a container that provides the runtime environment for a model that
// you deploy with an inference component.
type InferenceComponentContainerSpecification struct {
	ArtifactURL *string            `json:"artifactURL,omitempty"`
	Environment map[string]*string `json:"environment,omitempty"`
	Image       *string            `json:"image,omitempty"`
}

// Details about the resources that are deployed with this inference component.
type InferenceComponentContainerSpecificationSummary struct {
	ArtifactURL *string `json:"artifactURL,omitempty"`
	// Gets the Amazon EC2 Container Registry path of the docker image of the model
	// that is hosted in this ProductionVariant (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ProductionVariant.html).
	//
	// If you used the registry/repository[:tag] form to specify the image path
	// of the primary container when you created the model hosted in this ProductionVariant,
	// the path resolves to a path of the form registry/repository[@digest]. A digest
	// is a hash value that identifies a specific version of an image. For information
	// about Amazon ECR paths, see Pulling an Image (https://docs.aws.amazon.com/AmazonECR/latest/userguide/docker-pull-ecr-image.html)
	// in the Amazon ECR User Guide.
	DeployedImage *DeployedImage     `json:"deployedImage,omitempty"`
	Environment   map[string]*string `json:"environment,omitempty"`
}

// Runtime settings for a model that is deployed with an inference component.
type InferenceComponentRuntimeConfig struct {
	CopyCount *int64 `json:"copyCount,omitempty"`
}

// Details about the runtime settings for the model that is deployed with the
// inference component.
type InferenceComponentRuntimeConfigSummary struct {
	CurrentCopyCount *int64 `json:"currentCopyCount,omitempty"`
	DesiredCopyCount *int64 `json:"desiredCopyCount,omitempty"`
}

// Details about the resources to deploy with this inference component, including
// the model, container, and compute resources.
type InferenceComponentSpecification struct {
	// Defines the compute resources to allocate to run a model that you assign
	// to an inference component. These resources include CPU cores, accelerators,
	// and memory.
	ComputeResourceRequirements *InferenceComponentComputeResourceRequirements `json:"computeResourceRequirements,omitempty"`
	// Defines a container that provides the runtime environment for a model that
	// you deploy with an inference component.
	Container *InferenceComponentContainerSpecification `json:"container,omitempty"`
	ModelName *string                                   `json:"modelName,omitempty"`
	// Settings that take effect while the model container starts up.
	StartupParameters *InferenceComponentStartupParameters `json:"startupParameters,omitempty"`
}

// Details about the resources that are deployed with this inference component.
type InferenceComponentSpecificationSummary struct {
	// Defines the compute resources to allocate to run a model that you assign
	// to an inference component. These resources include CPU cores, accelerators,
	// and memory.
	ComputeResourceRequirements *InferenceComponentComputeResourceRequirements `json:"computeResourceRequirements,omitempty"`
	// Details about the resources that are deployed with this inference component.
	Container *InferenceComponentContainerSpecificationSummary `json:"container,omitempty"`
	ModelName *string                                          `json:"modelName,omitempty"`
	// Settings that take effect while the model container starts up.
	StartupParameters *InferenceComponentStartupParameters `json:"startupParameters,omitempty"`
}

// Settings that take effect while the model container starts up.
type InferenceComponentStartupParameters struct {
	ContainerStartupHealthCheckTimeoutInSeconds *int64 `json:"containerStartupHealthCheckTimeoutInSeconds,omitempty"`
	ModelDataDownloadTimeoutInSeconds           *int64 `json:"modelDataDownloadTimeoutInSeconds,omitempty"`
}

// A summary of the properties of an inference component.
type InferenceComponentSummary struct {
	CreationTime             *metav1.Time `json:"creationTime,omitempty"`
	EndpointARN              *string      `json:"endpointARN,omitempty"`
	EndpointName             *string      `json:"endpointName,omitempty"`
	InferenceComponentARN    *string      `json:"inferenceComponentARN,omitempty"`
	InferenceComponentName   *string      `json:"inferenceComponentName,omitempty"`
	InferenceComponentStatus *string      `json:"inferenceComponentStatus,omitempty"`
	LastModifiedTime         *metav1.Time `json:"lastModifiedTime,omitempty"`
	VariantName              *string      `json:"variantName,omitempty"`
}

// Specifies details about how containers in a multi-container endpoint are
// run.
type InferenceExecutionConfig struct {
	Mode *string `json:"mode,omitempty"`
}

// The Amazon S3 location and configuration for storing inference request and
// response data.
type InferenceExperimentDataStorageConfig struct {
	// Configuration specifying how to treat different headers. If no headers are
	// specified Amazon SageMaker will by default base64 encode when capturing the
	// data.
	ContentType *CaptureContentTypeHeader `json:"contentType,omitempty"`
	Destination *string                   `json:"destination,omitempty"`
	KMSKey      *string                   `json:"kmsKey,omitempty"`
}

// The start and end times of an inference experiment.
//
// The maximum duration that you can set for an inference experiment is 30 days.
type InferenceExperimentSchedule struct {
	EndTime   *metav1.Time `json:"endTime,omitempty"`
	StartTime *metav1.Time `json:"startTime,omitempty"`
}

// Lists a summary of properties of an inference experiment.
type InferenceExperimentSummary struct {
	CompletionTime   *metav1.Time `json:"completionTime,omitempty"`
	CreationTime     *metav1.Time `json:"creationTime,omitempty"`
	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`
	RoleARN          *string      `json:"roleARN,omitempty"`
}

// The metrics for an existing endpoint compared in an Inference Recommender
// job.
type InferenceMetrics struct {
	MaxInvocations *int64 `json:"maxInvocations,omitempty"`
	ModelLatency   *int64 `json:"modelLatency,omitempty"`
}

// A list of recommendations made by Amazon SageMaker Inference Recommender.
type InferenceRecommendation struct {
	RecommendationID *string `json:"recommendationID,omitempty"`
}

// A structure that contains a list of recommendation jobs.
type InferenceRecommendationsJob struct {
	CompletionTime         *metav1.Time `json:"completionTime,omitempty"`
	CreationTime           *metav1.Time `json:"creationTime,omitempty"`
	FailureReason          *string      `json:"failureReason,omitempty"`
	LastModifiedTime       *metav1.Time `json:"lastModifiedTime,omitempty"`
	ModelName              *string      `json:"modelName,omitempty"`
	ModelPackageVersionARN *string      `json:"modelPackageVersionARN,omitempty"`
	RoleARN                *string      `json:"roleARN,omitempty"`
	SamplePayloadURL       *string      `json:"samplePayloadURL,omitempty"`
}

// Defines how to perform inference generation after a training job is run.
type InferenceSpecification struct {
	Containers                              []*ModelPackageContainerDefinition `json:"containers,omitempty"`
	SupportedContentTypes                   []*string                          `json:"supportedContentTypes,omitempty"`
	SupportedRealtimeInferenceInstanceTypes []*string                          `json:"supportedRealtimeInferenceInstanceTypes,omitempty"`
	SupportedResponseMIMETypes              []*string                          `json:"supportedResponseMIMETypes,omitempty"`
	SupportedTransformInstanceTypes         []*string                          `json:"supportedTransformInstanceTypes,omitempty"`
}

// Configuration information for the infrastructure health check of a training
// job. A SageMaker-provided health check tests the health of instance hardware
// and cluster network connectivity.
type InfraCheckConfig struct {
	EnableInfraCheck *bool `json:"enableInfraCheck,omitempty"`
}

// Contains information about the location of input model artifacts, the name
// and shape of the expected data inputs, and the framework in which the model
// was trained.
type InputConfig struct {
	DataInputConfig *string `json:"dataInputConfig,omitempty"`
	S3URI           *string `json:"s3URI,omitempty"`
}

// Defines an instance group for heterogeneous cluster training. When requesting
// a training job using the CreateTrainingJob (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html)
// API, you can configure multiple instance groups .
type InstanceGroup struct {
	InstanceCount     *int64  `json:"instanceCount,omitempty"`
	InstanceGroupName *string `json:"instanceGroupName,omitempty"`
	InstanceType      *string `json:"instanceType,omitempty"`
}

// For a hyperparameter of the integer type, specifies the range that a hyperparameter
// tuning job searches.
type IntegerParameterRange struct {
	MaxValue    *string `json:"maxValue,omitempty"`
	MinValue    *string `json:"minValue,omitempty"`
	Name        *string `json:"name,omitempty"`
	ScalingType *string `json:"scalingType,omitempty"`
}

// Defines the possible values for an integer hyperparameter.
type IntegerParameterRangeSpecification struct {
	MaxValue *string `json:"maxValue,omitempty"`
	MinValue *string `json:"minValue,omitempty"`
}

// The settings for the JupyterLab application.
type JupyterLabAppSettings struct {
	CustomImages []*CustomImage `json:"customImages,omitempty"`
	// Specifies the ARN's of a SageMaker image and SageMaker image version, and
	// the instance type that the version runs on.
	DefaultResourceSpec *ResourceSpec `json:"defaultResourceSpec,omitempty"`
	LifecycleConfigARNs []*string     `json:"lifecycleConfigARNs,omitempty"`
}

// The JupyterServer app settings.
type JupyterServerAppSettings struct {
	// Specifies the ARN's of a SageMaker image and SageMaker image version, and
	// the instance type that the version runs on.
	DefaultResourceSpec *ResourceSpec `json:"defaultResourceSpec,omitempty"`
	LifecycleConfigARNs []*string     `json:"lifecycleConfigARNs,omitempty"`
}

// The Amazon SageMaker Canvas application setting where you configure document
// querying.
type KendraSettings struct {
	Status *string `json:"status,omitempty"`
}

// The KernelGateway app settings.
type KernelGatewayAppSettings struct {
	CustomImages []*CustomImage `json:"customImages,omitempty"`
	// Specifies the ARN's of a SageMaker image and SageMaker image version, and
	// the instance type that the version runs on.
	DefaultResourceSpec *ResourceSpec `json:"defaultResourceSpec,omitempty"`
	LifecycleConfigARNs []*string     `json:"lifecycleConfigARNs,omitempty"`
}

// Provides configuration information for auto-labeling of your data objects.
// A LabelingJobAlgorithmsConfig object must be supplied in order to use auto-labeling.
type LabelingJobAlgorithmsConfig struct {
	InitialActiveLearningModelARN *string `json:"initialActiveLearningModelARN,omitempty"`
}

// Provides summary information for a work team.
type LabelingJobForWorkteamSummary struct {
	CreationTime           *metav1.Time `json:"creationTime,omitempty"`
	WorkRequesterAccountID *string      `json:"workRequesterAccountID,omitempty"`
}

// Specifies the location of the output produced by the labeling job.
type LabelingJobOutput struct {
	FinalActiveLearningModelARN *string `json:"finalActiveLearningModelARN,omitempty"`
	OutputDatasetS3URI          *string `json:"outputDatasetS3URI,omitempty"`
}

// Output configuration information for a labeling job.
type LabelingJobOutputConfig struct {
	KMSKeyID     *string `json:"kmsKeyID,omitempty"`
	S3OutputPath *string `json:"s3OutputPath,omitempty"`
	SNSTopicARN  *string `json:"snsTopicARN,omitempty"`
}

// Configure encryption on the storage volume attached to the ML compute instance
// used to run automated data labeling model training and inference.
type LabelingJobResourceConfig struct {
	VolumeKMSKeyID *string `json:"volumeKMSKeyID,omitempty"`
	// Specifies an Amazon Virtual Private Cloud (VPC) that your SageMaker jobs,
	// hosted models, and compute resources have access to. You can control access
	// to and from your resources by configuring a VPC. For more information, see
	// Give SageMaker Access to Resources in your Amazon VPC (https://docs.aws.amazon.com/sagemaker/latest/dg/infrastructure-give-access.html).
	VPCConfig *VPCConfig `json:"vpcConfig,omitempty"`
}

// The Amazon S3 location of the input data objects.
type LabelingJobS3DataSource struct {
	ManifestS3URI *string `json:"manifestS3URI,omitempty"`
}

// An Amazon SNS data source used for streaming labeling jobs.
type LabelingJobSNSDataSource struct {
	SNSTopicARN *string `json:"snsTopicARN,omitempty"`
}

// Provides summary information about a labeling job.
type LabelingJobSummary struct {
	CreationTime     *metav1.Time `json:"creationTime,omitempty"`
	FailureReason    *string      `json:"failureReason,omitempty"`
	LabelingJobARN   *string      `json:"labelingJobARN,omitempty"`
	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`
}

// Metadata for a Lambda step.
type LambdaStepMetadata struct {
	ARN *string `json:"arn,omitempty"`
}

// A value that indicates whether the update was successful.
type LastUpdateStatus struct {
	FailureReason *string `json:"failureReason,omitempty"`
	Status        *string `json:"status,omitempty"`
}

// Lists a summary of the properties of a lineage group. A lineage group provides
// a group of shareable lineage entity resources.
type LineageGroupSummary struct {
	CreationTime     *metav1.Time `json:"creationTime,omitempty"`
	DisplayName      *string      `json:"displayName,omitempty"`
	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`
	LineageGroupName *string      `json:"lineageGroupName,omitempty"`
}

// Metadata properties of the tracking entity, trial, or trial component.
type MetadataProperties struct {
	CommitID    *string `json:"commitID,omitempty"`
	GeneratedBy *string `json:"generatedBy,omitempty"`
	ProjectID   *string `json:"projectID,omitempty"`
	Repository  *string `json:"repository,omitempty"`
}

// The name, value, and date and time of a metric that was emitted to Amazon
// CloudWatch.
type MetricData struct {
	MetricName *string      `json:"metricName,omitempty"`
	Timestamp  *metav1.Time `json:"timestamp,omitempty"`
	Value      *float64     `json:"value,omitempty"`
}

// Information about the metric for a candidate produced by an AutoML job.
type MetricDatum struct {
	Value *float64 `json:"value,omitempty"`
}

// Specifies a metric that the training algorithm writes to stderr or stdout.
// You can view these logs to understand how your training job performs and
// check for any errors encountered during training. SageMaker hyperparameter
// tuning captures all defined metrics. Specify one of the defined metrics to
// use as an objective metric using the TuningObjective (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTrainingJobDefinition.html#sagemaker-Type-HyperParameterTrainingJobDefinition-TuningObjective)
// parameter in the HyperParameterTrainingJobDefinition API to evaluate job
// performance during hyperparameter tuning.
type MetricDefinition struct {
	Name  *string `json:"name,omitempty"`
	Regex *string `json:"regex,omitempty"`
}

// Details about the metrics source.
type MetricsSource struct {
	ContentDigest *string `json:"contentDigest,omitempty"`
	ContentType   *string `json:"contentType,omitempty"`
	S3URI         *string `json:"s3URI,omitempty"`
}

// The access configuration file to control access to the ML model. You can
// explicitly accept the model end-user license agreement (EULA) within the
// ModelAccessConfig.
//
//   - If you are a Jumpstart user, see the End-user license agreements (https://docs.aws.amazon.com/sagemaker/latest/dg/jumpstart-foundation-models-choose.html#jumpstart-foundation-models-choose-eula)
//     section for more details on accepting the EULA.
//
//   - If you are an AutoML user, see the Optional Parameters section of Create
//     an AutoML job to fine-tune text generation models using the API for details
//     on How to set the EULA acceptance when fine-tuning a model using the AutoML
//     API (https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-create-experiment-finetune-llms.html#autopilot-llms-finetuning-api-optional-params).
type ModelAccessConfig struct {
	AcceptEula *bool `json:"acceptEula,omitempty"`
}

// Provides information about the location that is configured for storing model
// artifacts.
//
// Model artifacts are the output that results from training a model, and typically
// consist of trained parameters, a model definition that describes how to compute
// inferences, and other metadata.
type ModelArtifacts struct {
	S3ModelArtifacts *string `json:"s3ModelArtifacts,omitempty"`
}

// Docker container image configuration object for the model bias job.
type ModelBiasAppSpecification struct {
	ConfigURI   *string            `json:"configURI,omitempty"`
	Environment map[string]*string `json:"environment,omitempty"`
	ImageURI    *string            `json:"imageURI,omitempty"`
}

// The configuration for a baseline model bias job.
type ModelBiasBaselineConfig struct {
	BaseliningJobName *string `json:"baseliningJobName,omitempty"`
	// The constraints resource for a monitoring job.
	ConstraintsResource *MonitoringConstraintsResource `json:"constraintsResource,omitempty"`
}

// Inputs for the model bias job.
type ModelBiasJobInput struct {
	// Input object for the endpoint
	EndpointInput *EndpointInput `json:"endpointInput,omitempty"`
	// The ground truth labels for the dataset used for the monitoring job.
	GroundTruthS3Input *MonitoringGroundTruthS3Input `json:"groundTruthS3Input,omitempty"`
}

// An Amazon SageMaker Model Card.
type ModelCard struct {
	// Information about the user who created or modified an experiment, trial,
	// trial component, lineage group, project, or model card.
	CreatedBy    *UserContext `json:"createdBy,omitempty"`
	CreationTime *metav1.Time `json:"creationTime,omitempty"`
	// Information about the user who created or modified an experiment, trial,
	// trial component, lineage group, project, or model card.
	LastModifiedBy        *UserContext `json:"lastModifiedBy,omitempty"`
	LastModifiedTime      *metav1.Time `json:"lastModifiedTime,omitempty"`
	ModelCardName         *string      `json:"modelCardName,omitempty"`
	ModelCardVersion      *int64       `json:"modelCardVersion,omitempty"`
	ModelID               *string      `json:"modelID,omitempty"`
	ModelPackageGroupName *string      `json:"modelPackageGroupName,omitempty"`
	RiskRating            *string      `json:"riskRating,omitempty"`
	Tags                  []*Tag       `json:"tags,omitempty"`
}

// The artifacts of the model card export job.
type ModelCardExportArtifacts struct {
	S3ExportArtifacts *string `json:"s3ExportArtifacts,omitempty"`
}

// The summary of the Amazon SageMaker Model Card export job.
type ModelCardExportJobSummary struct {
	CreatedAt              *metav1.Time `json:"createdAt,omitempty"`
	LastModifiedAt         *metav1.Time `json:"lastModifiedAt,omitempty"`
	ModelCardExportJobName *string      `json:"modelCardExportJobName,omitempty"`
	ModelCardName          *string      `json:"modelCardName,omitempty"`
	ModelCardVersion       *int64       `json:"modelCardVersion,omitempty"`
}

// Configure the export output details for an Amazon SageMaker Model Card.
type ModelCardExportOutputConfig struct {
	S3OutputPath *string `json:"s3OutputPath,omitempty"`
}

// Configure the security settings to protect model card data.
type ModelCardSecurityConfig struct {
	KMSKeyID *string `json:"kmsKeyID,omitempty"`
}

// A summary of the model card.
type ModelCardSummary struct {
	CreationTime     *metav1.Time `json:"creationTime,omitempty"`
	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`
	ModelCardName    *string      `json:"modelCardName,omitempty"`
}

// A summary of a specific version of the model card.
type ModelCardVersionSummary struct {
	CreationTime     *metav1.Time `json:"creationTime,omitempty"`
	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`
	ModelCardName    *string      `json:"modelCardName,omitempty"`
	ModelCardVersion *int64       `json:"modelCardVersion,omitempty"`
}

// Configures the timeout and maximum number of retries for processing a transform
// job invocation.
type ModelClientConfig struct {
	InvocationsMaxRetries       *int64 `json:"invocationsMaxRetries,omitempty"`
	InvocationsTimeoutInSeconds *int64 `json:"invocationsTimeoutInSeconds,omitempty"`
}

// Defines the model configuration. Includes the specification name and environment
// parameters.
type ModelConfiguration struct {
	InferenceSpecificationName *string `json:"inferenceSpecificationName,omitempty"`
}

// An endpoint that hosts a model displayed in the Amazon SageMaker Model Dashboard.
type ModelDashboardEndpoint struct {
	CreationTime     *metav1.Time `json:"creationTime,omitempty"`
	EndpointARN      *string      `json:"endpointARN,omitempty"`
	EndpointName     *string      `json:"endpointName,omitempty"`
	EndpointStatus   *string      `json:"endpointStatus,omitempty"`
	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`
}

// An alert action taken to light up an icon on the Amazon SageMaker Model Dashboard
// when an alert goes into InAlert status.
type ModelDashboardIndicatorAction struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// The model card for a model displayed in the Amazon SageMaker Model Dashboard.
type ModelDashboardModelCard struct {
	// Information about the user who created or modified an experiment, trial,
	// trial component, lineage group, project, or model card.
	CreatedBy    *UserContext `json:"createdBy,omitempty"`
	CreationTime *metav1.Time `json:"creationTime,omitempty"`
	// Information about the user who created or modified an experiment, trial,
	// trial component, lineage group, project, or model card.
	LastModifiedBy   *UserContext `json:"lastModifiedBy,omitempty"`
	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`
	ModelCardName    *string      `json:"modelCardName,omitempty"`
	ModelCardVersion *int64       `json:"modelCardVersion,omitempty"`
	ModelID          *string      `json:"modelID,omitempty"`
	RiskRating       *string      `json:"riskRating,omitempty"`
	Tags             []*Tag       `json:"tags,omitempty"`
}

// A monitoring schedule for a model displayed in the Amazon SageMaker Model
// Dashboard.
type ModelDashboardMonitoringSchedule struct {
	CreationTime     *metav1.Time `json:"creationTime,omitempty"`
	EndpointName     *string      `json:"endpointName,omitempty"`
	FailureReason    *string      `json:"failureReason,omitempty"`
	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`
	// Summary of information about the last monitoring job to run.
	LastMonitoringExecutionSummary *MonitoringExecutionSummary `json:"lastMonitoringExecutionSummary,omitempty"`
	MonitoringScheduleARN          *string                     `json:"monitoringScheduleARN,omitempty"`
	// Configures the monitoring schedule and defines the monitoring job.
	MonitoringScheduleConfig *MonitoringScheduleConfig `json:"monitoringScheduleConfig,omitempty"`
	MonitoringScheduleName   *string                   `json:"monitoringScheduleName,omitempty"`
	MonitoringScheduleStatus *string                   `json:"monitoringScheduleStatus,omitempty"`
	MonitoringType           *string                   `json:"monitoringType,omitempty"`
}

// Data quality constraints and statistics for a model.
type ModelDataQuality struct {
	// Details about the metrics source.
	Constraints *MetricsSource `json:"constraints,omitempty"`
	// Details about the metrics source.
	Statistics *MetricsSource `json:"statistics,omitempty"`
}

// Specifies the location of ML model data to deploy. If specified, you must
// specify one and only one of the available data sources.
type ModelDataSource struct {
	// Specifies the S3 location of ML model data to deploy.
	S3DataSource *S3ModelDataSource `json:"s3DataSource,omitempty"`
}

// Specifies how to generate the endpoint name for an automatic one-click Autopilot
// model deployment.
type ModelDeployConfig struct {
	EndpointName *string `json:"endpointName,omitempty"`
}

// Provides information about the endpoint of the model deployment.
type ModelDeployResult struct {
	EndpointName *string `json:"endpointName,omitempty"`
}

// Docker container image configuration object for the model explainability
// job.
type ModelExplainabilityAppSpecification struct {
	ConfigURI   *string            `json:"configURI,omitempty"`
	Environment map[string]*string `json:"environment,omitempty"`
	ImageURI    *string            `json:"imageURI,omitempty"`
}

// The configuration for a baseline model explainability job.
type ModelExplainabilityBaselineConfig struct {
	BaseliningJobName *string `json:"baseliningJobName,omitempty"`
	// The constraints resource for a monitoring job.
	ConstraintsResource *MonitoringConstraintsResource `json:"constraintsResource,omitempty"`
}

// Inputs for the model explainability job.
type ModelExplainabilityJobInput struct {
	// Input object for the endpoint
	EndpointInput *EndpointInput `json:"endpointInput,omitempty"`
}

// Input object for the model.
type ModelInput struct {
	DataInputConfig *string `json:"dataInputConfig,omitempty"`
}

// The model latency threshold.
type ModelLatencyThreshold struct {
	ValueInMilliseconds *int64 `json:"valueInMilliseconds,omitempty"`
}

// Part of the search expression. You can specify the name and value (domain,
// task, framework, framework version, task, and model).
type ModelMetadataFilter struct {
	Value *string `json:"value,omitempty"`
}

// A summary of the model metadata.
type ModelMetadataSummary struct {
	Domain           *string `json:"domain,omitempty"`
	Framework        *string `json:"framework,omitempty"`
	FrameworkVersion *string `json:"frameworkVersion,omitempty"`
	Model            *string `json:"model,omitempty"`
	Task             *string `json:"task,omitempty"`
}

// Contains metrics captured from a model.
type ModelMetrics struct {
	// Contains bias metrics for a model.
	Bias *Bias `json:"bias,omitempty"`
	// Contains explainability metrics for a model.
	Explainability *Explainability `json:"explainability,omitempty"`
	// Data quality constraints and statistics for a model.
	ModelDataQuality *ModelDataQuality `json:"modelDataQuality,omitempty"`
	// Model quality statistics and constraints.
	ModelQuality *ModelQuality `json:"modelQuality,omitempty"`
}

// Describes the Docker container for the model package.
type ModelPackageContainerDefinition struct {
	// A data source used for training or inference that is in addition to the input
	// dataset or model data.
	AdditionalS3DataSource *AdditionalS3DataSource `json:"additionalS3DataSource,omitempty"`
	ContainerHostname      *string                 `json:"containerHostname,omitempty"`
	Environment            map[string]*string      `json:"environment,omitempty"`
	Framework              *string                 `json:"framework,omitempty"`
	FrameworkVersion       *string                 `json:"frameworkVersion,omitempty"`
	Image                  *string                 `json:"image,omitempty"`
	ImageDigest            *string                 `json:"imageDigest,omitempty"`
	ModelDataURL           *string                 `json:"modelDataURL,omitempty"`
	// Input object for the model.
	ModelInput       *ModelInput `json:"modelInput,omitempty"`
	NearestModelName *string     `json:"nearestModelName,omitempty"`
	ProductID        *string     `json:"productID,omitempty"`
}

// Summary information about a model group.
type ModelPackageGroupSummary struct {
	CreationTime                 *metav1.Time `json:"creationTime,omitempty"`
	ModelPackageGroupARN         *string      `json:"modelPackageGroupARN,omitempty"`
	ModelPackageGroupDescription *string      `json:"modelPackageGroupDescription,omitempty"`
	ModelPackageGroupName        *string      `json:"modelPackageGroupName,omitempty"`
	ModelPackageGroupStatus      *string      `json:"modelPackageGroupStatus,omitempty"`
}

// A group of versioned models in the model registry.
type ModelPackageGroup_SDK struct {
	// Information about the user who created or modified an experiment, trial,
	// trial component, lineage group, project, or model card.
	CreatedBy                    *UserContext `json:"createdBy,omitempty"`
	CreationTime                 *metav1.Time `json:"creationTime,omitempty"`
	ModelPackageGroupARN         *string      `json:"modelPackageGroupARN,omitempty"`
	ModelPackageGroupDescription *string      `json:"modelPackageGroupDescription,omitempty"`
	ModelPackageGroupName        *string      `json:"modelPackageGroupName,omitempty"`
	ModelPackageGroupStatus      *string      `json:"modelPackageGroupStatus,omitempty"`
	Tags                         []*Tag       `json:"tags,omitempty"`
}

// Specifies the validation and image scan statuses of the model package.
type ModelPackageStatusDetails struct {
	ImageScanStatuses  []*ModelPackageStatusItem `json:"imageScanStatuses,omitempty"`
	ValidationStatuses []*ModelPackageStatusItem `json:"validationStatuses,omitempty"`
}

// Represents the overall status of a model package.
type ModelPackageStatusItem struct {
	FailureReason *string `json:"failureReason,omitempty"`
	Name          *string `json:"name,omitempty"`
	Status        *string `json:"status,omitempty"`
}

// Provides summary information about a model package.
type ModelPackageSummary struct {
	CreationTime            *metav1.Time `json:"creationTime,omitempty"`
	ModelApprovalStatus     *string      `json:"modelApprovalStatus,omitempty"`
	ModelPackageARN         *string      `json:"modelPackageARN,omitempty"`
	ModelPackageDescription *string      `json:"modelPackageDescription,omitempty"`
	ModelPackageGroupName   *string      `json:"modelPackageGroupName,omitempty"`
	ModelPackageName        *string      `json:"modelPackageName,omitempty"`
	ModelPackageStatus      *string      `json:"modelPackageStatus,omitempty"`
	ModelPackageVersion     *int64       `json:"modelPackageVersion,omitempty"`
}

// Contains data, such as the inputs and targeted instance types that are used
// in the process of validating the model package.
//
// The data provided in the validation profile is made available to your buyers
// on Amazon Web Services Marketplace.
type ModelPackageValidationProfile struct {
	ProfileName *string `json:"profileName,omitempty"`
	// Defines the input needed to run a transform job using the inference specification
	// specified in the algorithm.
	TransformJobDefinition *TransformJobDefinition `json:"transformJobDefinition,omitempty"`
}

// Specifies batch transform jobs that SageMaker runs to validate your model
// package.
type ModelPackageValidationSpecification struct {
	ValidationProfiles []*ModelPackageValidationProfile `json:"validationProfiles,omitempty"`
	ValidationRole     *string                          `json:"validationRole,omitempty"`
}

// A versioned model that can be deployed for SageMaker inference.
type ModelPackage_SDK struct {
	AdditionalInferenceSpecifications []*AdditionalInferenceSpecificationDefinition `json:"additionalInferenceSpecifications,omitempty"`
	ApprovalDescription               *string                                       `json:"approvalDescription,omitempty"`
	CertifyForMarketplace             *bool                                         `json:"certifyForMarketplace,omitempty"`
	// Information about the user who created or modified an experiment, trial,
	// trial component, lineage group, project, or model card.
	CreatedBy                  *UserContext       `json:"createdBy,omitempty"`
	CreationTime               *metav1.Time       `json:"creationTime,omitempty"`
	CustomerMetadataProperties map[string]*string `json:"customerMetadataProperties,omitempty"`
	Domain                     *string            `json:"domain,omitempty"`
	// Represents the drift check baselines that can be used when the model monitor
	// is set using the model package.
	DriftCheckBaselines *DriftCheckBaselines `json:"driftCheckBaselines,omitempty"`
	// Defines how to perform inference generation after a training job is run.
	InferenceSpecification *InferenceSpecification `json:"inferenceSpecification,omitempty"`
	// Information about the user who created or modified an experiment, trial,
	// trial component, lineage group, project, or model card.
	LastModifiedBy   *UserContext `json:"lastModifiedBy,omitempty"`
	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`
	// Metadata properties of the tracking entity, trial, or trial component.
	MetadataProperties  *MetadataProperties `json:"metadataProperties,omitempty"`
	ModelApprovalStatus *string             `json:"modelApprovalStatus,omitempty"`
	// Contains metrics captured from a model.
	ModelMetrics            *ModelMetrics `json:"modelMetrics,omitempty"`
	ModelPackageARN         *string       `json:"modelPackageARN,omitempty"`
	ModelPackageDescription *string       `json:"modelPackageDescription,omitempty"`
	ModelPackageGroupName   *string       `json:"modelPackageGroupName,omitempty"`
	ModelPackageName        *string       `json:"modelPackageName,omitempty"`
	ModelPackageStatus      *string       `json:"modelPackageStatus,omitempty"`
	// Specifies the validation and image scan statuses of the model package.
	ModelPackageStatusDetails *ModelPackageStatusDetails `json:"modelPackageStatusDetails,omitempty"`
	ModelPackageVersion       *int64                     `json:"modelPackageVersion,omitempty"`
	SamplePayloadURL          *string                    `json:"samplePayloadURL,omitempty"`
	SkipModelValidation       *string                    `json:"skipModelValidation,omitempty"`
	// A list of algorithms that were used to create a model package.
	SourceAlgorithmSpecification *SourceAlgorithmSpecification `json:"sourceAlgorithmSpecification,omitempty"`
	Tags                         []*Tag                        `json:"tags,omitempty"`
	Task                         *string                       `json:"task,omitempty"`
	// Specifies batch transform jobs that SageMaker runs to validate your model
	// package.
	ValidationSpecification *ModelPackageValidationSpecification `json:"validationSpecification,omitempty"`
}

// Model quality statistics and constraints.
type ModelQuality struct {
	// Details about the metrics source.
	Constraints *MetricsSource `json:"constraints,omitempty"`
	// Details about the metrics source.
	Statistics *MetricsSource `json:"statistics,omitempty"`
}

// Container image configuration object for the monitoring job.
type ModelQualityAppSpecification struct {
	ContainerArguments              []*string          `json:"containerArguments,omitempty"`
	ContainerEntrypoint             []*string          `json:"containerEntrypoint,omitempty"`
	Environment                     map[string]*string `json:"environment,omitempty"`
	ImageURI                        *string            `json:"imageURI,omitempty"`
	PostAnalyticsProcessorSourceURI *string            `json:"postAnalyticsProcessorSourceURI,omitempty"`
	ProblemType                     *string            `json:"problemType,omitempty"`
	RecordPreprocessorSourceURI     *string            `json:"recordPreprocessorSourceURI,omitempty"`
}

// Configuration for monitoring constraints and monitoring statistics. These
// baseline resources are compared against the results of the current job from
// the series of jobs scheduled to collect data periodically.
type ModelQualityBaselineConfig struct {
	BaseliningJobName *string `json:"baseliningJobName,omitempty"`
	// The constraints resource for a monitoring job.
	ConstraintsResource *MonitoringConstraintsResource `json:"constraintsResource,omitempty"`
}

// The input for the model quality monitoring job. Currently endpoints are supported
// for input for model quality monitoring jobs.
type ModelQualityJobInput struct {
	// Input object for the endpoint
	EndpointInput *EndpointInput `json:"endpointInput,omitempty"`
	// The ground truth labels for the dataset used for the monitoring job.
	GroundTruthS3Input *MonitoringGroundTruthS3Input `json:"groundTruthS3Input,omitempty"`
}

// The model registry settings for the SageMaker Canvas application.
type ModelRegisterSettings struct {
	CrossAccountModelRegisterRoleARN *string `json:"crossAccountModelRegisterRoleARN,omitempty"`
	Status                           *string `json:"status,omitempty"`
}

// Metadata for Model steps.
type ModelStepMetadata struct {
	ARN *string `json:"arn,omitempty"`
}

// Provides summary information about a model.
type ModelSummary struct {
	CreationTime *metav1.Time `json:"creationTime,omitempty"`
	ModelARN     *string      `json:"modelARN,omitempty"`
	ModelName    *string      `json:"modelName,omitempty"`
}

// Contains information about the deployment options of a model.
type ModelVariantConfig struct {
	ModelName *string `json:"modelName,omitempty"`
}

// Summary of the deployment configuration of a model.
type ModelVariantConfigSummary struct {
	ModelName *string `json:"modelName,omitempty"`
}

// The properties of a model as returned by the Search (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html)
// API.
type Model_SDK struct {
	Containers   []*ContainerDefinition `json:"containers,omitempty"`
	CreationTime *metav1.Time           `json:"creationTime,omitempty"`
	// A set of recommended deployment configurations for the model. To get more
	// advanced recommendations, see CreateInferenceRecommendationsJob (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateInferenceRecommendationsJob.html)
	// to create an inference recommendation job.
	DeploymentRecommendation *DeploymentRecommendation `json:"deploymentRecommendation,omitempty"`
	EnableNetworkIsolation   *bool                     `json:"enableNetworkIsolation,omitempty"`
	ExecutionRoleARN         *string                   `json:"executionRoleARN,omitempty"`
	// Specifies details about how containers in a multi-container endpoint are
	// run.
	InferenceExecutionConfig *InferenceExecutionConfig `json:"inferenceExecutionConfig,omitempty"`
	ModelARN                 *string                   `json:"modelARN,omitempty"`
	ModelName                *string                   `json:"modelName,omitempty"`
	// Describes the container, as part of model definition.
	PrimaryContainer *ContainerDefinition `json:"primaryContainer,omitempty"`
	Tags             []*Tag               `json:"tags,omitempty"`
	// Specifies an Amazon Virtual Private Cloud (VPC) that your SageMaker jobs,
	// hosted models, and compute resources have access to. You can control access
	// to and from your resources by configuring a VPC. For more information, see
	// Give SageMaker Access to Resources in your Amazon VPC (https://docs.aws.amazon.com/sagemaker/latest/dg/infrastructure-give-access.html).
	VPCConfig *VPCConfig `json:"vpcConfig,omitempty"`
}

// Provides summary information of an alert's history.
type MonitoringAlertHistorySummary struct {
	CreationTime           *metav1.Time `json:"creationTime,omitempty"`
	MonitoringScheduleName *string      `json:"monitoringScheduleName,omitempty"`
}

// Provides summary information about a monitor alert.
type MonitoringAlertSummary struct {
	CreationTime     *metav1.Time `json:"creationTime,omitempty"`
	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`
}

// Container image configuration object for the monitoring job.
type MonitoringAppSpecification struct {
	ContainerArguments              []*string `json:"containerArguments,omitempty"`
	ContainerEntrypoint             []*string `json:"containerEntrypoint,omitempty"`
	ImageURI                        *string   `json:"imageURI,omitempty"`
	PostAnalyticsProcessorSourceURI *string   `json:"postAnalyticsProcessorSourceURI,omitempty"`
	RecordPreprocessorSourceURI     *string   `json:"recordPreprocessorSourceURI,omitempty"`
}

// Configuration for monitoring constraints and monitoring statistics. These
// baseline resources are compared against the results of the current job from
// the series of jobs scheduled to collect data periodically.
type MonitoringBaselineConfig struct {
	BaseliningJobName *string `json:"baseliningJobName,omitempty"`
	// The constraints resource for a monitoring job.
	ConstraintsResource *MonitoringConstraintsResource `json:"constraintsResource,omitempty"`
	// The statistics resource for a monitoring job.
	StatisticsResource *MonitoringStatisticsResource `json:"statisticsResource,omitempty"`
}

// Configuration for the cluster used to run model monitoring jobs.
type MonitoringClusterConfig struct {
	InstanceCount  *int64  `json:"instanceCount,omitempty"`
	InstanceType   *string `json:"instanceType,omitempty"`
	VolumeKMSKeyID *string `json:"volumeKMSKeyID,omitempty"`
	VolumeSizeInGB *int64  `json:"volumeSizeInGB,omitempty"`
}

// The constraints resource for a monitoring job.
type MonitoringConstraintsResource struct {
	S3URI *string `json:"s3URI,omitempty"`
}

// Represents the CSV dataset format used when running a monitoring job.
type MonitoringCsvDatasetFormat struct {
	Header *bool `json:"header,omitempty"`
}

// Summary of information about the last monitoring job to run.
type MonitoringExecutionSummary struct {
	CreationTime                *metav1.Time `json:"creationTime,omitempty"`
	EndpointName                *string      `json:"endpointName,omitempty"`
	FailureReason               *string      `json:"failureReason,omitempty"`
	LastModifiedTime            *metav1.Time `json:"lastModifiedTime,omitempty"`
	MonitoringExecutionStatus   *string      `json:"monitoringExecutionStatus,omitempty"`
	MonitoringJobDefinitionName *string      `json:"monitoringJobDefinitionName,omitempty"`
	MonitoringScheduleName      *string      `json:"monitoringScheduleName,omitempty"`
	MonitoringType              *string      `json:"monitoringType,omitempty"`
	ProcessingJobARN            *string      `json:"processingJobARN,omitempty"`
	ScheduledTime               *metav1.Time `json:"scheduledTime,omitempty"`
}

// The ground truth labels for the dataset used for the monitoring job.
type MonitoringGroundTruthS3Input struct {
	S3URI *string `json:"s3URI,omitempty"`
}

// The inputs for a monitoring job.
type MonitoringInput struct {
	// Input object for the endpoint
	EndpointInput *EndpointInput `json:"endpointInput,omitempty"`
}

// Represents the JSON dataset format used when running a monitoring job.
type MonitoringJSONDatasetFormat struct {
	Line *bool `json:"line,omitempty"`
}

// Defines the monitoring job.
type MonitoringJobDefinition struct {
	// Configuration for monitoring constraints and monitoring statistics. These
	// baseline resources are compared against the results of the current job from
	// the series of jobs scheduled to collect data periodically.
	BaselineConfig *MonitoringBaselineConfig `json:"baselineConfig,omitempty"`
	Environment    map[string]*string        `json:"environment,omitempty"`
	// Container image configuration object for the monitoring job.
	MonitoringAppSpecification *MonitoringAppSpecification `json:"monitoringAppSpecification,omitempty"`
	MonitoringInputs           []*MonitoringInput          `json:"monitoringInputs,omitempty"`
	// The output configuration for monitoring jobs.
	MonitoringOutputConfig *MonitoringOutputConfig `json:"monitoringOutputConfig,omitempty"`
	// Identifies the resources to deploy for a monitoring job.
	MonitoringResources *MonitoringResources `json:"monitoringResources,omitempty"`
	// Networking options for a job, such as network traffic encryption between
	// containers, whether to allow inbound and outbound network calls to and from
	// containers, and the VPC subnets and security groups to use for VPC-enabled
	// jobs.
	NetworkConfig *NetworkConfig `json:"networkConfig,omitempty"`
	RoleARN       *string        `json:"roleARN,omitempty"`
	// A time limit for how long the monitoring job is allowed to run before stopping.
	StoppingCondition *MonitoringStoppingCondition `json:"stoppingCondition,omitempty"`
}

// Summary information about a monitoring job.
type MonitoringJobDefinitionSummary struct {
	CreationTime                *metav1.Time `json:"creationTime,omitempty"`
	EndpointName                *string      `json:"endpointName,omitempty"`
	MonitoringJobDefinitionARN  *string      `json:"monitoringJobDefinitionARN,omitempty"`
	MonitoringJobDefinitionName *string      `json:"monitoringJobDefinitionName,omitempty"`
}

// The networking configuration for the monitoring job.
type MonitoringNetworkConfig struct {
	EnableInterContainerTrafficEncryption *bool `json:"enableInterContainerTrafficEncryption,omitempty"`
	EnableNetworkIsolation                *bool `json:"enableNetworkIsolation,omitempty"`
	// Specifies an Amazon Virtual Private Cloud (VPC) that your SageMaker jobs,
	// hosted models, and compute resources have access to. You can control access
	// to and from your resources by configuring a VPC. For more information, see
	// Give SageMaker Access to Resources in your Amazon VPC (https://docs.aws.amazon.com/sagemaker/latest/dg/infrastructure-give-access.html).
	VPCConfig *VPCConfig `json:"vpcConfig,omitempty"`
}

// The output object for a monitoring job.
type MonitoringOutput struct {
	// Information about where and how you want to store the results of a monitoring
	// job.
	S3Output *MonitoringS3Output `json:"s3Output,omitempty"`
}

// The output configuration for monitoring jobs.
type MonitoringOutputConfig struct {
	KMSKeyID          *string             `json:"kmsKeyID,omitempty"`
	MonitoringOutputs []*MonitoringOutput `json:"monitoringOutputs,omitempty"`
}

// Identifies the resources to deploy for a monitoring job.
type MonitoringResources struct {
	// Configuration for the cluster used to run model monitoring jobs.
	ClusterConfig *MonitoringClusterConfig `json:"clusterConfig,omitempty"`
}

// Information about where and how you want to store the results of a monitoring
// job.
type MonitoringS3Output struct {
	LocalPath    *string `json:"localPath,omitempty"`
	S3UploadMode *string `json:"s3UploadMode,omitempty"`
	S3URI        *string `json:"s3URI,omitempty"`
}

// Configures the monitoring schedule and defines the monitoring job.
type MonitoringScheduleConfig struct {
	// Defines the monitoring job.
	MonitoringJobDefinition     *MonitoringJobDefinition `json:"monitoringJobDefinition,omitempty"`
	MonitoringJobDefinitionName *string                  `json:"monitoringJobDefinitionName,omitempty"`
	MonitoringType              *string                  `json:"monitoringType,omitempty"`
	// Configuration details about the monitoring schedule.
	ScheduleConfig *ScheduleConfig `json:"scheduleConfig,omitempty"`
}

// Summarizes the monitoring schedule.
type MonitoringScheduleSummary struct {
	CreationTime                *metav1.Time `json:"creationTime,omitempty"`
	EndpointName                *string      `json:"endpointName,omitempty"`
	LastModifiedTime            *metav1.Time `json:"lastModifiedTime,omitempty"`
	MonitoringJobDefinitionName *string      `json:"monitoringJobDefinitionName,omitempty"`
	MonitoringScheduleARN       *string      `json:"monitoringScheduleARN,omitempty"`
	MonitoringScheduleName      *string      `json:"monitoringScheduleName,omitempty"`
	MonitoringScheduleStatus    *string      `json:"monitoringScheduleStatus,omitempty"`
	MonitoringType              *string      `json:"monitoringType,omitempty"`
}

// A schedule for a model monitoring job. For information about model monitor,
// see Amazon SageMaker Model Monitor (https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html).
type MonitoringSchedule_SDK struct {
	CreationTime     *metav1.Time `json:"creationTime,omitempty"`
	EndpointName     *string      `json:"endpointName,omitempty"`
	FailureReason    *string      `json:"failureReason,omitempty"`
	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`
	// Summary of information about the last monitoring job to run.
	LastMonitoringExecutionSummary *MonitoringExecutionSummary `json:"lastMonitoringExecutionSummary,omitempty"`
	MonitoringScheduleARN          *string                     `json:"monitoringScheduleARN,omitempty"`
	// Configures the monitoring schedule and defines the monitoring job.
	MonitoringScheduleConfig *MonitoringScheduleConfig `json:"monitoringScheduleConfig,omitempty"`
	MonitoringScheduleName   *string                   `json:"monitoringScheduleName,omitempty"`
	MonitoringScheduleStatus *string                   `json:"monitoringScheduleStatus,omitempty"`
	MonitoringType           *string                   `json:"monitoringType,omitempty"`
	Tags                     []*Tag                    `json:"tags,omitempty"`
}

// The statistics resource for a monitoring job.
type MonitoringStatisticsResource struct {
	S3URI *string `json:"s3URI,omitempty"`
}

// A time limit for how long the monitoring job is allowed to run before stopping.
type MonitoringStoppingCondition struct {
	MaxRuntimeInSeconds *int64 `json:"maxRuntimeInSeconds,omitempty"`
}

// Specifies additional configuration for hosting multi-model endpoints.
type MultiModelConfig struct {
	ModelCacheSetting *string `json:"modelCacheSetting,omitempty"`
}

// Networking options for a job, such as network traffic encryption between
// containers, whether to allow inbound and outbound network calls to and from
// containers, and the VPC subnets and security groups to use for VPC-enabled
// jobs.
type NetworkConfig struct {
	EnableInterContainerTrafficEncryption *bool `json:"enableInterContainerTrafficEncryption,omitempty"`
	EnableNetworkIsolation                *bool `json:"enableNetworkIsolation,omitempty"`
	// Specifies an Amazon Virtual Private Cloud (VPC) that your SageMaker jobs,
	// hosted models, and compute resources have access to. You can control access
	// to and from your resources by configuring a VPC. For more information, see
	// Give SageMaker Access to Resources in your Amazon VPC (https://docs.aws.amazon.com/sagemaker/latest/dg/infrastructure-give-access.html).
	VPCConfig *VPCConfig `json:"vpcConfig,omitempty"`
}

// Provides a summary of a notebook instance lifecycle configuration.
type NotebookInstanceLifecycleConfigSummary struct {
	CreationTime                        *metav1.Time `json:"creationTime,omitempty"`
	LastModifiedTime                    *metav1.Time `json:"lastModifiedTime,omitempty"`
	NotebookInstanceLifecycleConfigARN  *string      `json:"notebookInstanceLifecycleConfigARN,omitempty"`
	NotebookInstanceLifecycleConfigName *string      `json:"notebookInstanceLifecycleConfigName,omitempty"`
}

// Contains the notebook instance lifecycle configuration script.
//
// Each lifecycle configuration script has a limit of 16384 characters.
//
// The value of the $PATH environment variable that is available to both scripts
// is /sbin:bin:/usr/sbin:/usr/bin.
//
// View Amazon CloudWatch Logs for notebook instance lifecycle configurations
// in log group /aws/sagemaker/NotebookInstances in log stream [notebook-instance-name]/[LifecycleConfigHook].
//
// Lifecycle configuration scripts cannot run for longer than 5 minutes. If
// a script runs for longer than 5 minutes, it fails and the notebook instance
// is not created or started.
//
// For information about notebook instance lifestyle configurations, see Step
// 2.1: (Optional) Customize a Notebook Instance (https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html).
type NotebookInstanceLifecycleHook struct {
	Content *string `json:"content,omitempty"`
}

// Provides summary information for an SageMaker notebook instance.
type NotebookInstanceSummary struct {
	AdditionalCodeRepositories          []*string    `json:"additionalCodeRepositories,omitempty"`
	CreationTime                        *metav1.Time `json:"creationTime,omitempty"`
	DefaultCodeRepository               *string      `json:"defaultCodeRepository,omitempty"`
	InstanceType                        *string      `json:"instanceType,omitempty"`
	LastModifiedTime                    *metav1.Time `json:"lastModifiedTime,omitempty"`
	NotebookInstanceARN                 *string      `json:"notebookInstanceARN,omitempty"`
	NotebookInstanceLifecycleConfigName *string      `json:"notebookInstanceLifecycleConfigName,omitempty"`
	NotebookInstanceName                *string      `json:"notebookInstanceName,omitempty"`
	NotebookInstanceStatus              *string      `json:"notebookInstanceStatus,omitempty"`
	URL                                 *string      `json:"url,omitempty"`
}

// Specifies the number of training jobs that this hyperparameter tuning job
// launched, categorized by the status of their objective metric. The objective
// metric status shows whether the final objective metric for the training job
// has been evaluated by the tuning job and used in the hyperparameter tuning
// process.
type ObjectiveStatusCounters struct {
	Failed    *int64 `json:"failed,omitempty"`
	Pending   *int64 `json:"pending,omitempty"`
	Succeeded *int64 `json:"succeeded,omitempty"`
}

// The configuration of an OfflineStore.
//
// Provide an OfflineStoreConfig in a request to CreateFeatureGroup to create
// an OfflineStore.
//
// To encrypt an OfflineStore using at rest data encryption, specify Amazon
// Web Services Key Management Service (KMS) key ID, or KMSKeyId, in S3StorageConfig.
type OfflineStoreConfig struct {
	// The meta data of the Glue table which serves as data catalog for the OfflineStore.
	DataCatalogConfig        *DataCatalogConfig `json:"dataCatalogConfig,omitempty"`
	DisableGlueTableCreation *bool              `json:"disableGlueTableCreation,omitempty"`
	// The Amazon Simple Storage (Amazon S3) location and and security configuration
	// for OfflineStore.
	S3StorageConfig *S3StorageConfig `json:"s3StorageConfig,omitempty"`
}

// The status of OfflineStore.
type OfflineStoreStatus struct {
	BlockedReason *string `json:"blockedReason,omitempty"`
	Status        *string `json:"status,omitempty"`
}

// Use this to specify the Amazon Web Services Key Management Service (KMS)
// Key ID, or KMSKeyId, for at rest data encryption. You can turn OnlineStore
// on or off by specifying the EnableOnlineStore flag at General Assembly.
//
// The default value is False.
type OnlineStoreConfig struct {
	EnableOnlineStore *bool `json:"enableOnlineStore,omitempty"`
	// The security configuration for OnlineStore.
	SecurityConfig *OnlineStoreSecurityConfig `json:"securityConfig,omitempty"`
	StorageType    *string                    `json:"storageType,omitempty"`
	// Time to live duration, where the record is hard deleted after the expiration
	// time is reached; ExpiresAt = EventTime + TtlDuration. For information on
	// HardDelete, see the DeleteRecord (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_feature_store_DeleteRecord.html)
	// API in the Amazon SageMaker API Reference guide.
	TTLDuration *TTLDuration `json:"ttlDuration,omitempty"`
}

// Updates the feature group online store configuration.
type OnlineStoreConfigUpdate struct {
	// Time to live duration, where the record is hard deleted after the expiration
	// time is reached; ExpiresAt = EventTime + TtlDuration. For information on
	// HardDelete, see the DeleteRecord (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_feature_store_DeleteRecord.html)
	// API in the Amazon SageMaker API Reference guide.
	TTLDuration *TTLDuration `json:"ttlDuration,omitempty"`
}

// The security configuration for OnlineStore.
type OnlineStoreSecurityConfig struct {
	KMSKeyID *string `json:"kmsKeyID,omitempty"`
}

// Contains information about the output location for the compiled model and
// the target device that the model runs on. TargetDevice and TargetPlatform
// are mutually exclusive, so you need to choose one between the two to specify
// your target device or platform. If you cannot find your device you want to
// use from the TargetDevice list, use TargetPlatform to describe the platform
// of your edge device and CompilerOptions if there are specific settings that
// are required or recommended to use for particular TargetPlatform.
type OutputConfig struct {
	KMSKeyID         *string `json:"kmsKeyID,omitempty"`
	S3OutputLocation *string `json:"s3OutputLocation,omitempty"`
}

// Provides information about how to store model training results (model artifacts).
type OutputDataConfig struct {
	CompressionType *string `json:"compressionType,omitempty"`
	KMSKeyID        *string `json:"kmsKeyID,omitempty"`
	S3OutputPath    *string `json:"s3OutputPath,omitempty"`
}

// An output parameter of a pipeline step.
type OutputParameter struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

// The collection of ownership settings for a space.
type OwnershipSettings struct {
	OwnerUserProfileName *string `json:"ownerUserProfileName,omitempty"`
}

// Specifies summary information about the ownership settings.
type OwnershipSettingsSummary struct {
	OwnerUserProfileName *string `json:"ownerUserProfileName,omitempty"`
}

// Configuration that controls the parallelism of the pipeline. By default,
// the parallelism configuration specified applies to all executions of the
// pipeline unless overridden.
type ParallelismConfiguration struct {
	MaxParallelExecutionSteps *int64 `json:"maxParallelExecutionSteps,omitempty"`
}

// Assigns a value to a named Pipeline parameter.
type Parameter struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

// Specifies ranges of integer, continuous, and categorical hyperparameters
// that a hyperparameter tuning job searches. The hyperparameter tuning job
// launches training jobs with hyperparameter values within these ranges to
// find the combination of values that result in the training job with the best
// performance as measured by the objective metric of the hyperparameter tuning
// job.
//
// The maximum number of items specified for Array Members refers to the maximum
// number of hyperparameters for each range and also the maximum for the hyperparameter
// tuning job itself. That is, the sum of the number of hyperparameters for
// all the ranges can't exceed the maximum number specified.
type ParameterRanges struct {
	AutoParameters             []*AutoParameter             `json:"autoParameters,omitempty"`
	CategoricalParameterRanges []*CategoricalParameterRange `json:"categoricalParameterRanges,omitempty"`
	ContinuousParameterRanges  []*ContinuousParameterRange  `json:"continuousParameterRanges,omitempty"`
	IntegerParameterRanges     []*IntegerParameterRange     `json:"integerParameterRanges,omitempty"`
}

// The trial that a trial component is associated with and the experiment the
// trial is part of. A component might not be associated with a trial. A component
// can be associated with multiple trials.
type Parent struct {
	ExperimentName *string `json:"experimentName,omitempty"`
	TrialName      *string `json:"trialName,omitempty"`
}

// A previously completed or stopped hyperparameter tuning job to be used as
// a starting point for a new hyperparameter tuning job.
type ParentHyperParameterTuningJob struct {
	HyperParameterTuningJobName *string `json:"hyperParameterTuningJobName,omitempty"`
}

// The summary of an in-progress deployment when an endpoint is creating or
// updating with a new endpoint configuration.
type PendingDeploymentSummary struct {
	EndpointConfigName *string                            `json:"endpointConfigName,omitempty"`
	ProductionVariants []*PendingProductionVariantSummary `json:"productionVariants,omitempty"`
	StartTime          *metav1.Time                       `json:"startTime,omitempty"`
}

// The production variant summary for a deployment when an endpoint is creating
// or updating with the CreateEndpoint (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html)
// or UpdateEndpoint (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateEndpoint.html)
// operations. Describes the VariantStatus , weight and capacity for a production
// variant associated with an endpoint.
type PendingProductionVariantSummary struct {
	AcceleratorType      *string `json:"acceleratorType,omitempty"`
	CurrentInstanceCount *int64  `json:"currentInstanceCount,omitempty"`
	// Specifies the serverless configuration for an endpoint variant.
	CurrentServerlessConfig *ProductionVariantServerlessConfig `json:"currentServerlessConfig,omitempty"`
	CurrentWeight           *float64                           `json:"currentWeight,omitempty"`
	DeployedImages          []*DeployedImage                   `json:"deployedImages,omitempty"`
	DesiredInstanceCount    *int64                             `json:"desiredInstanceCount,omitempty"`
	// Specifies the serverless configuration for an endpoint variant.
	DesiredServerlessConfig *ProductionVariantServerlessConfig `json:"desiredServerlessConfig,omitempty"`
	DesiredWeight           *float64                           `json:"desiredWeight,omitempty"`
	InstanceType            *string                            `json:"instanceType,omitempty"`
	// Settings that control the range in the number of instances that the endpoint
	// provisions as it scales up or down to accommodate traffic.
	ManagedInstanceScaling *ProductionVariantManagedInstanceScaling `json:"managedInstanceScaling,omitempty"`
	// Settings that control how the endpoint routes incoming traffic to the instances
	// that the endpoint hosts.
	RoutingConfig *ProductionVariantRoutingConfig `json:"routingConfig,omitempty"`
	VariantName   *string                         `json:"variantName,omitempty"`
	VariantStatus []*ProductionVariantStatus      `json:"variantStatus,omitempty"`
}

// The location of the pipeline definition stored in Amazon S3.
type PipelineDefinitionS3Location struct {
	Bucket    *string `json:"bucket,omitempty"`
	ObjectKey *string `json:"objectKey,omitempty"`
	VersionID *string `json:"versionID,omitempty"`
}

// An execution of a step in a pipeline.
type PipelineExecutionStep struct {
	AttemptCount  *int64       `json:"attemptCount,omitempty"`
	EndTime       *metav1.Time `json:"endTime,omitempty"`
	FailureReason *string      `json:"failureReason,omitempty"`
	StartTime     *metav1.Time `json:"startTime,omitempty"`
}

// A pipeline execution summary.
type PipelineExecutionSummary struct {
	PipelineExecutionARN           *string      `json:"pipelineExecutionARN,omitempty"`
	PipelineExecutionDescription   *string      `json:"pipelineExecutionDescription,omitempty"`
	PipelineExecutionDisplayName   *string      `json:"pipelineExecutionDisplayName,omitempty"`
	PipelineExecutionFailureReason *string      `json:"pipelineExecutionFailureReason,omitempty"`
	PipelineExecutionStatus        *string      `json:"pipelineExecutionStatus,omitempty"`
	StartTime                      *metav1.Time `json:"startTime,omitempty"`
}

// An execution of a pipeline.
type PipelineExecution_SDK struct {
	// Information about the user who created or modified an experiment, trial,
	// trial component, lineage group, project, or model card.
	CreatedBy     *UserContext `json:"createdBy,omitempty"`
	CreationTime  *metav1.Time `json:"creationTime,omitempty"`
	FailureReason *string      `json:"failureReason,omitempty"`
	// Information about the user who created or modified an experiment, trial,
	// trial component, lineage group, project, or model card.
	LastModifiedBy   *UserContext `json:"lastModifiedBy,omitempty"`
	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`
	// Configuration that controls the parallelism of the pipeline. By default,
	// the parallelism configuration specified applies to all executions of the
	// pipeline unless overridden.
	ParallelismConfiguration     *ParallelismConfiguration `json:"parallelismConfiguration,omitempty"`
	PipelineARN                  *string                   `json:"pipelineARN,omitempty"`
	PipelineExecutionARN         *string                   `json:"pipelineExecutionARN,omitempty"`
	PipelineExecutionDescription *string                   `json:"pipelineExecutionDescription,omitempty"`
	PipelineExecutionDisplayName *string                   `json:"pipelineExecutionDisplayName,omitempty"`
	PipelineExecutionStatus      *string                   `json:"pipelineExecutionStatus,omitempty"`
	// Specifies the names of the experiment and trial created by a pipeline.
	PipelineExperimentConfig *PipelineExperimentConfig `json:"pipelineExperimentConfig,omitempty"`
	PipelineParameters       []*Parameter              `json:"pipelineParameters,omitempty"`
	// The selective execution configuration applied to the pipeline run.
	SelectiveExecutionConfig *SelectiveExecutionConfig `json:"selectiveExecutionConfig,omitempty"`
}

// Specifies the names of the experiment and trial created by a pipeline.
type PipelineExperimentConfig struct {
	ExperimentName *string `json:"experimentName,omitempty"`
	TrialName      *string `json:"trialName,omitempty"`
}

// A summary of a pipeline.
type PipelineSummary struct {
	CreationTime        *metav1.Time `json:"creationTime,omitempty"`
	LastExecutionTime   *metav1.Time `json:"lastExecutionTime,omitempty"`
	LastModifiedTime    *metav1.Time `json:"lastModifiedTime,omitempty"`
	PipelineARN         *string      `json:"pipelineARN,omitempty"`
	PipelineDescription *string      `json:"pipelineDescription,omitempty"`
	PipelineDisplayName *string      `json:"pipelineDisplayName,omitempty"`
	PipelineName        *string      `json:"pipelineName,omitempty"`
	RoleARN             *string      `json:"roleARN,omitempty"`
}

// A SageMaker Model Building Pipeline instance.
type Pipeline_SDK struct {
	// Information about the user who created or modified an experiment, trial,
	// trial component, lineage group, project, or model card.
	CreatedBy    *UserContext `json:"createdBy,omitempty"`
	CreationTime *metav1.Time `json:"creationTime,omitempty"`
	// Information about the user who created or modified an experiment, trial,
	// trial component, lineage group, project, or model card.
	LastModifiedBy   *UserContext `json:"lastModifiedBy,omitempty"`
	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`
	LastRunTime      *metav1.Time `json:"lastRunTime,omitempty"`
	// Configuration that controls the parallelism of the pipeline. By default,
	// the parallelism configuration specified applies to all executions of the
	// pipeline unless overridden.
	ParallelismConfiguration *ParallelismConfiguration `json:"parallelismConfiguration,omitempty"`
	PipelineARN              *string                   `json:"pipelineARN,omitempty"`
	PipelineDescription      *string                   `json:"pipelineDescription,omitempty"`
	PipelineDisplayName      *string                   `json:"pipelineDisplayName,omitempty"`
	PipelineName             *string                   `json:"pipelineName,omitempty"`
	PipelineStatus           *string                   `json:"pipelineStatus,omitempty"`
	RoleARN                  *string                   `json:"roleARN,omitempty"`
	Tags                     []*Tag                    `json:"tags,omitempty"`
}

// A specification for a predefined metric.
type PredefinedMetricSpecification struct {
	PredefinedMetricType *string `json:"predefinedMetricType,omitempty"`
}

// Configuration for the cluster used to run a processing job.
type ProcessingClusterConfig struct {
	InstanceCount  *int64  `json:"instanceCount,omitempty"`
	InstanceType   *string `json:"instanceType,omitempty"`
	VolumeKMSKeyID *string `json:"volumeKMSKeyID,omitempty"`
	VolumeSizeInGB *int64  `json:"volumeSizeInGB,omitempty"`
}

// Configuration for processing job outputs in Amazon SageMaker Feature Store.
type ProcessingFeatureStoreOutput struct {
	FeatureGroupName *string `json:"featureGroupName,omitempty"`
}

// The inputs for a processing job. The processing input must specify exactly
// one of either S3Input or DatasetDefinition types.
type ProcessingInput struct {
	AppManaged *bool `json:"appManaged,omitempty"`
	// Configuration for Dataset Definition inputs. The Dataset Definition input
	// must specify exactly one of either AthenaDatasetDefinition or RedshiftDatasetDefinition
	// types.
	DatasetDefinition *DatasetDefinition `json:"datasetDefinition,omitempty"`
	InputName         *string            `json:"inputName,omitempty"`
	// Configuration for downloading input data from Amazon S3 into the processing
	// container.
	S3Input *ProcessingS3Input `json:"s3Input,omitempty"`
}

// Metadata for a processing job step.
type ProcessingJobStepMetadata struct {
	ARN *string `json:"arn,omitempty"`
}

// Summary of information about a processing job.
type ProcessingJobSummary struct {
	CreationTime        *metav1.Time `json:"creationTime,omitempty"`
	ExitMessage         *string      `json:"exitMessage,omitempty"`
	FailureReason       *string      `json:"failureReason,omitempty"`
	LastModifiedTime    *metav1.Time `json:"lastModifiedTime,omitempty"`
	ProcessingEndTime   *metav1.Time `json:"processingEndTime,omitempty"`
	ProcessingJobARN    *string      `json:"processingJobARN,omitempty"`
	ProcessingJobName   *string      `json:"processingJobName,omitempty"`
	ProcessingJobStatus *string      `json:"processingJobStatus,omitempty"`
}

// An Amazon SageMaker processing job that is used to analyze data and evaluate
// models. For more information, see Process Data and Evaluate Models (https://docs.aws.amazon.com/sagemaker/latest/dg/processing-job.html).
type ProcessingJob_SDK struct {
	// Configuration to run a processing job in a specified container image.
	AppSpecification *AppSpecification  `json:"appSpecification,omitempty"`
	AutoMLJobARN     *string            `json:"autoMLJobARN,omitempty"`
	CreationTime     *metav1.Time       `json:"creationTime,omitempty"`
	Environment      map[string]*string `json:"environment,omitempty"`
	ExitMessage      *string            `json:"exitMessage,omitempty"`
	// Associates a SageMaker job as a trial component with an experiment and trial.
	// Specified when you call the following APIs:
	//
	//    * CreateProcessingJob (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html)
	//
	//    * CreateTrainingJob (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html)
	//
	//    * CreateTransformJob (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTransformJob.html)
	ExperimentConfig      *ExperimentConfig `json:"experimentConfig,omitempty"`
	FailureReason         *string           `json:"failureReason,omitempty"`
	LastModifiedTime      *metav1.Time      `json:"lastModifiedTime,omitempty"`
	MonitoringScheduleARN *string           `json:"monitoringScheduleARN,omitempty"`
	// Networking options for a job, such as network traffic encryption between
	// containers, whether to allow inbound and outbound network calls to and from
	// containers, and the VPC subnets and security groups to use for VPC-enabled
	// jobs.
	NetworkConfig       *NetworkConfig     `json:"networkConfig,omitempty"`
	ProcessingEndTime   *metav1.Time       `json:"processingEndTime,omitempty"`
	ProcessingInputs    []*ProcessingInput `json:"processingInputs,omitempty"`
	ProcessingJobARN    *string            `json:"processingJobARN,omitempty"`
	ProcessingJobName   *string            `json:"processingJobName,omitempty"`
	ProcessingJobStatus *string            `json:"processingJobStatus,omitempty"`
	// Configuration for uploading output from the processing container.
	ProcessingOutputConfig *ProcessingOutputConfig `json:"processingOutputConfig,omitempty"`
	// Identifies the resources, ML compute instances, and ML storage volumes to
	// deploy for a processing job. In distributed training, you specify more than
	// one instance.
	ProcessingResources *ProcessingResources `json:"processingResources,omitempty"`
	ProcessingStartTime *metav1.Time         `json:"processingStartTime,omitempty"`
	RoleARN             *string              `json:"roleARN,omitempty"`
	// Configures conditions under which the processing job should be stopped, such
	// as how long the processing job has been running. After the condition is met,
	// the processing job is stopped.
	StoppingCondition *ProcessingStoppingCondition `json:"stoppingCondition,omitempty"`
	Tags              []*Tag                       `json:"tags,omitempty"`
	TrainingJobARN    *string                      `json:"trainingJobARN,omitempty"`
}

// Describes the results of a processing job. The processing output must specify
// exactly one of either S3Output or FeatureStoreOutput types.
type ProcessingOutput struct {
	AppManaged *bool `json:"appManaged,omitempty"`
	// Configuration for processing job outputs in Amazon SageMaker Feature Store.
	FeatureStoreOutput *ProcessingFeatureStoreOutput `json:"featureStoreOutput,omitempty"`
	OutputName         *string                       `json:"outputName,omitempty"`
	// Configuration for uploading output data to Amazon S3 from the processing
	// container.
	S3Output *ProcessingS3Output `json:"s3Output,omitempty"`
}

// Configuration for uploading output from the processing container.
type ProcessingOutputConfig struct {
	KMSKeyID *string             `json:"kmsKeyID,omitempty"`
	Outputs  []*ProcessingOutput `json:"outputs,omitempty"`
}

// Identifies the resources, ML compute instances, and ML storage volumes to
// deploy for a processing job. In distributed training, you specify more than
// one instance.
type ProcessingResources struct {
	// Configuration for the cluster used to run a processing job.
	ClusterConfig *ProcessingClusterConfig `json:"clusterConfig,omitempty"`
}

// Configuration for downloading input data from Amazon S3 into the processing
// container.
type ProcessingS3Input struct {
	LocalPath              *string `json:"localPath,omitempty"`
	S3CompressionType      *string `json:"s3CompressionType,omitempty"`
	S3DataDistributionType *string `json:"s3DataDistributionType,omitempty"`
	S3DataType             *string `json:"s3DataType,omitempty"`
	S3InputMode            *string `json:"s3InputMode,omitempty"`
	S3URI                  *string `json:"s3URI,omitempty"`
}

// Configuration for uploading output data to Amazon S3 from the processing
// container.
type ProcessingS3Output struct {
	LocalPath    *string `json:"localPath,omitempty"`
	S3UploadMode *string `json:"s3UploadMode,omitempty"`
	S3URI        *string `json:"s3URI,omitempty"`
}

// Configures conditions under which the processing job should be stopped, such
// as how long the processing job has been running. After the condition is met,
// the processing job is stopped.
type ProcessingStoppingCondition struct {
	MaxRuntimeInSeconds *int64 `json:"maxRuntimeInSeconds,omitempty"`
}

// Identifies a model that you want to host and the resources chosen to deploy
// for hosting it. If you are deploying multiple models, tell SageMaker how
// to distribute traffic among the models by specifying variant weights. For
// more information on production variants, check Production variants (https://docs.aws.amazon.com/sagemaker/latest/dg/model-ab-testing.html).
type ProductionVariant struct {
	AcceleratorType                             *string `json:"acceleratorType,omitempty"`
	ContainerStartupHealthCheckTimeoutInSeconds *int64  `json:"containerStartupHealthCheckTimeoutInSeconds,omitempty"`
	// Specifies configuration for a core dump from the model container when the
	// process crashes.
	CoreDumpConfig       *ProductionVariantCoreDumpConfig `json:"coreDumpConfig,omitempty"`
	EnableSSMAccess      *bool                            `json:"enableSSMAccess,omitempty"`
	InitialInstanceCount *int64                           `json:"initialInstanceCount,omitempty"`
	InitialVariantWeight *float64                         `json:"initialVariantWeight,omitempty"`
	InstanceType         *string                          `json:"instanceType,omitempty"`
	// Settings that control the range in the number of instances that the endpoint
	// provisions as it scales up or down to accommodate traffic.
	ManagedInstanceScaling            *ProductionVariantManagedInstanceScaling `json:"managedInstanceScaling,omitempty"`
	ModelDataDownloadTimeoutInSeconds *int64                                   `json:"modelDataDownloadTimeoutInSeconds,omitempty"`
	ModelName                         *string                                  `json:"modelName,omitempty"`
	// Settings that control how the endpoint routes incoming traffic to the instances
	// that the endpoint hosts.
	RoutingConfig *ProductionVariantRoutingConfig `json:"routingConfig,omitempty"`
	// Specifies the serverless configuration for an endpoint variant.
	ServerlessConfig *ProductionVariantServerlessConfig `json:"serverlessConfig,omitempty"`
	VariantName      *string                            `json:"variantName,omitempty"`
	VolumeSizeInGB   *int64                             `json:"volumeSizeInGB,omitempty"`
}

// Specifies configuration for a core dump from the model container when the
// process crashes.
type ProductionVariantCoreDumpConfig struct {
	DestinationS3URI *string `json:"destinationS3URI,omitempty"`
	KMSKeyID         *string `json:"kmsKeyID,omitempty"`
}

// Settings that control the range in the number of instances that the endpoint
// provisions as it scales up or down to accommodate traffic.
type ProductionVariantManagedInstanceScaling struct {
	MaxInstanceCount *int64  `json:"maxInstanceCount,omitempty"`
	MinInstanceCount *int64  `json:"minInstanceCount,omitempty"`
	Status           *string `json:"status,omitempty"`
}

// Settings that control how the endpoint routes incoming traffic to the instances
// that the endpoint hosts.
type ProductionVariantRoutingConfig struct {
	RoutingStrategy *string `json:"routingStrategy,omitempty"`
}

// Specifies the serverless configuration for an endpoint variant.
type ProductionVariantServerlessConfig struct {
	MaxConcurrency         *int64 `json:"maxConcurrency,omitempty"`
	MemorySizeInMB         *int64 `json:"memorySizeInMB,omitempty"`
	ProvisionedConcurrency *int64 `json:"provisionedConcurrency,omitempty"`
}

// Specifies the serverless update concurrency configuration for an endpoint
// variant.
type ProductionVariantServerlessUpdateConfig struct {
	MaxConcurrency         *int64 `json:"maxConcurrency,omitempty"`
	ProvisionedConcurrency *int64 `json:"provisionedConcurrency,omitempty"`
}

// Describes the status of the production variant.
type ProductionVariantStatus struct {
	StartTime     *metav1.Time `json:"startTime,omitempty"`
	Status        *string      `json:"status,omitempty"`
	StatusMessage *string      `json:"statusMessage,omitempty"`
}

// Describes weight and capacities for a production variant associated with
// an endpoint. If you sent a request to the UpdateEndpointWeightsAndCapacities
// API and the endpoint status is Updating, you get different desired and current
// values.
type ProductionVariantSummary struct {
	CurrentInstanceCount *int64 `json:"currentInstanceCount,omitempty"`
	// Specifies the serverless configuration for an endpoint variant.
	CurrentServerlessConfig *ProductionVariantServerlessConfig `json:"currentServerlessConfig,omitempty"`
	CurrentWeight           *float64                           `json:"currentWeight,omitempty"`
	DeployedImages          []*DeployedImage                   `json:"deployedImages,omitempty"`
	DesiredInstanceCount    *int64                             `json:"desiredInstanceCount,omitempty"`
	// Specifies the serverless configuration for an endpoint variant.
	DesiredServerlessConfig *ProductionVariantServerlessConfig `json:"desiredServerlessConfig,omitempty"`
	DesiredWeight           *float64                           `json:"desiredWeight,omitempty"`
	// Settings that control the range in the number of instances that the endpoint
	// provisions as it scales up or down to accommodate traffic.
	ManagedInstanceScaling *ProductionVariantManagedInstanceScaling `json:"managedInstanceScaling,omitempty"`
	// Settings that control how the endpoint routes incoming traffic to the instances
	// that the endpoint hosts.
	RoutingConfig *ProductionVariantRoutingConfig `json:"routingConfig,omitempty"`
	VariantName   *string                         `json:"variantName,omitempty"`
	VariantStatus []*ProductionVariantStatus      `json:"variantStatus,omitempty"`
}

// Configuration information for Amazon SageMaker Debugger system monitoring,
// framework profiling, and storage paths.
type ProfilerConfig struct {
	ProfilingIntervalInMilliseconds *int64             `json:"profilingIntervalInMilliseconds,omitempty"`
	ProfilingParameters             map[string]*string `json:"profilingParameters,omitempty"`
	S3OutputPath                    *string            `json:"s3OutputPath,omitempty"`
}

// Configuration information for updating the Amazon SageMaker Debugger profile
// parameters, system and framework metrics configurations, and storage paths.
type ProfilerConfigForUpdate struct {
	ProfilingIntervalInMilliseconds *int64             `json:"profilingIntervalInMilliseconds,omitempty"`
	ProfilingParameters             map[string]*string `json:"profilingParameters,omitempty"`
	S3OutputPath                    *string            `json:"s3OutputPath,omitempty"`
}

// Configuration information for profiling rules.
type ProfilerRuleConfiguration struct {
	InstanceType          *string            `json:"instanceType,omitempty"`
	LocalPath             *string            `json:"localPath,omitempty"`
	RuleConfigurationName *string            `json:"ruleConfigurationName,omitempty"`
	RuleEvaluatorImage    *string            `json:"ruleEvaluatorImage,omitempty"`
	RuleParameters        map[string]*string `json:"ruleParameters,omitempty"`
	S3OutputPath          *string            `json:"s3OutputPath,omitempty"`
	VolumeSizeInGB        *int64             `json:"volumeSizeInGB,omitempty"`
}

// Information about the status of the rule evaluation.
type ProfilerRuleEvaluationStatus struct {
	LastModifiedTime      *metav1.Time `json:"lastModifiedTime,omitempty"`
	RuleConfigurationName *string      `json:"ruleConfigurationName,omitempty"`
	RuleEvaluationJobARN  *string      `json:"ruleEvaluationJobARN,omitempty"`
	RuleEvaluationStatus  *string      `json:"ruleEvaluationStatus,omitempty"`
	StatusDetails         *string      `json:"statusDetails,omitempty"`
}

// The properties of a project as returned by the Search API.
type Project struct {
	// Information about the user who created or modified an experiment, trial,
	// trial component, lineage group, project, or model card.
	CreatedBy    *UserContext `json:"createdBy,omitempty"`
	CreationTime *metav1.Time `json:"creationTime,omitempty"`
	// Information about the user who created or modified an experiment, trial,
	// trial component, lineage group, project, or model card.
	LastModifiedBy     *UserContext `json:"lastModifiedBy,omitempty"`
	LastModifiedTime   *metav1.Time `json:"lastModifiedTime,omitempty"`
	ProjectDescription *string      `json:"projectDescription,omitempty"`
	Tags               []*Tag       `json:"tags,omitempty"`
}

// Information about a project.
type ProjectSummary struct {
	CreationTime       *metav1.Time `json:"creationTime,omitempty"`
	ProjectDescription *string      `json:"projectDescription,omitempty"`
}

// Container for the metadata for a Quality check step. For more information,
// see the topic on QualityCheck step (https://docs.aws.amazon.com/sagemaker/latest/dg/build-and-manage-steps.html#step-type-quality-check)
// in the Amazon SageMaker Developer Guide.
type QualityCheckStepMetadata struct {
	BaselineUsedForDriftCheckConstraints *string `json:"baselineUsedForDriftCheckConstraints,omitempty"`
	BaselineUsedForDriftCheckStatistics  *string `json:"baselineUsedForDriftCheckStatistics,omitempty"`
	CalculatedBaselineConstraints        *string `json:"calculatedBaselineConstraints,omitempty"`
	CalculatedBaselineStatistics         *string `json:"calculatedBaselineStatistics,omitempty"`
	CheckJobARN                          *string `json:"checkJobARN,omitempty"`
	CheckType                            *string `json:"checkType,omitempty"`
	ModelPackageGroupName                *string `json:"modelPackageGroupName,omitempty"`
	RegisterNewBaseline                  *bool   `json:"registerNewBaseline,omitempty"`
	SkipCheck                            *bool   `json:"skipCheck,omitempty"`
	ViolationReport                      *string `json:"violationReport,omitempty"`
}

// A set of filters to narrow the set of lineage entities connected to the StartArn(s)
// returned by the QueryLineage API action.
type QueryFilters struct {
	CreatedAfter   *metav1.Time `json:"createdAfter,omitempty"`
	CreatedBefore  *metav1.Time `json:"createdBefore,omitempty"`
	ModifiedAfter  *metav1.Time `json:"modifiedAfter,omitempty"`
	ModifiedBefore *metav1.Time `json:"modifiedBefore,omitempty"`
}

// A collection of settings that configure user interaction with the RStudioServerPro
// app.
type RStudioServerProAppSettings struct {
	AccessStatus *string `json:"accessStatus,omitempty"`
	UserGroup    *string `json:"userGroup,omitempty"`
}

// A collection of settings that configure the RStudioServerPro Domain-level
// app.
type RStudioServerProDomainSettings struct {
	// Specifies the ARN's of a SageMaker image and SageMaker image version, and
	// the instance type that the version runs on.
	DefaultResourceSpec      *ResourceSpec `json:"defaultResourceSpec,omitempty"`
	DomainExecutionRoleARN   *string       `json:"domainExecutionRoleARN,omitempty"`
	RStudioConnectURL        *string       `json:"rStudioConnectURL,omitempty"`
	RStudioPackageManagerURL *string       `json:"rStudioPackageManagerURL,omitempty"`
}

// A collection of settings that update the current configuration for the RStudioServerPro
// Domain-level app.
type RStudioServerProDomainSettingsForUpdate struct {
	// Specifies the ARN's of a SageMaker image and SageMaker image version, and
	// the instance type that the version runs on.
	DefaultResourceSpec      *ResourceSpec `json:"defaultResourceSpec,omitempty"`
	DomainExecutionRoleARN   *string       `json:"domainExecutionRoleARN,omitempty"`
	RStudioConnectURL        *string       `json:"rStudioConnectURL,omitempty"`
	RStudioPackageManagerURL *string       `json:"rStudioPackageManagerURL,omitempty"`
}

// The infrastructure configuration for deploying the model to a real-time inference
// endpoint.
type RealTimeInferenceConfig struct {
	InstanceCount *int64  `json:"instanceCount,omitempty"`
	InstanceType  *string `json:"instanceType,omitempty"`
}

// The recommended configuration to use for Real-Time Inference.
type RealTimeInferenceRecommendation struct {
	Environment      map[string]*string `json:"environment,omitempty"`
	InstanceType     *string            `json:"instanceType,omitempty"`
	RecommendationID *string            `json:"recommendationID,omitempty"`
}

// Provides information about the output configuration for the compiled model.
type RecommendationJobCompiledOutputConfig struct {
	S3OutputURI *string `json:"s3OutputURI,omitempty"`
}

// Specifies mandatory fields for running an Inference Recommender job directly
// in the CreateInferenceRecommendationsJob (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateInferenceRecommendationsJob.html)
// API. The fields specified in ContainerConfig override the corresponding fields
// in the model package. Use ContainerConfig if you want to specify these fields
// for the recommendation job but don't want to edit them in your model package.
type RecommendationJobContainerConfig struct {
	Domain           *string `json:"domain,omitempty"`
	Framework        *string `json:"framework,omitempty"`
	NearestModelName *string `json:"nearestModelName,omitempty"`
	Task             *string `json:"task,omitempty"`
}

// The input configuration of the recommendation job.
type RecommendationJobInputConfig struct {
	ModelName              *string `json:"modelName,omitempty"`
	ModelPackageVersionARN *string `json:"modelPackageVersionARN,omitempty"`
	VolumeKMSKeyID         *string `json:"volumeKMSKeyID,omitempty"`
}

// Provides information about the output configuration for the compiled model.
type RecommendationJobOutputConfig struct {
	KMSKeyID *string `json:"kmsKeyID,omitempty"`
}

// The configuration for the payload for a recommendation job.
type RecommendationJobPayloadConfig struct {
	SamplePayloadURL *string `json:"samplePayloadURL,omitempty"`
}

// Specifies conditions for stopping a job. When a job reaches a stopping condition
// limit, SageMaker ends the job.
type RecommendationJobStoppingConditions struct {
	MaxInvocations *int64 `json:"maxInvocations,omitempty"`
}

// The metrics of recommendations.
type RecommendationMetrics struct {
	CostPerHour      *float64 `json:"costPerHour,omitempty"`
	CostPerInference *float64 `json:"costPerInference,omitempty"`
	MaxInvocations   *int64   `json:"maxInvocations,omitempty"`
	ModelLatency     *int64   `json:"modelLatency,omitempty"`
}

// Configuration for Redshift Dataset Definition input.
type RedshiftDatasetDefinition struct {
	// The Redshift cluster Identifier.
	ClusterID      *string `json:"clusterID,omitempty"`
	ClusterRoleARN *string `json:"clusterRoleARN,omitempty"`
	// The name of the Redshift database used in Redshift query execution.
	Database *string `json:"database,omitempty"`
	// The database user name used in Redshift query execution.
	DBUser   *string `json:"dbUser,omitempty"`
	KMSKeyID *string `json:"kmsKeyID,omitempty"`
	// The compression used for Redshift query results.
	OutputCompression *string `json:"outputCompression,omitempty"`
	// The data storage format for Redshift query results.
	OutputFormat *string `json:"outputFormat,omitempty"`
	OutputS3URI  *string `json:"outputS3URI,omitempty"`
	// The SQL query statements to be executed.
	QueryString *string `json:"queryString,omitempty"`
}

// Metadata for a register model job step.
type RegisterModelStepMetadata struct {
	ARN *string `json:"arn,omitempty"`
}

// Configuration for remote debugging for the CreateTrainingJob (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html)
// API. To learn more about the remote debugging functionality of SageMaker,
// see Access a training container through Amazon Web Services Systems Manager
// (SSM) for remote debugging (https://docs.aws.amazon.com/sagemaker/latest/dg/train-remote-debugging.html).
type RemoteDebugConfig struct {
	EnableRemoteDebug *bool `json:"enableRemoteDebug,omitempty"`
}

// Configuration for remote debugging for the UpdateTrainingJob (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateTrainingJob.html)
// API. To learn more about the remote debugging functionality of SageMaker,
// see Access a training container through Amazon Web Services Systems Manager
// (SSM) for remote debugging (https://docs.aws.amazon.com/sagemaker/latest/dg/train-remote-debugging.html).
type RemoteDebugConfigForUpdate struct {
	EnableRemoteDebug *bool `json:"enableRemoteDebug,omitempty"`
}

// A description of an error that occurred while rendering the template.
type RenderingError struct {
	Code    *string `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// Specifies an authentication configuration for the private docker registry
// where your model image is hosted. Specify a value for this property only
// if you specified Vpc as the value for the RepositoryAccessMode field of the
// ImageConfig object that you passed to a call to CreateModel and the private
// Docker registry where the model image is hosted requires authentication.
type RepositoryAuthConfig struct {
	RepositoryCredentialsProviderARN *string `json:"repositoryCredentialsProviderARN,omitempty"`
}

// A resource catalog containing all of the resources of a specific resource
// type within a resource owner account. For an example on sharing the Amazon
// SageMaker Feature Store DefaultFeatureGroupCatalog, see Share Amazon SageMaker
// Catalog resource type (https://docs.aws.amazon.com/sagemaker/latest/APIReference/feature-store-cross-account-discoverability-share-sagemaker-catalog.html)
// in the Amazon SageMaker Developer Guide.
type ResourceCatalog struct {
	CreationTime *metav1.Time `json:"creationTime,omitempty"`
}

// Describes the resources, including machine learning (ML) compute instances
// and ML storage volumes, to use for model training.
type ResourceConfig struct {
	InstanceCount  *int64           `json:"instanceCount,omitempty"`
	InstanceGroups []*InstanceGroup `json:"instanceGroups,omitempty"`
	InstanceType   *string          `json:"instanceType,omitempty"`
	// Optional. Customer requested period in seconds for which the Training cluster
	// is kept alive after the job is finished.
	KeepAlivePeriodInSeconds *int64  `json:"keepAlivePeriodInSeconds,omitempty"`
	VolumeKMSKeyID           *string `json:"volumeKMSKeyID,omitempty"`
	VolumeSizeInGB           *int64  `json:"volumeSizeInGB,omitempty"`
}

// The ResourceConfig to update KeepAlivePeriodInSeconds. Other fields in the
// ResourceConfig cannot be updated.
type ResourceConfigForUpdate struct {
	// Optional. Customer requested period in seconds for which the Training cluster
	// is kept alive after the job is finished.
	KeepAlivePeriodInSeconds *int64 `json:"keepAlivePeriodInSeconds,omitempty"`
}

// Specifies the maximum number of training jobs and parallel training jobs
// that a hyperparameter tuning job can launch.
type ResourceLimits struct {
	MaxNumberOfTrainingJobs *int64 `json:"maxNumberOfTrainingJobs,omitempty"`
	MaxParallelTrainingJobs *int64 `json:"maxParallelTrainingJobs,omitempty"`
}

// Specifies the ARN's of a SageMaker image and SageMaker image version, and
// the instance type that the version runs on.
type ResourceSpec struct {
	InstanceType               *string `json:"instanceType,omitempty"`
	LifecycleConfigARN         *string `json:"lifecycleConfigARN,omitempty"`
	SageMakerImageARN          *string `json:"sageMakerImageARN,omitempty"`
	SageMakerImageVersionAlias *string `json:"sageMakerImageVersionAlias,omitempty"`
	SageMakerImageVersionARN   *string `json:"sageMakerImageVersionARN,omitempty"`
}

// The retention policy for data stored on an Amazon Elastic File System volume.
type RetentionPolicy struct {
	HomeEFSFileSystem *string `json:"homeEFSFileSystem,omitempty"`
}

// The retry strategy to use when a training job fails due to an InternalServerError.
// RetryStrategy is specified as part of the CreateTrainingJob and CreateHyperParameterTuningJob
// requests. You can add the StoppingCondition parameter to the request to limit
// the training time for the complete job.
type RetryStrategy struct {
	MaximumRetryAttempts *int64 `json:"maximumRetryAttempts,omitempty"`
}

// Specifies a rolling deployment strategy for updating a SageMaker endpoint.
type RollingUpdatePolicy struct {
	// Specifies the type and size of the endpoint capacity to activate for a blue/green
	// deployment, a rolling deployment, or a rollback strategy. You can specify
	// your batches as either instance count or the overall percentage or your fleet.
	//
	// For a rollback strategy, if you don't specify the fields in this object,
	// or if you set the Value to 100%, then SageMaker uses a blue/green rollback
	// strategy and rolls all traffic back to the blue fleet.
	MaximumBatchSize                 *CapacitySize `json:"maximumBatchSize,omitempty"`
	MaximumExecutionTimeoutInSeconds *int64        `json:"maximumExecutionTimeoutInSeconds,omitempty"`
	// Specifies the type and size of the endpoint capacity to activate for a blue/green
	// deployment, a rolling deployment, or a rollback strategy. You can specify
	// your batches as either instance count or the overall percentage or your fleet.
	//
	// For a rollback strategy, if you don't specify the fields in this object,
	// or if you set the Value to 100%, then SageMaker uses a blue/green rollback
	// strategy and rolls all traffic back to the blue fleet.
	RollbackMaximumBatchSize *CapacitySize `json:"rollbackMaximumBatchSize,omitempty"`
	WaitIntervalInSeconds    *int64        `json:"waitIntervalInSeconds,omitempty"`
}

// Describes the S3 data source.
//
// Your input bucket must be in the same Amazon Web Services region as your
// training job.
type S3DataSource struct {
	AttributeNames         []*string `json:"attributeNames,omitempty"`
	InstanceGroupNames     []*string `json:"instanceGroupNames,omitempty"`
	S3DataDistributionType *string   `json:"s3DataDistributionType,omitempty"`
	S3DataType             *string   `json:"s3DataType,omitempty"`
	S3URI                  *string   `json:"s3URI,omitempty"`
}

// Specifies the S3 location of ML model data to deploy.
type S3ModelDataSource struct {
	CompressionType *string `json:"compressionType,omitempty"`
	// The access configuration file to control access to the ML model. You can
	// explicitly accept the model end-user license agreement (EULA) within the
	// ModelAccessConfig.
	//
	//    * If you are a Jumpstart user, see the End-user license agreements (https://docs.aws.amazon.com/sagemaker/latest/dg/jumpstart-foundation-models-choose.html#jumpstart-foundation-models-choose-eula)
	//    section for more details on accepting the EULA.
	//
	//    * If you are an AutoML user, see the Optional Parameters section of Create
	//    an AutoML job to fine-tune text generation models using the API for details
	//    on How to set the EULA acceptance when fine-tuning a model using the AutoML
	//    API (https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-create-experiment-finetune-llms.html#autopilot-llms-finetuning-api-optional-params).
	ModelAccessConfig *ModelAccessConfig `json:"modelAccessConfig,omitempty"`
	S3DataType        *string            `json:"s3DataType,omitempty"`
	S3URI             *string            `json:"s3URI,omitempty"`
}

// The Amazon Simple Storage (Amazon S3) location and and security configuration
// for OfflineStore.
type S3StorageConfig struct {
	KMSKeyID            *string `json:"kmsKeyID,omitempty"`
	ResolvedOutputS3URI *string `json:"resolvedOutputS3URI,omitempty"`
	S3URI               *string `json:"s3URI,omitempty"`
}

// The metric for a scaling policy.
type ScalingPolicyMetric struct {
	InvocationsPerInstance *int64 `json:"invocationsPerInstance,omitempty"`
	ModelLatency           *int64 `json:"modelLatency,omitempty"`
}

// An object where you specify the anticipated traffic pattern for an endpoint.
type ScalingPolicyObjective struct {
	MaxInvocationsPerMinute *int64 `json:"maxInvocationsPerMinute,omitempty"`
	MinInvocationsPerMinute *int64 `json:"minInvocationsPerMinute,omitempty"`
}

// Configuration details about the monitoring schedule.
type ScheduleConfig struct {
	DataAnalysisEndTime   *string `json:"dataAnalysisEndTime,omitempty"`
	DataAnalysisStartTime *string `json:"dataAnalysisStartTime,omitempty"`
	ScheduleExpression    *string `json:"scheduleExpression,omitempty"`
}

// An array element of SecondaryStatusTransitions for DescribeTrainingJob (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeTrainingJob.html).
// It provides additional details about a status that the training job has transitioned
// through. A training job can be in one of several states, for example, starting,
// downloading, training, or uploading. Within each state, there are a number
// of intermediate states. For example, within the starting state, SageMaker
// could be starting the training job or launching the ML instances. These transitional
// states are referred to as the job's secondary status.
type SecondaryStatusTransition struct {
	EndTime       *metav1.Time `json:"endTime,omitempty"`
	StartTime     *metav1.Time `json:"startTime,omitempty"`
	Status        *string      `json:"status,omitempty"`
	StatusMessage *string      `json:"statusMessage,omitempty"`
}

// A step selected to run in selective execution mode.
type SelectedStep struct {
	StepName *string `json:"stepName,omitempty"`
}

// The selective execution configuration applied to the pipeline run.
type SelectiveExecutionConfig struct {
	SelectedSteps              []*SelectedStep `json:"selectedSteps,omitempty"`
	SourcePipelineExecutionARN *string         `json:"sourcePipelineExecutionARN,omitempty"`
}

// The ARN from an execution of the current pipeline.
type SelectiveExecutionResult struct {
	SourcePipelineExecutionARN *string `json:"sourcePipelineExecutionARN,omitempty"`
}

// Specifies options for sharing Amazon SageMaker Studio notebooks. These settings
// are specified as part of DefaultUserSettings when the CreateDomain API is
// called, and as part of UserSettings when the CreateUserProfile API is called.
// When SharingSettings is not specified, notebook sharing isn't allowed.
type SharingSettings struct {
	NotebookOutputOption *string `json:"notebookOutputOption,omitempty"`
	S3KMSKeyID           *string `json:"s3KMSKeyID,omitempty"`
	S3OutputPath         *string `json:"s3OutputPath,omitempty"`
}

// A configuration for a shuffle option for input data in a channel. If you
// use S3Prefix for S3DataType, the results of the S3 key prefix matches are
// shuffled. If you use ManifestFile, the order of the S3 object references
// in the ManifestFile is shuffled. If you use AugmentedManifestFile, the order
// of the JSON lines in the AugmentedManifestFile is shuffled. The shuffling
// order is determined using the Seed value.
//
// For Pipe input mode, when ShuffleConfig is specified shuffling is done at
// the start of every epoch. With large datasets, this ensures that the order
// of the training data is different for each epoch, and it helps reduce bias
// and possible overfitting. In a multi-node training job when ShuffleConfig
// is combined with S3DataDistributionType of ShardedByS3Key, the data is shuffled
// across nodes so that the content sent to a particular node on the first epoch
// might be sent to a different node on the second epoch.
type ShuffleConfig struct {
	Seed *int64 `json:"seed,omitempty"`
}

// Specifies an algorithm that was used to create the model package. The algorithm
// must be either an algorithm resource in your SageMaker account or an algorithm
// in Amazon Web Services Marketplace that you are subscribed to.
type SourceAlgorithm struct {
	AlgorithmName *string `json:"algorithmName,omitempty"`
	ModelDataURL  *string `json:"modelDataURL,omitempty"`
}

// A list of algorithms that were used to create a model package.
type SourceAlgorithmSpecification struct {
	SourceAlgorithms []*SourceAlgorithm `json:"sourceAlgorithms,omitempty"`
}

// The application settings for a Code Editor space.
type SpaceCodeEditorAppSettings struct {
	// Specifies the ARN's of a SageMaker image and SageMaker image version, and
	// the instance type that the version runs on.
	DefaultResourceSpec *ResourceSpec `json:"defaultResourceSpec,omitempty"`
}

// The space's details.
type SpaceDetails struct {
	CreationTime     *metav1.Time `json:"creationTime,omitempty"`
	DomainID         *string      `json:"domainID,omitempty"`
	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`
}

// The settings for the JupyterLab application within a space.
type SpaceJupyterLabAppSettings struct {
	// Specifies the ARN's of a SageMaker image and SageMaker image version, and
	// the instance type that the version runs on.
	DefaultResourceSpec *ResourceSpec `json:"defaultResourceSpec,omitempty"`
}

// A collection of space settings.
type SpaceSettings struct {
	AppType *string `json:"appType,omitempty"`
	// The JupyterServer app settings.
	JupyterServerAppSettings *JupyterServerAppSettings `json:"jupyterServerAppSettings,omitempty"`
	// The KernelGateway app settings.
	KernelGatewayAppSettings *KernelGatewayAppSettings `json:"kernelGatewayAppSettings,omitempty"`
}

// Specifies summary information about the space settings.
type SpaceSettingsSummary struct {
	AppType *string `json:"appType,omitempty"`
}

// Specifies a limit to how long a model training job or model compilation job
// can run. It also specifies how long a managed spot training job has to complete.
// When the job reaches the time limit, SageMaker ends the training or compilation
// job. Use this API to cap model training costs.
//
// To stop a training job, SageMaker sends the algorithm the SIGTERM signal,
// which delays job termination for 120 seconds. Algorithms can use this 120-second
// window to save the model artifacts, so the results of training are not lost.
//
// The training algorithms provided by SageMaker automatically save the intermediate
// results of a model training job when possible. This attempt to save artifacts
// is only a best effort case as model might not be in a state from which it
// can be saved. For example, if training has just started, the model might
// not be ready to save. When saved, this intermediate data is a valid model
// artifact. You can use it to create a model with CreateModel.
//
// The Neural Topic Model (NTM) currently does not support saving intermediate
// model artifacts. When training NTMs, make sure that the maximum runtime is
// sufficient for the training job to complete.
type StoppingCondition struct {
	// Maximum job scheduler pending time in seconds.
	MaxPendingTimeInSeconds *int64 `json:"maxPendingTimeInSeconds,omitempty"`
	MaxRuntimeInSeconds     *int64 `json:"maxRuntimeInSeconds,omitempty"`
	MaxWaitTimeInSeconds    *int64 `json:"maxWaitTimeInSeconds,omitempty"`
}

// Details of the Amazon SageMaker Studio Lifecycle Configuration.
type StudioLifecycleConfigDetails struct {
	CreationTime             *metav1.Time `json:"creationTime,omitempty"`
	LastModifiedTime         *metav1.Time `json:"lastModifiedTime,omitempty"`
	StudioLifecycleConfigARN *string      `json:"studioLifecycleConfigARN,omitempty"`
}

// Describes a work team of a vendor that does the a labelling job.
type SubscribedWorkteam struct {
	ListingID  *string `json:"listingID,omitempty"`
	SellerName *string `json:"sellerName,omitempty"`
}

// Time to live duration, where the record is hard deleted after the expiration
// time is reached; ExpiresAt = EventTime + TtlDuration. For information on
// HardDelete, see the DeleteRecord (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_feature_store_DeleteRecord.html)
// API in the Amazon SageMaker API Reference guide.
type TTLDuration struct {
	Unit  *string `json:"unit,omitempty"`
	Value *int64  `json:"value,omitempty"`
}

// The collection of settings used by an AutoML job V2 for the tabular problem
// type.
type TabularJobConfig struct {
	FeatureSpecificationS3URI *string `json:"featureSpecificationS3URI,omitempty"`
}

// A tag object that consists of a key and an optional value, used to manage
// metadata for SageMaker Amazon Web Services resources.
//
// You can add tags to notebook instances, training jobs, hyperparameter tuning
// jobs, batch transform jobs, models, labeling jobs, work teams, endpoint configurations,
// and endpoints. For more information on adding tags to SageMaker resources,
// see AddTags (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AddTags.html).
//
// For more information on adding metadata to your Amazon Web Services resources
// with tagging, see Tagging Amazon Web Services resources (https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).
// For advice on best practices for managing Amazon Web Services resources with
// tagging, see Tagging Best Practices: Implement an Effective Amazon Web Services
// Resource Tagging Strategy (https://d1.awsstatic.com/whitepapers/aws-tagging-best-practices.pdf).
type Tag struct {
	Key   *string `json:"key,omitempty"`
	Value *string `json:"value,omitempty"`
}

// The TensorBoard app settings.
type TensorBoardAppSettings struct {
	// Specifies the ARN's of a SageMaker image and SageMaker image version, and
	// the instance type that the version runs on.
	DefaultResourceSpec *ResourceSpec `json:"defaultResourceSpec,omitempty"`
}

// Configuration of storage locations for the Amazon SageMaker Debugger TensorBoard
// output data.
type TensorBoardOutputConfig struct {
	LocalPath    *string `json:"localPath,omitempty"`
	S3OutputPath *string `json:"s3OutputPath,omitempty"`
}

// The collection of settings used by an AutoML job V2 for the text generation
// problem type.
//
// The text generation models that support fine-tuning in Autopilot are currently
// accessible exclusively in regions supported by Canvas. Refer to the documentation
// of Canvas for the full list of its supported Regions (https://docs.aws.amazon.com/sagemaker/latest/dg/canvas.html).
type TextGenerationJobConfig struct {
	// The access configuration file to control access to the ML model. You can
	// explicitly accept the model end-user license agreement (EULA) within the
	// ModelAccessConfig.
	//
	//    * If you are a Jumpstart user, see the End-user license agreements (https://docs.aws.amazon.com/sagemaker/latest/dg/jumpstart-foundation-models-choose.html#jumpstart-foundation-models-choose-eula)
	//    section for more details on accepting the EULA.
	//
	//    * If you are an AutoML user, see the Optional Parameters section of Create
	//    an AutoML job to fine-tune text generation models using the API for details
	//    on How to set the EULA acceptance when fine-tuning a model using the AutoML
	//    API (https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-create-experiment-finetune-llms.html#autopilot-llms-finetuning-api-optional-params).
	ModelAccessConfig *ModelAccessConfig `json:"modelAccessConfig,omitempty"`
}

// Used to set feature group throughput configuration. There are two modes:
// ON_DEMAND and PROVISIONED. With on-demand mode, you are charged for data
// reads and writes that your application performs on your feature group. You
// do not need to specify read and write throughput because Feature Store accommodates
// your workloads as they ramp up and down. You can switch a feature group to
// on-demand only once in a 24 hour period. With provisioned throughput mode,
// you specify the read and write capacity per second that you expect your application
// to require, and you are billed based on those limits. Exceeding provisioned
// throughput will result in your requests being throttled.
//
// Note: PROVISIONED throughput mode is supported only for feature groups that
// are offline-only, or use the Standard (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OnlineStoreConfig.html#sagemaker-Type-OnlineStoreConfig-StorageType)
// tier online store.
type ThroughputConfig struct {
	ProvisionedReadCapacityUnits  *int64  `json:"provisionedReadCapacityUnits,omitempty"`
	ProvisionedWriteCapacityUnits *int64  `json:"provisionedWriteCapacityUnits,omitempty"`
	ThroughputMode                *string `json:"throughputMode,omitempty"`
}

// Active throughput configuration of the feature group. There are two modes:
// ON_DEMAND and PROVISIONED. With on-demand mode, you are charged for data
// reads and writes that your application performs on your feature group. You
// do not need to specify read and write throughput because Feature Store accommodates
// your workloads as they ramp up and down. You can switch a feature group to
// on-demand only once in a 24 hour period. With provisioned throughput mode,
// you specify the read and write capacity per second that you expect your application
// to require, and you are billed based on those limits. Exceeding provisioned
// throughput will result in your requests being throttled.
//
// Note: PROVISIONED throughput mode is supported only for feature groups that
// are offline-only, or use the Standard (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OnlineStoreConfig.html#sagemaker-Type-OnlineStoreConfig-StorageType)
// tier online store.
type ThroughputConfigDescription struct {
	ProvisionedReadCapacityUnits  *int64  `json:"provisionedReadCapacityUnits,omitempty"`
	ProvisionedWriteCapacityUnits *int64  `json:"provisionedWriteCapacityUnits,omitempty"`
	ThroughputMode                *string `json:"throughputMode,omitempty"`
}

// The new throughput configuration for the feature group. You can switch between
// on-demand and provisioned modes or update the read / write capacity of provisioned
// feature groups. You can switch a feature group to on-demand only once in
// a 24 hour period.
type ThroughputConfigUpdate struct {
	ProvisionedReadCapacityUnits  *int64  `json:"provisionedReadCapacityUnits,omitempty"`
	ProvisionedWriteCapacityUnits *int64  `json:"provisionedWriteCapacityUnits,omitempty"`
	ThroughputMode                *string `json:"throughputMode,omitempty"`
}

// The collection of settings used by an AutoML job V2 for the time-series forecasting
// problem type.
type TimeSeriesForecastingJobConfig struct {
	FeatureSpecificationS3URI *string `json:"featureSpecificationS3URI,omitempty"`
}

// Time series forecast settings for the SageMaker Canvas application.
type TimeSeriesForecastingSettings struct {
	AmazonForecastRoleARN *string `json:"amazonForecastRoleARN,omitempty"`
	Status                *string `json:"status,omitempty"`
}

// Defines the traffic routing strategy during an endpoint deployment to shift
// traffic from the old fleet to the new fleet.
type TrafficRoutingConfig struct {
	// Specifies the type and size of the endpoint capacity to activate for a blue/green
	// deployment, a rolling deployment, or a rollback strategy. You can specify
	// your batches as either instance count or the overall percentage or your fleet.
	//
	// For a rollback strategy, if you don't specify the fields in this object,
	// or if you set the Value to 100%, then SageMaker uses a blue/green rollback
	// strategy and rolls all traffic back to the blue fleet.
	CanarySize *CapacitySize `json:"canarySize,omitempty"`
	// Specifies the type and size of the endpoint capacity to activate for a blue/green
	// deployment, a rolling deployment, or a rollback strategy. You can specify
	// your batches as either instance count or the overall percentage or your fleet.
	//
	// For a rollback strategy, if you don't specify the fields in this object,
	// or if you set the Value to 100%, then SageMaker uses a blue/green rollback
	// strategy and rolls all traffic back to the blue fleet.
	LinearStepSize        *CapacitySize `json:"linearStepSize,omitempty"`
	Type                  *string       `json:"type_,omitempty"`
	WaitIntervalInSeconds *int64        `json:"waitIntervalInSeconds,omitempty"`
}

// Defines the input needed to run a training job using the algorithm.
type TrainingJobDefinition struct {
	HyperParameters map[string]*string `json:"hyperParameters,omitempty"`
	InputDataConfig []*Channel         `json:"inputDataConfig,omitempty"`
	// Provides information about how to store model training results (model artifacts).
	OutputDataConfig *OutputDataConfig `json:"outputDataConfig,omitempty"`
	// Describes the resources, including machine learning (ML) compute instances
	// and ML storage volumes, to use for model training.
	ResourceConfig *ResourceConfig `json:"resourceConfig,omitempty"`
	// Specifies a limit to how long a model training job or model compilation job
	// can run. It also specifies how long a managed spot training job has to complete.
	// When the job reaches the time limit, SageMaker ends the training or compilation
	// job. Use this API to cap model training costs.
	//
	// To stop a training job, SageMaker sends the algorithm the SIGTERM signal,
	// which delays job termination for 120 seconds. Algorithms can use this 120-second
	// window to save the model artifacts, so the results of training are not lost.
	//
	// The training algorithms provided by SageMaker automatically save the intermediate
	// results of a model training job when possible. This attempt to save artifacts
	// is only a best effort case as model might not be in a state from which it
	// can be saved. For example, if training has just started, the model might
	// not be ready to save. When saved, this intermediate data is a valid model
	// artifact. You can use it to create a model with CreateModel.
	//
	// The Neural Topic Model (NTM) currently does not support saving intermediate
	// model artifacts. When training NTMs, make sure that the maximum runtime is
	// sufficient for the training job to complete.
	StoppingCondition *StoppingCondition `json:"stoppingCondition,omitempty"`
	// The training input mode that the algorithm supports. For more information
	// about input modes, see Algorithms (https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html).
	//
	// Pipe mode
	//
	// If an algorithm supports Pipe mode, Amazon SageMaker streams data directly
	// from Amazon S3 to the container.
	//
	// File mode
	//
	// If an algorithm supports File mode, SageMaker downloads the training data
	// from S3 to the provisioned ML storage volume, and mounts the directory to
	// the Docker volume for the training container.
	//
	// You must provision the ML storage volume with sufficient capacity to accommodate
	// the data downloaded from S3. In addition to the training data, the ML storage
	// volume also stores the output model. The algorithm container uses the ML
	// storage volume to also store intermediate information, if any.
	//
	// For distributed algorithms, training data is distributed uniformly. Your
	// training duration is predictable if the input data objects sizes are approximately
	// the same. SageMaker does not split the files any further for model training.
	// If the object sizes are skewed, training won't be optimal as the data distribution
	// is also skewed when one host in a training cluster is overloaded, thus becoming
	// a bottleneck in training.
	//
	// FastFile mode
	//
	// If an algorithm supports FastFile mode, SageMaker streams data directly from
	// S3 to the container with no code changes, and provides file system access
	// to the data. Users can author their training script to interact with these
	// files as if they were stored on disk.
	//
	// FastFile mode works best when the data is read sequentially. Augmented manifest
	// files aren't supported. The startup time is lower when there are fewer files
	// in the S3 bucket provided.
	TrainingInputMode *string `json:"trainingInputMode,omitempty"`
}

// The numbers of training jobs launched by a hyperparameter tuning job, categorized
// by status.
type TrainingJobStatusCounters struct {
	Completed         *int64 `json:"completed,omitempty"`
	InProgress        *int64 `json:"inProgress,omitempty"`
	NonRetryableError *int64 `json:"nonRetryableError,omitempty"`
	RetryableError    *int64 `json:"retryableError,omitempty"`
	Stopped           *int64 `json:"stopped,omitempty"`
}

// Metadata for a training job step.
type TrainingJobStepMetadata struct {
	ARN *string `json:"arn,omitempty"`
}

// Provides summary information about a training job.
type TrainingJobSummary struct {
	CreationTime      *metav1.Time `json:"creationTime,omitempty"`
	LastModifiedTime  *metav1.Time `json:"lastModifiedTime,omitempty"`
	TrainingEndTime   *metav1.Time `json:"trainingEndTime,omitempty"`
	TrainingJobARN    *string      `json:"trainingJobARN,omitempty"`
	TrainingJobName   *string      `json:"trainingJobName,omitempty"`
	TrainingJobStatus *string      `json:"trainingJobStatus,omitempty"`
	// Status and billing information about the warm pool.
	WarmPoolStatus *WarmPoolStatus `json:"warmPoolStatus,omitempty"`
}

// Contains information about a training job.
type TrainingJob_SDK struct {
	// Specifies the training algorithm to use in a CreateTrainingJob (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html)
	// request.
	//
	// For more information about algorithms provided by SageMaker, see Algorithms
	// (https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html). For information
	// about using your own algorithms, see Using Your Own Algorithms with Amazon
	// SageMaker (https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html).
	AlgorithmSpecification *AlgorithmSpecification `json:"algorithmSpecification,omitempty"`
	AutoMLJobARN           *string                 `json:"autoMLJobARN,omitempty"`
	BillableTimeInSeconds  *int64                  `json:"billableTimeInSeconds,omitempty"`
	// Contains information about the output location for managed spot training
	// checkpoint data.
	CheckpointConfig *CheckpointConfig `json:"checkpointConfig,omitempty"`
	CreationTime     *metav1.Time      `json:"creationTime,omitempty"`
	// Configuration information for the Amazon SageMaker Debugger hook parameters,
	// metric and tensor collections, and storage paths. To learn more about how
	// to configure the DebugHookConfig parameter, see Use the SageMaker and Debugger
	// Configuration API Operations to Create, Update, and Debug Your Training Job
	// (https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html).
	DebugHookConfig                       *DebugHookConfig             `json:"debugHookConfig,omitempty"`
	DebugRuleConfigurations               []*DebugRuleConfiguration    `json:"debugRuleConfigurations,omitempty"`
	DebugRuleEvaluationStatuses           []*DebugRuleEvaluationStatus `json:"debugRuleEvaluationStatuses,omitempty"`
	EnableInterContainerTrafficEncryption *bool                        `json:"enableInterContainerTrafficEncryption,omitempty"`
	EnableManagedSpotTraining             *bool                        `json:"enableManagedSpotTraining,omitempty"`
	EnableNetworkIsolation                *bool                        `json:"enableNetworkIsolation,omitempty"`
	Environment                           map[string]*string           `json:"environment,omitempty"`
	// Associates a SageMaker job as a trial component with an experiment and trial.
	// Specified when you call the following APIs:
	//
	//    * CreateProcessingJob (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html)
	//
	//    * CreateTrainingJob (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html)
	//
	//    * CreateTransformJob (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTransformJob.html)
	ExperimentConfig    *ExperimentConfig  `json:"experimentConfig,omitempty"`
	FailureReason       *string            `json:"failureReason,omitempty"`
	FinalMetricDataList []*MetricData      `json:"finalMetricDataList,omitempty"`
	HyperParameters     map[string]*string `json:"hyperParameters,omitempty"`
	InputDataConfig     []*Channel         `json:"inputDataConfig,omitempty"`
	LabelingJobARN      *string            `json:"labelingJobARN,omitempty"`
	LastModifiedTime    *metav1.Time       `json:"lastModifiedTime,omitempty"`
	// Provides information about the location that is configured for storing model
	// artifacts.
	//
	// Model artifacts are the output that results from training a model, and typically
	// consist of trained parameters, a model definition that describes how to compute
	// inferences, and other metadata.
	ModelArtifacts *ModelArtifacts `json:"modelArtifacts,omitempty"`
	// Provides information about how to store model training results (model artifacts).
	OutputDataConfig *OutputDataConfig `json:"outputDataConfig,omitempty"`
	// Configuration information for Amazon SageMaker Debugger system monitoring,
	// framework profiling, and storage paths.
	ProfilerConfig *ProfilerConfig `json:"profilerConfig,omitempty"`
	// Describes the resources, including machine learning (ML) compute instances
	// and ML storage volumes, to use for model training.
	ResourceConfig *ResourceConfig `json:"resourceConfig,omitempty"`
	// The retry strategy to use when a training job fails due to an InternalServerError.
	// RetryStrategy is specified as part of the CreateTrainingJob and CreateHyperParameterTuningJob
	// requests. You can add the StoppingCondition parameter to the request to limit
	// the training time for the complete job.
	RetryStrategy              *RetryStrategy               `json:"retryStrategy,omitempty"`
	RoleARN                    *string                      `json:"roleARN,omitempty"`
	SecondaryStatus            *string                      `json:"secondaryStatus,omitempty"`
	SecondaryStatusTransitions []*SecondaryStatusTransition `json:"secondaryStatusTransitions,omitempty"`
	// Specifies a limit to how long a model training job or model compilation job
	// can run. It also specifies how long a managed spot training job has to complete.
	// When the job reaches the time limit, SageMaker ends the training or compilation
	// job. Use this API to cap model training costs.
	//
	// To stop a training job, SageMaker sends the algorithm the SIGTERM signal,
	// which delays job termination for 120 seconds. Algorithms can use this 120-second
	// window to save the model artifacts, so the results of training are not lost.
	//
	// The training algorithms provided by SageMaker automatically save the intermediate
	// results of a model training job when possible. This attempt to save artifacts
	// is only a best effort case as model might not be in a state from which it
	// can be saved. For example, if training has just started, the model might
	// not be ready to save. When saved, this intermediate data is a valid model
	// artifact. You can use it to create a model with CreateModel.
	//
	// The Neural Topic Model (NTM) currently does not support saving intermediate
	// model artifacts. When training NTMs, make sure that the maximum runtime is
	// sufficient for the training job to complete.
	StoppingCondition *StoppingCondition `json:"stoppingCondition,omitempty"`
	Tags              []*Tag             `json:"tags,omitempty"`
	// Configuration of storage locations for the Amazon SageMaker Debugger TensorBoard
	// output data.
	TensorBoardOutputConfig *TensorBoardOutputConfig `json:"tensorBoardOutputConfig,omitempty"`
	TrainingEndTime         *metav1.Time             `json:"trainingEndTime,omitempty"`
	TrainingJobARN          *string                  `json:"trainingJobARN,omitempty"`
	TrainingJobName         *string                  `json:"trainingJobName,omitempty"`
	TrainingJobStatus       *string                  `json:"trainingJobStatus,omitempty"`
	TrainingStartTime       *metav1.Time             `json:"trainingStartTime,omitempty"`
	TrainingTimeInSeconds   *int64                   `json:"trainingTimeInSeconds,omitempty"`
	TuningJobARN            *string                  `json:"tuningJobARN,omitempty"`
	// Specifies an Amazon Virtual Private Cloud (VPC) that your SageMaker jobs,
	// hosted models, and compute resources have access to. You can control access
	// to and from your resources by configuring a VPC. For more information, see
	// Give SageMaker Access to Resources in your Amazon VPC (https://docs.aws.amazon.com/sagemaker/latest/dg/infrastructure-give-access.html).
	VPCConfig *VPCConfig `json:"vpcConfig,omitempty"`
}

// Defines how the algorithm is used for a training job.
type TrainingSpecification struct {
	// A data source used for training or inference that is in addition to the input
	// dataset or model data.
	AdditionalS3DataSource      *AdditionalS3DataSource `json:"additionalS3DataSource,omitempty"`
	MetricDefinitions           []*MetricDefinition     `json:"metricDefinitions,omitempty"`
	SupportsDistributedTraining *bool                   `json:"supportsDistributedTraining,omitempty"`
	TrainingImage               *string                 `json:"trainingImage,omitempty"`
	TrainingImageDigest         *string                 `json:"trainingImageDigest,omitempty"`
}

// Describes the location of the channel data.
type TransformDataSource struct {
	// Describes the S3 data source.
	S3DataSource *TransformS3DataSource `json:"s3DataSource,omitempty"`
}

// Describes the input source of a transform job and the way the transform job
// consumes it.
type TransformInput struct {
	CompressionType *string `json:"compressionType,omitempty"`
	ContentType     *string `json:"contentType,omitempty"`
	// Describes the location of the channel data.
	DataSource *TransformDataSource `json:"dataSource,omitempty"`
	SplitType  *string              `json:"splitType,omitempty"`
}

// Defines the input needed to run a transform job using the inference specification
// specified in the algorithm.
type TransformJobDefinition struct {
	BatchStrategy           *string            `json:"batchStrategy,omitempty"`
	Environment             map[string]*string `json:"environment,omitempty"`
	MaxConcurrentTransforms *int64             `json:"maxConcurrentTransforms,omitempty"`
	MaxPayloadInMB          *int64             `json:"maxPayloadInMB,omitempty"`
	// Describes the input source of a transform job and the way the transform job
	// consumes it.
	TransformInput *TransformInput `json:"transformInput,omitempty"`
	// Describes the results of a transform job.
	TransformOutput *TransformOutput `json:"transformOutput,omitempty"`
	// Describes the resources, including ML instance types and ML instance count,
	// to use for transform job.
	TransformResources *TransformResources `json:"transformResources,omitempty"`
}

// Metadata for a transform job step.
type TransformJobStepMetadata struct {
	ARN *string `json:"arn,omitempty"`
}

// Provides a summary of a transform job. Multiple TransformJobSummary objects
// are returned as a list after in response to a ListTransformJobs (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListTransformJobs.html)
// call.
type TransformJobSummary struct {
	CreationTime       *metav1.Time `json:"creationTime,omitempty"`
	FailureReason      *string      `json:"failureReason,omitempty"`
	LastModifiedTime   *metav1.Time `json:"lastModifiedTime,omitempty"`
	TransformEndTime   *metav1.Time `json:"transformEndTime,omitempty"`
	TransformJobARN    *string      `json:"transformJobARN,omitempty"`
	TransformJobName   *string      `json:"transformJobName,omitempty"`
	TransformJobStatus *string      `json:"transformJobStatus,omitempty"`
}

// A batch transform job. For information about SageMaker batch transform, see
// Use Batch Transform (https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform.html).
type TransformJob_SDK struct {
	AutoMLJobARN  *string      `json:"autoMLJobARN,omitempty"`
	BatchStrategy *string      `json:"batchStrategy,omitempty"`
	CreationTime  *metav1.Time `json:"creationTime,omitempty"`
	// The data structure used to specify the data to be used for inference in a
	// batch transform job and to associate the data that is relevant to the prediction
	// results in the output. The input filter provided allows you to exclude input
	// data that is not needed for inference in a batch transform job. The output
	// filter provided allows you to include input data relevant to interpreting
	// the predictions in the output from the job. For more information, see Associate
	// Prediction Results with their Corresponding Input Records (https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html).
	DataProcessing *DataProcessing    `json:"dataProcessing,omitempty"`
	Environment    map[string]*string `json:"environment,omitempty"`
	// Associates a SageMaker job as a trial component with an experiment and trial.
	// Specified when you call the following APIs:
	//
	//    * CreateProcessingJob (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html)
	//
	//    * CreateTrainingJob (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html)
	//
	//    * CreateTransformJob (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTransformJob.html)
	ExperimentConfig        *ExperimentConfig `json:"experimentConfig,omitempty"`
	FailureReason           *string           `json:"failureReason,omitempty"`
	LabelingJobARN          *string           `json:"labelingJobARN,omitempty"`
	MaxConcurrentTransforms *int64            `json:"maxConcurrentTransforms,omitempty"`
	MaxPayloadInMB          *int64            `json:"maxPayloadInMB,omitempty"`
	// Configures the timeout and maximum number of retries for processing a transform
	// job invocation.
	ModelClientConfig *ModelClientConfig `json:"modelClientConfig,omitempty"`
	ModelName         *string            `json:"modelName,omitempty"`
	Tags              []*Tag             `json:"tags,omitempty"`
	TransformEndTime  *metav1.Time       `json:"transformEndTime,omitempty"`
	// Describes the input source of a transform job and the way the transform job
	// consumes it.
	TransformInput     *TransformInput `json:"transformInput,omitempty"`
	TransformJobARN    *string         `json:"transformJobARN,omitempty"`
	TransformJobName   *string         `json:"transformJobName,omitempty"`
	TransformJobStatus *string         `json:"transformJobStatus,omitempty"`
	// Describes the results of a transform job.
	TransformOutput *TransformOutput `json:"transformOutput,omitempty"`
	// Describes the resources, including ML instance types and ML instance count,
	// to use for transform job.
	TransformResources *TransformResources `json:"transformResources,omitempty"`
	TransformStartTime *metav1.Time        `json:"transformStartTime,omitempty"`
}

// Describes the results of a transform job.
type TransformOutput struct {
	Accept       *string `json:"accept,omitempty"`
	AssembleWith *string `json:"assembleWith,omitempty"`
	KMSKeyID     *string `json:"kmsKeyID,omitempty"`
	S3OutputPath *string `json:"s3OutputPath,omitempty"`
}

// Describes the resources, including ML instance types and ML instance count,
// to use for transform job.
type TransformResources struct {
	InstanceCount  *int64  `json:"instanceCount,omitempty"`
	InstanceType   *string `json:"instanceType,omitempty"`
	VolumeKMSKeyID *string `json:"volumeKMSKeyID,omitempty"`
}

// Describes the S3 data source.
type TransformS3DataSource struct {
	S3DataType *string `json:"s3DataType,omitempty"`
	S3URI      *string `json:"s3URI,omitempty"`
}

// The properties of a trial as returned by the Search (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html)
// API.
type Trial struct {
	// Information about the user who created or modified an experiment, trial,
	// trial component, lineage group, project, or model card.
	CreatedBy      *UserContext `json:"createdBy,omitempty"`
	CreationTime   *metav1.Time `json:"creationTime,omitempty"`
	DisplayName    *string      `json:"displayName,omitempty"`
	ExperimentName *string      `json:"experimentName,omitempty"`
	// Information about the user who created or modified an experiment, trial,
	// trial component, lineage group, project, or model card.
	LastModifiedBy   *UserContext `json:"lastModifiedBy,omitempty"`
	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`
	// Metadata properties of the tracking entity, trial, or trial component.
	MetadataProperties *MetadataProperties `json:"metadataProperties,omitempty"`
	Tags               []*Tag              `json:"tags,omitempty"`
	TrialName          *string             `json:"trialName,omitempty"`
}

// The properties of a trial component as returned by the Search (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html)
// API.
type TrialComponent struct {
	// Information about the user who created or modified an experiment, trial,
	// trial component, lineage group, project, or model card.
	CreatedBy    *UserContext `json:"createdBy,omitempty"`
	CreationTime *metav1.Time `json:"creationTime,omitempty"`
	DisplayName  *string      `json:"displayName,omitempty"`
	EndTime      *metav1.Time `json:"endTime,omitempty"`
	// Information about the user who created or modified an experiment, trial,
	// trial component, lineage group, project, or model card.
	LastModifiedBy   *UserContext `json:"lastModifiedBy,omitempty"`
	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`
	// Metadata properties of the tracking entity, trial, or trial component.
	MetadataProperties *MetadataProperties `json:"metadataProperties,omitempty"`
	RunName            *string             `json:"runName,omitempty"`
	StartTime          *metav1.Time        `json:"startTime,omitempty"`
	Tags               []*Tag              `json:"tags,omitempty"`
	TrialComponentName *string             `json:"trialComponentName,omitempty"`
}

// A summary of the metrics of a trial component.
type TrialComponentMetricSummary struct {
	MetricName *string      `json:"metricName,omitempty"`
	TimeStamp  *metav1.Time `json:"timeStamp,omitempty"`
}

// A short summary of a trial component.
type TrialComponentSimpleSummary struct {
	// Information about the user who created or modified an experiment, trial,
	// trial component, lineage group, project, or model card.
	CreatedBy          *UserContext `json:"createdBy,omitempty"`
	CreationTime       *metav1.Time `json:"creationTime,omitempty"`
	TrialComponentName *string      `json:"trialComponentName,omitempty"`
}

// A summary of the properties of a trial component. To get all the properties,
// call the DescribeTrialComponent (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeTrialComponent.html)
// API and provide the TrialComponentName.
type TrialComponentSummary struct {
	// Information about the user who created or modified an experiment, trial,
	// trial component, lineage group, project, or model card.
	CreatedBy    *UserContext `json:"createdBy,omitempty"`
	CreationTime *metav1.Time `json:"creationTime,omitempty"`
	DisplayName  *string      `json:"displayName,omitempty"`
	EndTime      *metav1.Time `json:"endTime,omitempty"`
	// Information about the user who created or modified an experiment, trial,
	// trial component, lineage group, project, or model card.
	LastModifiedBy     *UserContext `json:"lastModifiedBy,omitempty"`
	LastModifiedTime   *metav1.Time `json:"lastModifiedTime,omitempty"`
	StartTime          *metav1.Time `json:"startTime,omitempty"`
	TrialComponentName *string      `json:"trialComponentName,omitempty"`
}

// A summary of the properties of a trial. To get the complete set of properties,
// call the DescribeTrial (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeTrial.html)
// API and provide the TrialName.
type TrialSummary struct {
	CreationTime     *metav1.Time `json:"creationTime,omitempty"`
	DisplayName      *string      `json:"displayName,omitempty"`
	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`
	TrialName        *string      `json:"trialName,omitempty"`
}

// The job completion criteria.
type TuningJobCompletionCriteria struct {
	TargetObjectiveMetricValue *float64 `json:"targetObjectiveMetricValue,omitempty"`
}

// Metadata for a tuning step.
type TuningJobStepMetaData struct {
	ARN *string `json:"arn,omitempty"`
}

// Provided configuration information for the worker UI for a labeling job.
// Provide either HumanTaskUiArn or UiTemplateS3Uri.
//
// For named entity recognition, 3D point cloud and video frame labeling jobs,
// use HumanTaskUiArn.
//
// For all other Ground Truth built-in task types and custom task types, use
// UiTemplateS3Uri to specify the location of a worker task template in Amazon
// S3.
type UiConfig struct {
	UiTemplateS3URI *string `json:"uiTemplateS3URI,omitempty"`
}

// Information about the user who created or modified an experiment, trial,
// trial component, lineage group, project, or model card.
type UserContext struct {
	DomainID *string `json:"domainID,omitempty"`
	// The IAM Identity details associated with the user. These details are associated
	// with model package groups, model packages and project entities only.
	IAMIdentity     *IAMIdentity `json:"iamIdentity,omitempty"`
	UserProfileARN  *string      `json:"userProfileARN,omitempty"`
	UserProfileName *string      `json:"userProfileName,omitempty"`
}

// The user profile details.
type UserProfileDetails struct {
	CreationTime     *metav1.Time `json:"creationTime,omitempty"`
	DomainID         *string      `json:"domainID,omitempty"`
	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`
	Status           *string      `json:"status,omitempty"`
	UserProfileName  *string      `json:"userProfileName,omitempty"`
}

// A collection of settings that apply to users in a domain. These settings
// are specified when the CreateUserProfile API is called, and as DefaultUserSettings
// when the CreateDomain API is called.
//
// SecurityGroups is aggregated when specified in both calls. For all other
// settings in UserSettings, the values specified in CreateUserProfile take
// precedence over those specified in CreateDomain.
type UserSettings struct {
	// The Code Editor application settings.
	//
	// For more information about Code Editor, see Get started with Code Editor
	// in Amazon SageMaker (https://docs.aws.amazon.com/sagemaker/latest/dg/code-editor.html).
	CodeEditorAppSettings   *CodeEditorAppSettings    `json:"codeEditorAppSettings,omitempty"`
	CustomFileSystemConfigs []*CustomFileSystemConfig `json:"customFileSystemConfigs,omitempty"`
	// Details about the POSIX identity that is used for file system operations.
	CustomPosixUserConfig *CustomPosixUserConfig `json:"customPosixUserConfig,omitempty"`
	DefaultLandingURI     *string                `json:"defaultLandingURI,omitempty"`
	ExecutionRole         *string                `json:"executionRole,omitempty"`
	// The settings for the JupyterLab application.
	JupyterLabAppSettings *JupyterLabAppSettings `json:"jupyterLabAppSettings,omitempty"`
	// The JupyterServer app settings.
	JupyterServerAppSettings *JupyterServerAppSettings `json:"jupyterServerAppSettings,omitempty"`
	// The KernelGateway app settings.
	KernelGatewayAppSettings *KernelGatewayAppSettings `json:"kernelGatewayAppSettings,omitempty"`
	// A collection of settings that configure user interaction with the RStudioServerPro
	// app.
	RStudioServerProAppSettings *RStudioServerProAppSettings `json:"rStudioServerProAppSettings,omitempty"`
	SecurityGroups              []*string                    `json:"securityGroups,omitempty"`
	// Specifies options for sharing Amazon SageMaker Studio notebooks. These settings
	// are specified as part of DefaultUserSettings when the CreateDomain API is
	// called, and as part of UserSettings when the CreateUserProfile API is called.
	// When SharingSettings is not specified, notebook sharing isn't allowed.
	SharingSettings *SharingSettings `json:"sharingSettings,omitempty"`
	// The default storage settings for a private space.
	SpaceStorageSettings *DefaultSpaceStorageSettings `json:"spaceStorageSettings,omitempty"`
	StudioWebPortal      *string                      `json:"studioWebPortal,omitempty"`
	// The TensorBoard app settings.
	TensorBoardAppSettings *TensorBoardAppSettings `json:"tensorBoardAppSettings,omitempty"`
}

// Specifies an Amazon Virtual Private Cloud (VPC) that your SageMaker jobs,
// hosted models, and compute resources have access to. You can control access
// to and from your resources by configuring a VPC. For more information, see
// Give SageMaker Access to Resources in your Amazon VPC (https://docs.aws.amazon.com/sagemaker/latest/dg/infrastructure-give-access.html).
type VPCConfig struct {
	SecurityGroupIDs []*string `json:"securityGroupIDs,omitempty"`
	Subnets          []*string `json:"subnets,omitempty"`
}

// Specifies a production variant property type for an Endpoint.
//
// If you are updating an endpoint with the RetainAllVariantProperties option
// of UpdateEndpointInput (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateEndpoint.html)
// set to true, the VariantProperty objects listed in the ExcludeRetainedVariantProperties
// parameter of UpdateEndpointInput (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateEndpoint.html)
// override the existing variant properties of the endpoint.
type VariantProperty struct {
	VariantPropertyType *string `json:"variantPropertyType,omitempty"`
}

// Configuration for your vector collection type.
type VectorConfig struct {
	Dimension *int64 `json:"dimension,omitempty"`
}

// Status and billing information about the warm pool.
type WarmPoolStatus struct {
	// Optional. Indicates how many seconds the resource stayed in ResourceRetained
	// state. Populated only after resource reaches ResourceReused or ResourceReleased
	// state.
	ResourceRetainedBillableTimeInSeconds *int64  `json:"resourceRetainedBillableTimeInSeconds,omitempty"`
	ReusedByJob                           *string `json:"reusedByJob,omitempty"`
	Status                                *string `json:"status,omitempty"`
}

// A single private workforce, which is automatically created when you create
// your first private work team. You can create one private work force in each
// Amazon Web Services Region. By default, any workforce-related API operation
// used in a specific region will apply to the workforce created in that region.
// To learn how to create a private workforce, see Create a Private Workforce
// (https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private.html).
type Workforce struct {
	CreateDate      *metav1.Time `json:"createDate,omitempty"`
	LastUpdatedDate *metav1.Time `json:"lastUpdatedDate,omitempty"`
	SubDomain       *string      `json:"subDomain,omitempty"`
}

// The workspace settings for the SageMaker Canvas application.
type WorkspaceSettings struct {
	S3ArtifactPath *string `json:"s3ArtifactPath,omitempty"`
	S3KMSKeyID     *string `json:"s3KMSKeyID,omitempty"`
}

// Provides details about a labeling work team.
type Workteam struct {
	CreateDate      *metav1.Time `json:"createDate,omitempty"`
	LastUpdatedDate *metav1.Time `json:"lastUpdatedDate,omitempty"`
	SubDomain       *string      `json:"subDomain,omitempty"`
}
