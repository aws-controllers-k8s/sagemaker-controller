// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// DomainSpec defines the desired state of Domain.
type DomainSpec struct {
	// Specifies the VPC used for non-EFS traffic. The default value is PublicInternetOnly.
	//
	//    * PublicInternetOnly - Non-EFS traffic is through a VPC managed by Amazon
	//    SageMaker, which allows direct internet access
	//
	//    * VpcOnly - All Studio traffic is through the specified VPC and subnets
	AppNetworkAccessType *string `json:"appNetworkAccessType,omitempty"`
	// The entity that creates and manages the required security groups for inter-app
	// communication in VPCOnly mode. Required when CreateDomain.AppNetworkAccessType
	// is VPCOnly and DomainSettings.RStudioServerProDomainSettings.DomainExecutionRoleArn
	// is provided.
	AppSecurityGroupManagement *string `json:"appSecurityGroupManagement,omitempty"`
	// The mode of authentication that members use to access the domain.
	// +kubebuilder:validation:Required
	AuthMode *string `json:"authMode"`
	// The default settings to use to create a user profile when UserSettings isn't
	// specified in the call to the CreateUserProfile API.
	//
	// SecurityGroups is aggregated when specified in both calls. For all other
	// settings in UserSettings, the values specified in CreateUserProfile take
	// precedence over those specified in CreateDomain.
	// +kubebuilder:validation:Required
	DefaultUserSettings *UserSettings `json:"defaultUserSettings"`
	// A name for the domain.
	// +kubebuilder:validation:Required
	DomainName *string `json:"domainName"`
	// A collection of Domain settings.
	DomainSettings *DomainSettings `json:"domainSettings,omitempty"`
	// Use KmsKeyId.
	HomeEFSFileSystemKMSKeyID *string `json:"homeEFSFileSystemKMSKeyID,omitempty"`
	// SageMaker uses Amazon Web Services KMS to encrypt the EFS volume attached
	// to the domain with an Amazon Web Services managed key by default. For more
	// control, specify a customer managed key.
	KMSKeyID *string `json:"kmsKeyID,omitempty"`
	// The VPC subnets that Studio uses for communication.
	// +kubebuilder:validation:Required
	SubnetIDs []*string `json:"subnetIDs"`
	// Tags to associated with the Domain. Each tag consists of a key and an optional
	// value. Tag keys must be unique per resource. Tags are searchable using the
	// Search API.
	//
	// Tags that you specify for the Domain are also added to all Apps that the
	// Domain launches.
	Tags []*Tag `json:"tags,omitempty"`
	// The ID of the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.
	// +kubebuilder:validation:Required
	VPCID *string `json:"vpcID"`
}

// DomainStatus defines the observed state of Domain
type DomainStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRS managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// The domain ID.
	// +kubebuilder:validation:Optional
	DomainID *string `json:"domainID,omitempty"`
	// The status.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty"`
	// The URL to the created domain.
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty"`
}

// Domain is the Schema for the Domains API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="DOMAIN-ID",type=string,priority=0,JSONPath=`.status.domainID`
// +kubebuilder:printcolumn:name="STATUS",type=string,priority=0,JSONPath=`.status.status`
type Domain struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DomainSpec   `json:"spec,omitempty"`
	Status            DomainStatus `json:"status,omitempty"`
}

// DomainList contains a list of Domain
// +kubebuilder:object:root=true
type DomainList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Domain `json:"items"`
}

func init() {
	SchemeBuilder.Register(&Domain{}, &DomainList{})
}
